
heading_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000777c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08007980  08007980  00008980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d2c  08007d2c  00008d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d34  08007d34  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08007f10  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08007f10  000094a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f752  00000000  00000000  00009202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3c  00000000  00000000  00018954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b01  00000000  00000000  0001b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291b1  00000000  00000000  0001c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001110b  00000000  00000000  00045352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010298b  00000000  00000000  0005645d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af0  00000000  00000000  00158e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007964 	.word	0x08007964

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08007964 	.word	0x08007964

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fdd6 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f883 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa17 	bl	8000a5c <MX_GPIO_Init>
  MX_ADC1_Init();
 800062e:	f000 f8e7 	bl	8000800 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000632:	f000 f9e3 	bl	80009fc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000636:	f000 f935 	bl	80008a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	4832      	ldr	r0, [pc, #200]	@ (8000708 <main+0xec>)
 800063e:	f002 fed9 	bl	80033f4 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000642:	4b32      	ldr	r3, [pc, #200]	@ (800070c <main+0xf0>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	@ 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // ADC with polling
	  HAL_ADC_Start(&hadc1);
 8000648:	4831      	ldr	r0, [pc, #196]	@ (8000710 <main+0xf4>)
 800064a:	f000 fe87 	bl	800135c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800064e:	210a      	movs	r1, #10
 8000650:	482f      	ldr	r0, [pc, #188]	@ (8000710 <main+0xf4>)
 8000652:	f000 ff85 	bl	8001560 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000656:	482e      	ldr	r0, [pc, #184]	@ (8000710 <main+0xf4>)
 8000658:	f001 f80d 	bl	8001676 <HAL_ADC_GetValue>
 800065c:	4603      	mov	r3, r0
 800065e:	4a2d      	ldr	r2, [pc, #180]	@ (8000714 <main+0xf8>)
 8000660:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000662:	482b      	ldr	r0, [pc, #172]	@ (8000710 <main+0xf4>)
 8000664:	f000 ff48 	bl	80014f8 <HAL_ADC_Stop>

	  // Converting ADC value to duty cycle to control motor heading
	  TIM1->CCR1 = Map_ADC_Duty(adc_value, htim1.Init.Period);
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <main+0xf8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <main+0xec>)
 800066e:	68d2      	ldr	r2, [r2, #12]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fb1e 	bl	8000cb4 <Map_ADC_Duty>
 8000678:	eef0 7a40 	vmov.f32	s15, s0
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <main+0xf0>)
 800067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000682:	ee17 2a90 	vmov	r2, s15
 8000686:	635a      	str	r2, [r3, #52]	@ 0x34
	  duty = ((float)TIM1->CCR1 / (float)htim1.Init.Period) * 100.0f;
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <main+0xf0>)
 800068a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068c:	ee07 3a90 	vmov	s15, r3
 8000690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <main+0xec>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000718 <main+0xfc>
 80006a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <main+0x100>)
 80006ae:	edc3 7a00 	vstr	s15, [r3]

	  // UART to Serial Print
	  dcv = Map_ADC_DCV(adc_value);
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <main+0xf8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fae0 	bl	8000c7c <Map_ADC_DCV>
 80006bc:	eef0 7a40 	vmov.f32	s15, s0
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <main+0x104>)
 80006c2:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*)msg, "Raw: %d, V: %f, duty: %f \r\n", (int)adc_value, dcv, duty);
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <main+0xf8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0x104>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <main+0x100>)
 80006d8:	edd3 6a00 	vldr	s13, [r3]
 80006dc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80006e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80006e4:	ed8d 7b00 	vstr	d7, [sp]
 80006e8:	490e      	ldr	r1, [pc, #56]	@ (8000724 <main+0x108>)
 80006ea:	480f      	ldr	r0, [pc, #60]	@ (8000728 <main+0x10c>)
 80006ec:	f005 f878 	bl	80057e0 <siprintf>
	  HAL_UART_Transmit(&huart3, msg, sizeof(msg), 100);
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	2232      	movs	r2, #50	@ 0x32
 80006f4:	490c      	ldr	r1, [pc, #48]	@ (8000728 <main+0x10c>)
 80006f6:	480d      	ldr	r0, [pc, #52]	@ (800072c <main+0x110>)
 80006f8:	f003 fe72 	bl	80043e0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80006fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000700:	f000 fdc4 	bl	800128c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000704:	bf00      	nop
 8000706:	e79f      	b.n	8000648 <main+0x2c>
 8000708:	20000238 	.word	0x20000238
 800070c:	40010000 	.word	0x40010000
 8000710:	200001f0 	.word	0x200001f0
 8000714:	2000030c 	.word	0x2000030c
 8000718:	42c80000 	.word	0x42c80000
 800071c:	20000314 	.word	0x20000314
 8000720:	20000310 	.word	0x20000310
 8000724:	08007980 	.word	0x08007980
 8000728:	20000318 	.word	0x20000318
 800072c:	20000284 	.word	0x20000284

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f005 f8b3 	bl	80058aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xc8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <SystemClock_Config+0xc8>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <SystemClock_Config+0xcc>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007a0:	2360      	movs	r3, #96	@ 0x60
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80007a4:	2306      	movs	r3, #6
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fc6b 	bl	8002090 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 fab4 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 ff03 	bl	80025ec <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ec:	f000 fa9e 	bl	8000d2c <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000814:	4a21      	ldr	r2, [pc, #132]	@ (800089c <MX_ADC1_Init+0x9c>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_ADC1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <MX_ADC1_Init+0xa0>)
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_ADC1_Init+0x98>)
 800084c:	2201      	movs	r2, #1
 800084e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_ADC1_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800085e:	480e      	ldr	r0, [pc, #56]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000860:	f000 fd38 	bl	80012d4 <HAL_ADC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 fa5f 	bl	8000d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000872:	2301      	movs	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <MX_ADC1_Init+0x98>)
 8000880:	f000 ff06 	bl	8001690 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800088a:	f000 fa4f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001f0 	.word	0x200001f0
 800089c:	40012000 	.word	0x40012000
 80008a0:	0f000001 	.word	0x0f000001

080008a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09a      	sub	sp, #104	@ 0x68
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	222c      	movs	r2, #44	@ 0x2c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 ffe3 	bl	80058aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e4:	4b43      	ldr	r3, [pc, #268]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80008e6:	4a44      	ldr	r2, [pc, #272]	@ (80009f8 <MX_TIM1_Init+0x154>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80008ea:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80008ec:	223f      	movs	r2, #63	@ 0x3f
 80008ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b40      	ldr	r3, [pc, #256]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80008f6:	4b3f      	ldr	r3, [pc, #252]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80008f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b3d      	ldr	r3, [pc, #244]	@ (80009f4 <MX_TIM1_Init+0x150>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000904:	4b3b      	ldr	r3, [pc, #236]	@ (80009f4 <MX_TIM1_Init+0x150>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b3a      	ldr	r3, [pc, #232]	@ (80009f4 <MX_TIM1_Init+0x150>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000910:	4838      	ldr	r0, [pc, #224]	@ (80009f4 <MX_TIM1_Init+0x150>)
 8000912:	f002 fcb7 	bl	8003284 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 fa06 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800092a:	4619      	mov	r1, r3
 800092c:	4831      	ldr	r0, [pc, #196]	@ (80009f4 <MX_TIM1_Init+0x150>)
 800092e:	f002 ff6f 	bl	8003810 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000938:	f000 f9f8 	bl	8000d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800093c:	482d      	ldr	r0, [pc, #180]	@ (80009f4 <MX_TIM1_Init+0x150>)
 800093e:	f002 fcf8 	bl	8003332 <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000948:	f000 f9f0 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000958:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4825      	ldr	r0, [pc, #148]	@ (80009f4 <MX_TIM1_Init+0x150>)
 8000960:	f003 fbe4 	bl	800412c <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800096a:	f000 f9df 	bl	8000d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	@ 0x60
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <MX_TIM1_Init+0x150>)
 8000994:	f002 fe28 	bl	80035e8 <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800099e:	f000 f9c5 	bl	8000d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80009d8:	f003 fc36 	bl	8004248 <HAL_TIMEx_ConfigBreakDeadTime>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009e2:	f000 f9a3 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009e6:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <MX_TIM1_Init+0x150>)
 80009e8:	f000 fa2a 	bl	8000e40 <HAL_TIM_MspPostInit>

}
 80009ec:	bf00      	nop
 80009ee:	3768      	adds	r7, #104	@ 0x68
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000238 	.word	0x20000238
 80009f8:	40010000 	.word	0x40010000

080009fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <MX_USART3_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a08:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a40:	f003 fc80 	bl	8004344 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f96f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000284 	.word	0x20000284
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	@ 0x30
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b7d      	ldr	r3, [pc, #500]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a7c      	ldr	r2, [pc, #496]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	4b77      	ldr	r3, [pc, #476]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a76      	ldr	r2, [pc, #472]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b74      	ldr	r3, [pc, #464]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b71      	ldr	r3, [pc, #452]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a70      	ldr	r2, [pc, #448]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b6e      	ldr	r3, [pc, #440]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b6b      	ldr	r3, [pc, #428]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a6a      	ldr	r2, [pc, #424]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b68      	ldr	r3, [pc, #416]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4b65      	ldr	r3, [pc, #404]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a64      	ldr	r2, [pc, #400]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b62      	ldr	r3, [pc, #392]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b5f      	ldr	r3, [pc, #380]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a5e      	ldr	r2, [pc, #376]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b5c      	ldr	r3, [pc, #368]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b02:	4b59      	ldr	r3, [pc, #356]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a58      	ldr	r2, [pc, #352]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b56      	ldr	r3, [pc, #344]	@ (8000c68 <MX_GPIO_Init+0x20c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b20:	4852      	ldr	r0, [pc, #328]	@ (8000c6c <MX_GPIO_Init+0x210>)
 8000b22:	f001 fa9b 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	@ 0x40
 8000b2a:	4851      	ldr	r0, [pc, #324]	@ (8000c70 <MX_GPIO_Init+0x214>)
 8000b2c:	f001 fa96 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	484b      	ldr	r0, [pc, #300]	@ (8000c74 <MX_GPIO_Init+0x218>)
 8000b48:	f001 f8dc 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b4c:	2332      	movs	r3, #50	@ 0x32
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4843      	ldr	r0, [pc, #268]	@ (8000c74 <MX_GPIO_Init+0x218>)
 8000b68:	f001 f8cc 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b6c:	2386      	movs	r3, #134	@ 0x86
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <MX_GPIO_Init+0x21c>)
 8000b88:	f001 f8bc 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b8c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4831      	ldr	r0, [pc, #196]	@ (8000c6c <MX_GPIO_Init+0x210>)
 8000ba6:	f001 f8ad 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4829      	ldr	r0, [pc, #164]	@ (8000c6c <MX_GPIO_Init+0x210>)
 8000bc8:	f001 f89c 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bcc:	2340      	movs	r3, #64	@ 0x40
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4823      	ldr	r0, [pc, #140]	@ (8000c70 <MX_GPIO_Init+0x214>)
 8000be4:	f001 f88e 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <MX_GPIO_Init+0x214>)
 8000bfc:	f001 f882 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c12:	230a      	movs	r3, #10
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4816      	ldr	r0, [pc, #88]	@ (8000c78 <MX_GPIO_Init+0x21c>)
 8000c1e:	f001 f871 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <MX_GPIO_Init+0x21c>)
 8000c38:	f001 f864 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_GPIO_Init+0x214>)
 8000c5a:	f001 f853 	bl	8001d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	3730      	adds	r7, #48	@ 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020000 	.word	0x40020000

08000c7c <Map_ADC_DCV>:

/* USER CODE BEGIN 4 */

float Map_ADC_DCV(uint32_t adc_value){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	return (adc_value / 4095.0f) * 3.3f;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c8e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000cac <Map_ADC_DCV+0x30>
 8000c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c96:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000cb0 <Map_ADC_DCV+0x34>
 8000c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	457ff000 	.word	0x457ff000
 8000cb0:	40533333 	.word	0x40533333

08000cb4 <Map_ADC_Duty>:

float Map_ADC_Duty(uint32_t adc_value, uint32_t period){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	float maxdc = 0.125f;		// Maximum and minimum duty cycles of SG 90 motors
 8000cbe:	f04f 5378 	mov.w	r3, #1040187392	@ 0x3e000000
 8000cc2:	617b      	str	r3, [r7, #20]
	float mindc = 0.025f;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <Map_ADC_Duty+0x70>)
 8000cc6:	613b      	str	r3, [r7, #16]
	float maxp = (maxdc-mindc) * period;
 8000cc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	return ((adc_value * (maxp / 4095.0f)) + (mindc*period));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cf0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000cf4:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8000d28 <Map_ADC_Duty+0x74>
 8000cf8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d12:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d16:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	3ccccccd 	.word	0x3ccccccd
 8000d28:	457ff000 	.word	0x457ff000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a15      	ldr	r2, [pc, #84]	@ (8000df4 <HAL_ADC_MspInit+0x74>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d123      	bne.n	8000dea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_ADC_MspInit+0x78>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_ADC_MspInit+0x7c>)
 8000de6:	f000 ff8d 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40012000 	.word	0x40012000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_TIM_Base_MspInit+0x38>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10b      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <HAL_TIM_Base_MspInit+0x3c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <HAL_TIM_Base_MspInit+0x3c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a11      	ldr	r2, [pc, #68]	@ (8000ea4 <HAL_TIM_MspPostInit+0x64>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d11c      	bne.n	8000e9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_TIM_MspPostInit+0x68>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	f000 ff34 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010000 	.word	0x40010000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ae      	sub	sp, #184	@ 0xb8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2290      	movs	r2, #144	@ 0x90
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f004 fcea 	bl	80058aa <memset>
  if(huart->Instance==USART3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <HAL_UART_MspInit+0xb4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13c      	bne.n	8000f5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fda0 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff ff17 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_UART_MspInit+0xbc>)
 8000f56:	f000 fed5 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37b8      	adds	r7, #184	@ 0xb8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <NMI_Handler+0x4>

08000f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <MemManage_Handler+0x4>

08000f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f941 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_kill>:

int _kill(int pid, int sig)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fe8:	f004 fcb2 	bl	8005950 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2216      	movs	r2, #22
 8000ff0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_exit>:

void _exit (int status)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffe7 	bl	8000fde <_kill>
  while (1) {}    /* Make sure we hang here */
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <_exit+0x12>

08001014 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00a      	b.n	800103c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001026:	f3af 8000 	nop.w
 800102a:	4601      	mov	r1, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf0      	blt.n	8001026 <_read+0x12>
  }

  return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x12>
  }
  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_close>:

int _close(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ae:	605a      	str	r2, [r3, #4]
  return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_isatty>:

int _isatty(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 fc16 	bl	8005950 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20080000 	.word	0x20080000
 8001150:	00000400 	.word	0x00000400
 8001154:	2000034c 	.word	0x2000034c
 8001158:	200004a0 	.word	0x200004a0

0800115c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fbd5 	bl	800595c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fa33 	bl	800061c <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011c4:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 80011c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011cc:	200004a0 	.word	0x200004a0

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>

080011d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 fd60 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f805 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e2:	f7ff fda9 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fd6d 	bl	8001cea <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 fd43 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000350 	.word	0x20000350

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000350 	.word	0x20000350

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e031      	b.n	800134e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd44 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <HAL_ADC_Init+0x84>)
 8001318:	4013      	ands	r3, r2
 800131a:	f043 0202 	orr.w	r2, r3, #2
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fb0e 	bl	8001944 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
 800133e:	e001      	b.n	8001344 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	ffffeefd 	.word	0xffffeefd

0800135c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_ADC_Start+0x1a>
 8001372:	2302      	movs	r3, #2
 8001374:	e0ad      	b.n	80014d2 <HAL_ADC_Start+0x176>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d018      	beq.n	80013be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800139c:	4b50      	ldr	r3, [pc, #320]	@ (80014e0 <HAL_ADC_Start+0x184>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a50      	ldr	r2, [pc, #320]	@ (80014e4 <HAL_ADC_Start+0x188>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9a      	lsrs	r2, r3, #18
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d175      	bne.n	80014b8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013d0:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_ADC_Start+0x18c>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001406:	d106      	bne.n	8001416 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140c:	f023 0206 	bic.w	r2, r3, #6
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44
 8001414:	e002      	b.n	800141c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800142c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_ADC_Start+0x190>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d143      	bne.n	80014d0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e03a      	b.n	80014d0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a24      	ldr	r2, [pc, #144]	@ (80014f0 <HAL_ADC_Start+0x194>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10e      	bne.n	8001482 <HAL_ADC_Start+0x126>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d107      	bne.n	8001482 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001480:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_ADC_Start+0x190>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d120      	bne.n	80014d0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <HAL_ADC_Start+0x198>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d11b      	bne.n	80014d0 <HAL_ADC_Start+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d114      	bne.n	80014d0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	e00b      	b.n	80014d0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f043 0210 	orr.w	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83
 80014e8:	fffff8fe 	.word	0xfffff8fe
 80014ec:	40012300 	.word	0x40012300
 80014f0:	40012000 	.word	0x40012000
 80014f4:	40012200 	.word	0x40012200

080014f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ADC_Stop+0x16>
 800150a:	2302      	movs	r3, #2
 800150c:	e01f      	b.n	800154e <HAL_ADC_Stop+0x56>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_ADC_Stop+0x64>)
 800153a:	4013      	ands	r3, r2
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	ffffeefe 	.word	0xffffeefe

08001560 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157c:	d113      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800158c:	d10b      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f043 0220 	orr.w	r2, r3, #32
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e063      	b.n	800166e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015a6:	f7ff fe65 	bl	8001274 <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ac:	e021      	b.n	80015f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d01d      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_ADC_PollForConversion+0x6c>
 80015bc:	f7ff fe5a 	bl	8001274 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d212      	bcs.n	80015f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d00b      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f043 0204 	orr.w	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e03d      	b.n	800166e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d1d6      	bne.n	80015ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0212 	mvn.w	r2, #18
 8001608:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d123      	bne.n	800166c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001628:	2b00      	cmp	r3, #0
 800162a:	d11f      	bne.n	800166c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x1c>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e13a      	b.n	8001922 <HAL_ADC_ConfigChannel+0x292>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b09      	cmp	r3, #9
 80016ba:	d93a      	bls.n	8001732 <HAL_ADC_ConfigChannel+0xa2>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016c4:	d035      	beq.n	8001732 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68d9      	ldr	r1, [r3, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	3b1e      	subs	r3, #30
 80016dc:	2207      	movs	r2, #7
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10a      	bne.n	800170c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	061a      	lsls	r2, r3, #24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800170a:	e039      	b.n	8001780 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	4603      	mov	r3, r0
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4403      	add	r3, r0
 8001724:	3b1e      	subs	r3, #30
 8001726:	409a      	lsls	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001730:	e026      	b.n	8001780 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6919      	ldr	r1, [r3, #16]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6919      	ldr	r1, [r3, #16]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	4603      	mov	r3, r0
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4403      	add	r3, r0
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	409a      	lsls	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d824      	bhi.n	80017d2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b05      	subs	r3, #5
 800179a:	221f      	movs	r2, #31
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43da      	mvns	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	400a      	ands	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3b05      	subs	r3, #5
 80017c4:	fa00 f203 	lsl.w	r2, r0, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d0:	e04c      	b.n	800186c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d824      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b23      	subs	r3, #35	@ 0x23
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b23      	subs	r3, #35	@ 0x23
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
 8001822:	e023      	b.n	800186c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b41      	subs	r3, #65	@ 0x41
 8001836:	221f      	movs	r2, #31
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b41      	subs	r3, #65	@ 0x41
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a30      	ldr	r2, [pc, #192]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10a      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1fc>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800187e:	d105      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001880:	4b2d      	ldr	r3, [pc, #180]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a2c      	ldr	r2, [pc, #176]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 8001886:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800188a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a28      	ldr	r2, [pc, #160]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10f      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x226>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d10b      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800189e:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a25      	ldr	r2, [pc, #148]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <HAL_ADC_ConfigChannel+0x2a4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d12b      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x288>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d003      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x242>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	d122      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <HAL_ADC_ConfigChannel+0x2a8>)
 80018e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_ADC_ConfigChannel+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a11      	ldr	r2, [pc, #68]	@ (8001940 <HAL_ADC_ConfigChannel+0x2b0>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0c9a      	lsrs	r2, r3, #18
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800190a:	e002      	b.n	8001912 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3b01      	subs	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	10000012 	.word	0x10000012
 8001934:	40012000 	.word	0x40012000
 8001938:	40012300 	.word	0x40012300
 800193c:	20000000 	.word	0x20000000
 8001940:	431bde83 	.word	0x431bde83

08001944 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800194c:	4b78      	ldr	r3, [pc, #480]	@ (8001b30 <ADC_Init+0x1ec>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a77      	ldr	r2, [pc, #476]	@ (8001b30 <ADC_Init+0x1ec>)
 8001952:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001956:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001958:	4b75      	ldr	r3, [pc, #468]	@ (8001b30 <ADC_Init+0x1ec>)
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4973      	ldr	r1, [pc, #460]	@ (8001b30 <ADC_Init+0x1ec>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001974:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	021a      	lsls	r2, r3, #8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	4a58      	ldr	r2, [pc, #352]	@ (8001b34 <ADC_Init+0x1f0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	e00f      	b.n	8001a3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0202 	bic.w	r2, r2, #2
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6899      	ldr	r1, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	005a      	lsls	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01b      	beq.n	8001aa4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	3b01      	subs	r3, #1
 8001a98:	035a      	lsls	r2, r3, #13
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	e007      	b.n	8001ab4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	051a      	lsls	r2, r3, #20
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6899      	ldr	r1, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001af6:	025a      	lsls	r2, r3, #9
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	029a      	lsls	r2, r3, #10
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40012300 	.word	0x40012300
 8001b34:	0f000001 	.word	0x0f000001

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x40>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	05fa0000 	.word	0x05fa0000

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff47 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff5c 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffb0 	bl	8001c58 <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e175      	b.n	8002010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8164 	bne.w	800200a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x56>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80be 	beq.w	800200a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a65      	ldr	r2, [pc, #404]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b63      	ldr	r3, [pc, #396]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ea6:	4a61      	ldr	r2, [pc, #388]	@ (800202c <HAL_GPIO_Init+0x328>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <HAL_GPIO_Init+0x32c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d037      	beq.n	8001f42 <HAL_GPIO_Init+0x23e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a57      	ldr	r2, [pc, #348]	@ (8002034 <HAL_GPIO_Init+0x330>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_GPIO_Init+0x23a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a56      	ldr	r2, [pc, #344]	@ (8002038 <HAL_GPIO_Init+0x334>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02b      	beq.n	8001f3a <HAL_GPIO_Init+0x236>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a55      	ldr	r2, [pc, #340]	@ (800203c <HAL_GPIO_Init+0x338>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d025      	beq.n	8001f36 <HAL_GPIO_Init+0x232>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a54      	ldr	r2, [pc, #336]	@ (8002040 <HAL_GPIO_Init+0x33c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_GPIO_Init+0x22e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a53      	ldr	r2, [pc, #332]	@ (8002044 <HAL_GPIO_Init+0x340>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x22a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	@ (8002048 <HAL_GPIO_Init+0x344>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x226>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a51      	ldr	r2, [pc, #324]	@ (800204c <HAL_GPIO_Init+0x348>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x222>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	@ (8002050 <HAL_GPIO_Init+0x34c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x21e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	@ (8002054 <HAL_GPIO_Init+0x350>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	e012      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f1e:	230a      	movs	r3, #10
 8001f20:	e010      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00e      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x240>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <HAL_GPIO_Init+0x328>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3d      	ldr	r3, [pc, #244]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a34      	ldr	r2, [pc, #208]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a29      	ldr	r2, [pc, #164]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <HAL_GPIO_Init+0x354>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae86 	bls.w	8001d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40022000 	.word	0x40022000
 8002054:	40022400 	.word	0x40022400
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002078:	e003      	b.n	8002082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	041a      	lsls	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e29b      	b.n	80025de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b96      	ldr	r3, [pc, #600]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c0:	4b93      	ldr	r3, [pc, #588]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x62>
 80020cc:	4b90      	ldr	r3, [pc, #576]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b8d      	ldr	r3, [pc, #564]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x130>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e275      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x7a>
 80020fc:	4b84      	ldr	r3, [pc, #528]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a83      	ldr	r2, [pc, #524]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x9c>
 8002112:	4b7f      	ldr	r3, [pc, #508]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7e      	ldr	r2, [pc, #504]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b7c      	ldr	r3, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7b      	ldr	r2, [pc, #492]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xc0>
 8002136:	4b76      	ldr	r3, [pc, #472]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a75      	ldr	r2, [pc, #468]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b73      	ldr	r3, [pc, #460]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 8002150:	4b6f      	ldr	r3, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b6c      	ldr	r3, [pc, #432]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6b      	ldr	r2, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f880 	bl	8001274 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f87c 	bl	8001274 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	@ 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e229      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b61      	ldr	r3, [pc, #388]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe8>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f86c 	bl	8001274 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f868 	bl	8001274 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	@ 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e215      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x110>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d069      	beq.n	80022a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b4d      	ldr	r3, [pc, #308]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x190>
 80021e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x17a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1e9      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	493d      	ldr	r1, [pc, #244]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e040      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f81e 	bl	8001274 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7ff f81a 	bl	8001274 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1c7      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4929      	ldr	r1, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e018      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002270:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fffa 	bl	8001274 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fff6 	bl	8001274 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1a3      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d038      	beq.n	8002320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe ffd7 	bl	8001274 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe ffd3 	bl	8001274 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e180      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x23a>
 80022e8:	e01a      	b.n	8002320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ee:	4a08      	ldr	r2, [pc, #32]	@ (8002310 <HAL_RCC_OscConfig+0x280>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe ffbd 	bl	8001274 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe ffb9 	bl	8001274 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d903      	bls.n	8002314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e166      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
 8002310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b92      	ldr	r3, [pc, #584]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a4 	beq.w	8002476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b8c      	ldr	r3, [pc, #560]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b89      	ldr	r3, [pc, #548]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	4a88      	ldr	r2, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
 8002346:	4b86      	ldr	r3, [pc, #536]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	4b83      	ldr	r3, [pc, #524]	@ (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002362:	4b80      	ldr	r3, [pc, #512]	@ (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7f      	ldr	r2, [pc, #508]	@ (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7fe ff81 	bl	8001274 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7fe ff7d 	bl	8001274 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	@ 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e12a      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <HAL_RCC_OscConfig+0x4d4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x31a>
 800239c:	4b70      	ldr	r3, [pc, #448]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a0:	4a6f      	ldr	r2, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a8:	e02d      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x33c>
 80023b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023be:	4b68      	ldr	r3, [pc, #416]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	4a67      	ldr	r2, [pc, #412]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ca:	e01c      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x35e>
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	4a61      	ldr	r2, [pc, #388]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fa:	4b59      	ldr	r3, [pc, #356]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a58      	ldr	r2, [pc, #352]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d015      	beq.n	800243a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe ff31 	bl	8001274 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe ff2d 	bl	8001274 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0d8      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4b4c      	ldr	r3, [pc, #304]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ee      	beq.n	8002416 <HAL_RCC_OscConfig+0x386>
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe ff1b 	bl	8001274 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe ff17 	bl	8001274 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0c2      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ee      	bne.n	8002442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a3c      	ldr	r2, [pc, #240]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80ae 	beq.w	80025dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002480:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d06d      	beq.n	8002568 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d14b      	bne.n	800252c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b32      	ldr	r3, [pc, #200]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a31      	ldr	r2, [pc, #196]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fee8 	bl	8001274 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fee4 	bl	8001274 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e091      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	491b      	ldr	r1, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe feb6 	bl	8001274 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe feb2 	bl	8001274 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e05f      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x47c>
 800252a:	e057      	b.n	80025dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe9c 	bl	8001274 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fe98 	bl	8001274 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e045      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x4b0>
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x54c>
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002568:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <HAL_RCC_OscConfig+0x558>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d030      	beq.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d129      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d122      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800259e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d119      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10f      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4965      	ldr	r1, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe fdc8 	bl	8001274 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fdc4 	bl	8001274 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	4922      	ldr	r1, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1d4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fd24 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	0800799c 	.word	0x0800799c
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b094      	sub	sp, #80	@ 0x50
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d0:	2300      	movs	r3, #0
 80027d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027d4:	2300      	movs	r3, #0
 80027d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b79      	ldr	r3, [pc, #484]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80e1 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e0db      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fc:	e0db      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002802:	e0d8      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b6f      	ldr	r3, [pc, #444]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b6a      	ldr	r3, [pc, #424]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002824:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	633b      	str	r3, [r7, #48]	@ 0x30
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
 8002832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4621      	mov	r1, r4
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	6139      	str	r1, [r7, #16]
 8002854:	4629      	mov	r1, r5
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002868:	4659      	mov	r1, fp
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002872:	4651      	mov	r1, sl
 8002874:	018a      	lsls	r2, r1, #6
 8002876:	4651      	mov	r1, sl
 8002878:	ebb2 0801 	subs.w	r8, r2, r1
 800287c:	4659      	mov	r1, fp
 800287e:	eb63 0901 	sbc.w	r9, r3, r1
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002896:	4690      	mov	r8, r2
 8002898:	4699      	mov	r9, r3
 800289a:	4623      	mov	r3, r4
 800289c:	eb18 0303 	adds.w	r3, r8, r3
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	462b      	mov	r3, r5
 80028a4:	eb49 0303 	adc.w	r3, r9, r3
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b6:	4629      	mov	r1, r5
 80028b8:	028b      	lsls	r3, r1, #10
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c0:	4621      	mov	r1, r4
 80028c2:	028a      	lsls	r2, r1, #10
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028d4:	f7fd fd0c 	bl	80002f0 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e0:	e058      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	4611      	mov	r1, r2
 80028ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028fc:	4642      	mov	r2, r8
 80028fe:	464b      	mov	r3, r9
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4641      	mov	r1, r8
 8002916:	ebb2 0a01 	subs.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800292c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002934:	ebb2 040a 	subs.w	r4, r2, sl
 8002938:	eb63 050b 	sbc.w	r5, r3, fp
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
 8002950:	4643      	mov	r3, r8
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	464b      	mov	r3, r9
 8002958:	eb45 0303 	adc.w	r3, r5, r3
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	61fa      	str	r2, [r7, #28]
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	f7fd fcb2 	bl	80002f0 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3750      	adds	r7, #80	@ 0x50
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400

080029cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080079ac 	.word	0x080079ac

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	@ (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080079ac 	.word	0x080079ac

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a5c:	4b69      	ldr	r3, [pc, #420]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	4b66      	ldr	r3, [pc, #408]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a70:	4964      	ldr	r1, [pc, #400]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	4959      	ldr	r1, [pc, #356]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aca:	4b4e      	ldr	r3, [pc, #312]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ad0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	494a      	ldr	r1, [pc, #296]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 808b 	beq.w	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b3a      	ldr	r3, [pc, #232]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	4a39      	ldr	r2, [pc, #228]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b30:	4b35      	ldr	r3, [pc, #212]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a34      	ldr	r2, [pc, #208]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fb9a 	bl	8001274 <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7fe fb96 	bl	8001274 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e38f      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b62:	4b28      	ldr	r3, [pc, #160]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d035      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d02e      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b80:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ba2:	4a18      	ldr	r2, [pc, #96]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ba8:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d114      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fb5e 	bl	8001274 <HAL_GetTick>
 8002bb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fb5a 	bl	8001274 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e351      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ee      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bea:	d111      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bec:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	4901      	ldr	r1, [pc, #4]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	0ffffcff 	.word	0x0ffffcff
 8002c10:	4bac      	ldr	r3, [pc, #688]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4aab      	ldr	r2, [pc, #684]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	49a6      	ldr	r1, [pc, #664]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c3a:	4ba2      	ldr	r3, [pc, #648]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c40:	4aa0      	ldr	r2, [pc, #640]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c4a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	499b      	ldr	r1, [pc, #620]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c68:	4b96      	ldr	r3, [pc, #600]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c76:	4993      	ldr	r1, [pc, #588]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c98:	498a      	ldr	r1, [pc, #552]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cac:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cba:	4982      	ldr	r1, [pc, #520]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cce:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4979      	ldr	r1, [pc, #484]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf0:	4b74      	ldr	r3, [pc, #464]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	4971      	ldr	r1, [pc, #452]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d12:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f023 020c 	bic.w	r2, r3, #12
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d20:	4968      	ldr	r1, [pc, #416]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d34:	4b63      	ldr	r3, [pc, #396]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	4960      	ldr	r1, [pc, #384]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d56:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d64:	4957      	ldr	r1, [pc, #348]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d78:	4b52      	ldr	r3, [pc, #328]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	494f      	ldr	r1, [pc, #316]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	4946      	ldr	r1, [pc, #280]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	493e      	ldr	r1, [pc, #248]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dde:	4b39      	ldr	r3, [pc, #228]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dec:	4935      	ldr	r1, [pc, #212]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e00:	4b30      	ldr	r3, [pc, #192]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e0e:	492d      	ldr	r1, [pc, #180]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d011      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e22:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e28:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e30:	4924      	ldr	r1, [pc, #144]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e62:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e70:	4914      	ldr	r1, [pc, #80]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e94:	490b      	ldr	r1, [pc, #44]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00f      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb8:	4902      	ldr	r1, [pc, #8]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	4986      	ldr	r1, [pc, #536]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ef8:	4b81      	ldr	r3, [pc, #516]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f08:	497d      	ldr	r1, [pc, #500]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d006      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80d6 	beq.w	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f24:	4b76      	ldr	r3, [pc, #472]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a75      	ldr	r2, [pc, #468]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe f9a0 	bl	8001274 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f38:	f7fe f99c 	bl	8001274 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e195      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d021      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11d      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f6a:	4b65      	ldr	r3, [pc, #404]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f78:	4b61      	ldr	r3, [pc, #388]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f7e:	0e1b      	lsrs	r3, r3, #24
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	4958      	ldr	r1, [pc, #352]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02e      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd0:	d129      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe0:	4b47      	ldr	r3, [pc, #284]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe6:	0f1b      	lsrs	r3, r3, #28
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	493e      	ldr	r1, [pc, #248]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800300e:	4b3c      	ldr	r3, [pc, #240]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003014:	f023 021f 	bic.w	r2, r3, #31
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	3b01      	subs	r3, #1
 800301e:	4938      	ldr	r1, [pc, #224]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01d      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003032:	4b33      	ldr	r3, [pc, #204]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003038:	0e1b      	lsrs	r3, r3, #24
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003040:	4b2f      	ldr	r3, [pc, #188]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003046:	0f1b      	lsrs	r3, r3, #28
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	4926      	ldr	r1, [pc, #152]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	071b      	lsls	r3, r3, #28
 8003096:	491a      	ldr	r1, [pc, #104]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800309e:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030aa:	f7fe f8e3 	bl	8001274 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b2:	f7fe f8df 	bl	8001274 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b64      	cmp	r3, #100	@ 0x64
 80030be:	d901      	bls.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0d8      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f040 80ce 	bne.w	8003274 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a08      	ldr	r2, [pc, #32]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe f8c6 	bl	8001274 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ea:	e00b      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ec:	f7fe f8c2 	bl	8001274 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d904      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0bb      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003104:	4b5e      	ldr	r3, [pc, #376]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003110:	d0ec      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02e      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d12a      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003148:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	0f1b      	lsrs	r3, r3, #28
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	019a      	lsls	r2, r3, #6
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	071b      	lsls	r3, r3, #28
 800316e:	4944      	ldr	r1, [pc, #272]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003176:	4b42      	ldr	r3, [pc, #264]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800317c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	493d      	ldr	r1, [pc, #244]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d022      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a4:	d11d      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031a6:	4b36      	ldr	r3, [pc, #216]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ac:	0e1b      	lsrs	r3, r3, #24
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b4:	4b32      	ldr	r3, [pc, #200]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	019a      	lsls	r2, r3, #6
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	4929      	ldr	r1, [pc, #164]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ee:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031fc:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4917      	ldr	r1, [pc, #92]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800322a:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003230:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4911      	ldr	r1, [pc, #68]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0e      	ldr	r2, [pc, #56]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fe f812 	bl	8001274 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003254:	f7fe f80e 	bl	8001274 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e007      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003272:	d1ef      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fda8 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fb6e 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e049      	b.n	80033d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f841 	bl	80033e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 fb17 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_TIM_PWM_Start+0x24>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e03c      	b.n	8003492 <HAL_TIM_PWM_Start+0x9e>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b04      	cmp	r3, #4
 800341c:	d109      	bne.n	8003432 <HAL_TIM_PWM_Start+0x3e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e02f      	b.n	8003492 <HAL_TIM_PWM_Start+0x9e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d109      	bne.n	800344c <HAL_TIM_PWM_Start+0x58>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	e022      	b.n	8003492 <HAL_TIM_PWM_Start+0x9e>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d109      	bne.n	8003466 <HAL_TIM_PWM_Start+0x72>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e015      	b.n	8003492 <HAL_TIM_PWM_Start+0x9e>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b10      	cmp	r3, #16
 800346a:	d109      	bne.n	8003480 <HAL_TIM_PWM_Start+0x8c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e008      	b.n	8003492 <HAL_TIM_PWM_Start+0x9e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e092      	b.n	80035c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0xb6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a8:	e023      	b.n	80034f2 <HAL_TIM_PWM_Start+0xfe>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PWM_Start+0xc6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b8:	e01b      	b.n	80034f2 <HAL_TIM_PWM_Start+0xfe>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d104      	bne.n	80034ca <HAL_TIM_PWM_Start+0xd6>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_PWM_Start+0xfe>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0xe6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_PWM_Start+0xfe>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0xf6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_PWM_Start+0xfe>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fdf0 	bl	80040e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_TIM_PWM_Start+0x1d4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_PWM_Start+0x120>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2f      	ldr	r2, [pc, #188]	@ (80035cc <HAL_TIM_PWM_Start+0x1d8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_TIM_PWM_Start+0x124>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_TIM_PWM_Start+0x126>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_TIM_PWM_Start+0x1d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003540:	d01d      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_TIM_PWM_Start+0x1dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <HAL_TIM_PWM_Start+0x1e0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1f      	ldr	r2, [pc, #124]	@ (80035d8 <HAL_TIM_PWM_Start+0x1e4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_TIM_PWM_Start+0x1d8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_TIM_PWM_Start+0x1e8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIM_PWM_Start+0x18a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <HAL_TIM_PWM_Start+0x1ec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d115      	bne.n	80035aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b17      	ldr	r3, [pc, #92]	@ (80035e4 <HAL_TIM_PWM_Start+0x1f0>)
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d015      	beq.n	80035bc <HAL_TIM_PWM_Start+0x1c8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d011      	beq.n	80035bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a8:	e008      	b.n	80035bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e000      	b.n	80035be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40010400 	.word	0x40010400
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40001800 	.word	0x40001800
 80035e4:	00010007 	.word	0x00010007

080035e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003602:	2302      	movs	r3, #2
 8003604:	e0ff      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b14      	cmp	r3, #20
 8003612:	f200 80f0 	bhi.w	80037f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003616:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003671 	.word	0x08003671
 8003620:	080037f7 	.word	0x080037f7
 8003624:	080037f7 	.word	0x080037f7
 8003628:	080037f7 	.word	0x080037f7
 800362c:	080036b1 	.word	0x080036b1
 8003630:	080037f7 	.word	0x080037f7
 8003634:	080037f7 	.word	0x080037f7
 8003638:	080037f7 	.word	0x080037f7
 800363c:	080036f3 	.word	0x080036f3
 8003640:	080037f7 	.word	0x080037f7
 8003644:	080037f7 	.word	0x080037f7
 8003648:	080037f7 	.word	0x080037f7
 800364c:	08003733 	.word	0x08003733
 8003650:	080037f7 	.word	0x080037f7
 8003654:	080037f7 	.word	0x080037f7
 8003658:	080037f7 	.word	0x080037f7
 800365c:	08003775 	.word	0x08003775
 8003660:	080037f7 	.word	0x080037f7
 8003664:	080037f7 	.word	0x080037f7
 8003668:	080037f7 	.word	0x080037f7
 800366c:	080037b5 	.word	0x080037b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa3a 	bl	8003af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	619a      	str	r2, [r3, #24]
      break;
 80036ae:	e0a5      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa8c 	bl	8003bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	619a      	str	r2, [r3, #24]
      break;
 80036f0:	e084      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fae3 	bl	8003cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0208 	orr.w	r2, r2, #8
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0204 	bic.w	r2, r2, #4
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]
      break;
 8003730:	e064      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fb39 	bl	8003db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	61da      	str	r2, [r3, #28]
      break;
 8003772:	e043      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fb70 	bl	8003e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037b2:	e023      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fba2 	bl	8003f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037f4:	e002      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
      break;
 80037fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop

08003810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIM_ConfigClockSource+0x1c>
 8003828:	2302      	movs	r3, #2
 800382a:	e0b4      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x186>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	4b56      	ldr	r3, [pc, #344]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x190>)
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003864:	d03e      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386a:	f200 8087 	bhi.w	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003872:	f000 8086 	beq.w	8003982 <HAL_TIM_ConfigClockSource+0x172>
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387a:	d87f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b70      	cmp	r3, #112	@ 0x70
 800387e:	d01a      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003880:	2b70      	cmp	r3, #112	@ 0x70
 8003882:	d87b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b60      	cmp	r3, #96	@ 0x60
 8003886:	d050      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x11a>
 8003888:	2b60      	cmp	r3, #96	@ 0x60
 800388a:	d877      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b50      	cmp	r3, #80	@ 0x50
 800388e:	d03c      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xfa>
 8003890:	2b50      	cmp	r3, #80	@ 0x50
 8003892:	d873      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b40      	cmp	r3, #64	@ 0x40
 8003896:	d058      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x13a>
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d86f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b30      	cmp	r3, #48	@ 0x30
 800389e:	d064      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	2b30      	cmp	r3, #48	@ 0x30
 80038a2:	d86b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d060      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d867      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d05a      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	e062      	b.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c6:	f000 fbeb 	bl	80040a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
      break;
 80038e2:	e04f      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f4:	f000 fbd4 	bl	80040a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e03c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fb48 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2150      	movs	r1, #80	@ 0x50
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fba1 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003928:	e02c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fb67 	bl	800400a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2160      	movs	r1, #96	@ 0x60
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fb91 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003948:	e01c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fb28 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2140      	movs	r1, #64	@ 0x40
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fb81 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003968:	e00c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 fb78 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 800397a:	e003      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e000      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	fffeff88 	.word	0xfffeff88

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a43      	ldr	r2, [pc, #268]	@ (8003ac4 <TIM_Base_SetConfig+0x120>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a40      	ldr	r2, [pc, #256]	@ (8003ac8 <TIM_Base_SetConfig+0x124>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a3f      	ldr	r2, [pc, #252]	@ (8003acc <TIM_Base_SetConfig+0x128>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <TIM_Base_SetConfig+0x12c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3d      	ldr	r2, [pc, #244]	@ (8003ad4 <TIM_Base_SetConfig+0x130>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d108      	bne.n	80039f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a32      	ldr	r2, [pc, #200]	@ (8003ac4 <TIM_Base_SetConfig+0x120>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d027      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac8 <TIM_Base_SetConfig+0x124>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d023      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2e      	ldr	r2, [pc, #184]	@ (8003acc <TIM_Base_SetConfig+0x128>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01f      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <TIM_Base_SetConfig+0x12c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad4 <TIM_Base_SetConfig+0x130>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d017      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <TIM_Base_SetConfig+0x134>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	@ (8003adc <TIM_Base_SetConfig+0x138>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a29      	ldr	r2, [pc, #164]	@ (8003ae0 <TIM_Base_SetConfig+0x13c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <TIM_Base_SetConfig+0x140>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a27      	ldr	r2, [pc, #156]	@ (8003ae8 <TIM_Base_SetConfig+0x144>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <TIM_Base_SetConfig+0x148>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac4 <TIM_Base_SetConfig+0x120>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xf2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a10      	ldr	r2, [pc, #64]	@ (8003ad4 <TIM_Base_SetConfig+0x130>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d103      	bne.n	8003a9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40010400 	.word	0x40010400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800
 8003ae4:	40001800 	.word	0x40001800
 8003ae8:	40001c00 	.word	0x40001c00
 8003aec:	40002000 	.word	0x40002000

08003af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f023 0201 	bic.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc8 <TIM_OC1_SetConfig+0xd8>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0302 	bic.w	r3, r3, #2
 8003b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a21      	ldr	r2, [pc, #132]	@ (8003bcc <TIM_OC1_SetConfig+0xdc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC1_SetConfig+0x64>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <TIM_OC1_SetConfig+0xe0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10c      	bne.n	8003b6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0308 	bic.w	r3, r3, #8
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <TIM_OC1_SetConfig+0xdc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC1_SetConfig+0x8e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <TIM_OC1_SetConfig+0xe0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d111      	bne.n	8003ba2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	fffeff8f 	.word	0xfffeff8f
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0210 	bic.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb8 <TIM_OC2_SetConfig+0xe4>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0320 	bic.w	r3, r3, #32
 8003c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a23      	ldr	r2, [pc, #140]	@ (8003cbc <TIM_OC2_SetConfig+0xe8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC2_SetConfig+0x68>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a22      	ldr	r2, [pc, #136]	@ (8003cc0 <TIM_OC2_SetConfig+0xec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10d      	bne.n	8003c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a18      	ldr	r2, [pc, #96]	@ (8003cbc <TIM_OC2_SetConfig+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC2_SetConfig+0x94>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	@ (8003cc0 <TIM_OC2_SetConfig+0xec>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d113      	bne.n	8003c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	feff8fff 	.word	0xfeff8fff
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4b2d      	ldr	r3, [pc, #180]	@ (8003da4 <TIM_OC3_SetConfig+0xe0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <TIM_OC3_SetConfig+0xe4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_OC3_SetConfig+0x66>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a21      	ldr	r2, [pc, #132]	@ (8003dac <TIM_OC3_SetConfig+0xe8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10d      	bne.n	8003d46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <TIM_OC3_SetConfig+0xe4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_OC3_SetConfig+0x92>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <TIM_OC3_SetConfig+0xe8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d113      	bne.n	8003d7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	fffeff8f 	.word	0xfffeff8f
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <TIM_OC4_SetConfig+0xa4>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	031b      	lsls	r3, r3, #12
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <TIM_OC4_SetConfig+0xa8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC4_SetConfig+0x68>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a12      	ldr	r2, [pc, #72]	@ (8003e5c <TIM_OC4_SetConfig+0xac>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	feff8fff 	.word	0xfeff8fff
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40010400 	.word	0x40010400

08003e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <TIM_OC5_SetConfig+0x98>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <TIM_OC5_SetConfig+0x9c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC5_SetConfig+0x5e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <TIM_OC5_SetConfig+0xa0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d109      	bne.n	8003ed2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	fffeff8f 	.word	0xfffeff8f
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <TIM_OC6_SetConfig+0x9c>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	051b      	lsls	r3, r3, #20
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a13      	ldr	r2, [pc, #76]	@ (8003fa4 <TIM_OC6_SetConfig+0xa0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC6_SetConfig+0x60>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <TIM_OC6_SetConfig+0xa4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	feff8fff 	.word	0xfeff8fff
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010400 	.word	0x40010400

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 0210 	bic.w	r2, r3, #16
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	2201      	movs	r2, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004140:	2302      	movs	r3, #2
 8004142:	e06d      	b.n	8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2f      	ldr	r2, [pc, #188]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800417e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a20      	ldr	r2, [pc, #128]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d01d      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1a      	ldr	r2, [pc, #104]	@ (800423c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00e      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a16      	ldr	r2, [pc, #88]	@ (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10c      	bne.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004260:	2302      	movs	r3, #2
 8004262:	e065      	b.n	8004330 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	@ (800433c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d115      	bne.n	800431e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	051b      	lsls	r3, r3, #20
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010000 	.word	0x40010000
 8004340:	40010400 	.word	0x40010400

08004344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e040      	b.n	80043d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fda2 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	@ 0x24
 8004370:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb16 	bl	80049bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8af 	bl	80044f4 <UART_SetConfig>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e01b      	b.n	80043d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb95 	bl	8004b00 <UART_CheckIdleState>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d177      	bne.n	80044e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Transmit+0x24>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e070      	b.n	80044ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2221      	movs	r2, #33	@ 0x21
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004416:	f7fc ff2d 	bl	8001274 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004434:	d108      	bne.n	8004448 <HAL_UART_Transmit+0x68>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e003      	b.n	8004450 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004450:	e02f      	b.n	80044b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbf7 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e03b      	b.n	80044ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	3302      	adds	r3, #2
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e007      	b.n	80044a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3301      	adds	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1c9      	bne.n	8004452 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	@ 0x40
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fbc1 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e005      	b.n	80044ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4ba6      	ldr	r3, [pc, #664]	@ (80047b8 <UART_SetConfig+0x2c4>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	430b      	orrs	r3, r1
 800452a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a94      	ldr	r2, [pc, #592]	@ (80047bc <UART_SetConfig+0x2c8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d120      	bne.n	80045b2 <UART_SetConfig+0xbe>
 8004570:	4b93      	ldr	r3, [pc, #588]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d816      	bhi.n	80045ac <UART_SetConfig+0xb8>
 800457e:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0x90>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a1 	.word	0x080045a1
 800458c:	0800459b 	.word	0x0800459b
 8004590:	080045a7 	.word	0x080045a7
 8004594:	2301      	movs	r3, #1
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e150      	b.n	800483c <UART_SetConfig+0x348>
 800459a:	2302      	movs	r3, #2
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e14d      	b.n	800483c <UART_SetConfig+0x348>
 80045a0:	2304      	movs	r3, #4
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e14a      	b.n	800483c <UART_SetConfig+0x348>
 80045a6:	2308      	movs	r3, #8
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e147      	b.n	800483c <UART_SetConfig+0x348>
 80045ac:	2310      	movs	r3, #16
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e144      	b.n	800483c <UART_SetConfig+0x348>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a83      	ldr	r2, [pc, #524]	@ (80047c4 <UART_SetConfig+0x2d0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d132      	bne.n	8004622 <UART_SetConfig+0x12e>
 80045bc:	4b80      	ldr	r3, [pc, #512]	@ (80047c0 <UART_SetConfig+0x2cc>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d828      	bhi.n	800461c <UART_SetConfig+0x128>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <UART_SetConfig+0xdc>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004605 	.word	0x08004605
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	0800461d 	.word	0x0800461d
 80045dc:	0800461d 	.word	0x0800461d
 80045e0:	08004611 	.word	0x08004611
 80045e4:	0800461d 	.word	0x0800461d
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	0800461d 	.word	0x0800461d
 80045f0:	0800460b 	.word	0x0800460b
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	0800461d 	.word	0x0800461d
 8004600:	08004617 	.word	0x08004617
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e118      	b.n	800483c <UART_SetConfig+0x348>
 800460a:	2302      	movs	r3, #2
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e115      	b.n	800483c <UART_SetConfig+0x348>
 8004610:	2304      	movs	r3, #4
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e112      	b.n	800483c <UART_SetConfig+0x348>
 8004616:	2308      	movs	r3, #8
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e10f      	b.n	800483c <UART_SetConfig+0x348>
 800461c:	2310      	movs	r3, #16
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e10c      	b.n	800483c <UART_SetConfig+0x348>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a68      	ldr	r2, [pc, #416]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d120      	bne.n	800466e <UART_SetConfig+0x17a>
 800462c:	4b64      	ldr	r3, [pc, #400]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004636:	2b30      	cmp	r3, #48	@ 0x30
 8004638:	d013      	beq.n	8004662 <UART_SetConfig+0x16e>
 800463a:	2b30      	cmp	r3, #48	@ 0x30
 800463c:	d814      	bhi.n	8004668 <UART_SetConfig+0x174>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d009      	beq.n	8004656 <UART_SetConfig+0x162>
 8004642:	2b20      	cmp	r3, #32
 8004644:	d810      	bhi.n	8004668 <UART_SetConfig+0x174>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <UART_SetConfig+0x15c>
 800464a:	2b10      	cmp	r3, #16
 800464c:	d006      	beq.n	800465c <UART_SetConfig+0x168>
 800464e:	e00b      	b.n	8004668 <UART_SetConfig+0x174>
 8004650:	2300      	movs	r3, #0
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e0f2      	b.n	800483c <UART_SetConfig+0x348>
 8004656:	2302      	movs	r3, #2
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e0ef      	b.n	800483c <UART_SetConfig+0x348>
 800465c:	2304      	movs	r3, #4
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e0ec      	b.n	800483c <UART_SetConfig+0x348>
 8004662:	2308      	movs	r3, #8
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e0e9      	b.n	800483c <UART_SetConfig+0x348>
 8004668:	2310      	movs	r3, #16
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e0e6      	b.n	800483c <UART_SetConfig+0x348>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a56      	ldr	r2, [pc, #344]	@ (80047cc <UART_SetConfig+0x2d8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d120      	bne.n	80046ba <UART_SetConfig+0x1c6>
 8004678:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004682:	2bc0      	cmp	r3, #192	@ 0xc0
 8004684:	d013      	beq.n	80046ae <UART_SetConfig+0x1ba>
 8004686:	2bc0      	cmp	r3, #192	@ 0xc0
 8004688:	d814      	bhi.n	80046b4 <UART_SetConfig+0x1c0>
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d009      	beq.n	80046a2 <UART_SetConfig+0x1ae>
 800468e:	2b80      	cmp	r3, #128	@ 0x80
 8004690:	d810      	bhi.n	80046b4 <UART_SetConfig+0x1c0>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <UART_SetConfig+0x1a8>
 8004696:	2b40      	cmp	r3, #64	@ 0x40
 8004698:	d006      	beq.n	80046a8 <UART_SetConfig+0x1b4>
 800469a:	e00b      	b.n	80046b4 <UART_SetConfig+0x1c0>
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e0cc      	b.n	800483c <UART_SetConfig+0x348>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e0c9      	b.n	800483c <UART_SetConfig+0x348>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e0c6      	b.n	800483c <UART_SetConfig+0x348>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e0c3      	b.n	800483c <UART_SetConfig+0x348>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0c0      	b.n	800483c <UART_SetConfig+0x348>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a44      	ldr	r2, [pc, #272]	@ (80047d0 <UART_SetConfig+0x2dc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d125      	bne.n	8004710 <UART_SetConfig+0x21c>
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <UART_SetConfig+0x2cc>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d2:	d017      	beq.n	8004704 <UART_SetConfig+0x210>
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d817      	bhi.n	800470a <UART_SetConfig+0x216>
 80046da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046de:	d00b      	beq.n	80046f8 <UART_SetConfig+0x204>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d811      	bhi.n	800470a <UART_SetConfig+0x216>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <UART_SetConfig+0x1fe>
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ee:	d006      	beq.n	80046fe <UART_SetConfig+0x20a>
 80046f0:	e00b      	b.n	800470a <UART_SetConfig+0x216>
 80046f2:	2300      	movs	r3, #0
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e0a1      	b.n	800483c <UART_SetConfig+0x348>
 80046f8:	2302      	movs	r3, #2
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e09e      	b.n	800483c <UART_SetConfig+0x348>
 80046fe:	2304      	movs	r3, #4
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e09b      	b.n	800483c <UART_SetConfig+0x348>
 8004704:	2308      	movs	r3, #8
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e098      	b.n	800483c <UART_SetConfig+0x348>
 800470a:	2310      	movs	r3, #16
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e095      	b.n	800483c <UART_SetConfig+0x348>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2f      	ldr	r2, [pc, #188]	@ (80047d4 <UART_SetConfig+0x2e0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d125      	bne.n	8004766 <UART_SetConfig+0x272>
 800471a:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004728:	d017      	beq.n	800475a <UART_SetConfig+0x266>
 800472a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x26c>
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	d00b      	beq.n	800474e <UART_SetConfig+0x25a>
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x26c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x254>
 8004740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x260>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x26c>
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e076      	b.n	800483c <UART_SetConfig+0x348>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e073      	b.n	800483c <UART_SetConfig+0x348>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e070      	b.n	800483c <UART_SetConfig+0x348>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e06d      	b.n	800483c <UART_SetConfig+0x348>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e06a      	b.n	800483c <UART_SetConfig+0x348>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1b      	ldr	r2, [pc, #108]	@ (80047d8 <UART_SetConfig+0x2e4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d138      	bne.n	80047e2 <UART_SetConfig+0x2ee>
 8004770:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800477a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800477e:	d017      	beq.n	80047b0 <UART_SetConfig+0x2bc>
 8004780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004784:	d82a      	bhi.n	80047dc <UART_SetConfig+0x2e8>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478a:	d00b      	beq.n	80047a4 <UART_SetConfig+0x2b0>
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004790:	d824      	bhi.n	80047dc <UART_SetConfig+0x2e8>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <UART_SetConfig+0x2aa>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	d006      	beq.n	80047aa <UART_SetConfig+0x2b6>
 800479c:	e01e      	b.n	80047dc <UART_SetConfig+0x2e8>
 800479e:	2300      	movs	r3, #0
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e04b      	b.n	800483c <UART_SetConfig+0x348>
 80047a4:	2302      	movs	r3, #2
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e048      	b.n	800483c <UART_SetConfig+0x348>
 80047aa:	2304      	movs	r3, #4
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e045      	b.n	800483c <UART_SetConfig+0x348>
 80047b0:	2308      	movs	r3, #8
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e042      	b.n	800483c <UART_SetConfig+0x348>
 80047b6:	bf00      	nop
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40011000 	.word	0x40011000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40004400 	.word	0x40004400
 80047c8:	40004800 	.word	0x40004800
 80047cc:	40004c00 	.word	0x40004c00
 80047d0:	40005000 	.word	0x40005000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	40007800 	.word	0x40007800
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e02c      	b.n	800483c <UART_SetConfig+0x348>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a72      	ldr	r2, [pc, #456]	@ (80049b0 <UART_SetConfig+0x4bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d125      	bne.n	8004838 <UART_SetConfig+0x344>
 80047ec:	4b71      	ldr	r3, [pc, #452]	@ (80049b4 <UART_SetConfig+0x4c0>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80047f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047fa:	d017      	beq.n	800482c <UART_SetConfig+0x338>
 80047fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004800:	d817      	bhi.n	8004832 <UART_SetConfig+0x33e>
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004806:	d00b      	beq.n	8004820 <UART_SetConfig+0x32c>
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480c:	d811      	bhi.n	8004832 <UART_SetConfig+0x33e>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <UART_SetConfig+0x326>
 8004812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004816:	d006      	beq.n	8004826 <UART_SetConfig+0x332>
 8004818:	e00b      	b.n	8004832 <UART_SetConfig+0x33e>
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e00d      	b.n	800483c <UART_SetConfig+0x348>
 8004820:	2302      	movs	r3, #2
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e00a      	b.n	800483c <UART_SetConfig+0x348>
 8004826:	2304      	movs	r3, #4
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e007      	b.n	800483c <UART_SetConfig+0x348>
 800482c:	2308      	movs	r3, #8
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e004      	b.n	800483c <UART_SetConfig+0x348>
 8004832:	2310      	movs	r3, #16
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e001      	b.n	800483c <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	d15b      	bne.n	80048fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004846:	7ffb      	ldrb	r3, [r7, #31]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d828      	bhi.n	800489e <UART_SetConfig+0x3aa>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x360>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe f8b4 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e013      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe f8c4 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4b      	ldr	r3, [pc, #300]	@ (80049b8 <UART_SetConfig+0x4c4>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00c      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fd ff99 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8004892:	61b8      	str	r0, [r7, #24]
        break;
 8004894:	e008      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77bb      	strb	r3, [r7, #30]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d074      	beq.n	8004998 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005a      	lsls	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d916      	bls.n	80048f8 <UART_SetConfig+0x404>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d0:	d212      	bcs.n	80048f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f023 030f 	bic.w	r3, r3, #15
 80048da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	e04f      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77bb      	strb	r3, [r7, #30]
 80048fc:	e04c      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d828      	bhi.n	8004956 <UART_SetConfig+0x462>
 8004904:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0x418>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe f858 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe f868 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <UART_SetConfig+0x4c4>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fd ff3d 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085a      	lsrs	r2, r3, #1
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	441a      	add	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d909      	bls.n	8004994 <UART_SetConfig+0x4a0>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d205      	bcs.n	8004994 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40007c00 	.word	0x40007c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	00f42400 	.word	0x00f42400

080049bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aba:	d10a      	bne.n	8004ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b098      	sub	sp, #96	@ 0x60
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b10:	f7fc fbb0 	bl	8001274 <HAL_GetTick>
 8004b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d12e      	bne.n	8004b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f88c 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d021      	beq.n	8004b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e6      	bne.n	8004b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e062      	b.n	8004c48 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d149      	bne.n	8004c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f856 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03c      	beq.n	8004c24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bfc:	61fa      	str	r2, [r7, #28]
 8004bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	617b      	str	r3, [r7, #20]
   return(result);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e5      	bne.n	8004bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e011      	b.n	8004c48 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3758      	adds	r7, #88	@ 0x58
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c60:	e04f      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d04b      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fc fb03 	bl	8001274 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e04e      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d037      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d034      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d031      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d110      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f838 	bl	8004d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e029      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cdc:	d111      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f81e 	bl	8004d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d0a0      	beq.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b095      	sub	sp, #84	@ 0x54
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d118      	bne.n	8004dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	613b      	str	r3, [r7, #16]
   return(result);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	@ 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <__cvt>:
 8004df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df4:	ed2d 8b02 	vpush	{d8}
 8004df8:	eeb0 8b40 	vmov.f64	d8, d0
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	4617      	mov	r7, r2
 8004e00:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e04:	ee18 2a90 	vmov	r2, s17
 8004e08:	f025 0520 	bic.w	r5, r5, #32
 8004e0c:	2a00      	cmp	r2, #0
 8004e0e:	bfb6      	itet	lt
 8004e10:	222d      	movlt	r2, #45	@ 0x2d
 8004e12:	2200      	movge	r2, #0
 8004e14:	eeb1 8b40 	vneglt.f64	d8, d0
 8004e18:	2d46      	cmp	r5, #70	@ 0x46
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	d004      	beq.n	8004e2a <__cvt+0x38>
 8004e20:	2d45      	cmp	r5, #69	@ 0x45
 8004e22:	d100      	bne.n	8004e26 <__cvt+0x34>
 8004e24:	3401      	adds	r4, #1
 8004e26:	2102      	movs	r1, #2
 8004e28:	e000      	b.n	8004e2c <__cvt+0x3a>
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	ab02      	add	r3, sp, #8
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4622      	mov	r2, r4
 8004e36:	4633      	mov	r3, r6
 8004e38:	eeb0 0b48 	vmov.f64	d0, d8
 8004e3c:	f000 fe40 	bl	8005ac0 <_dtoa_r>
 8004e40:	2d47      	cmp	r5, #71	@ 0x47
 8004e42:	d114      	bne.n	8004e6e <__cvt+0x7c>
 8004e44:	07fb      	lsls	r3, r7, #31
 8004e46:	d50a      	bpl.n	8004e5e <__cvt+0x6c>
 8004e48:	1902      	adds	r2, r0, r4
 8004e4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	bf08      	it	eq
 8004e54:	9203      	streq	r2, [sp, #12]
 8004e56:	2130      	movs	r1, #48	@ 0x30
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d319      	bcc.n	8004e92 <__cvt+0xa0>
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e62:	1a1b      	subs	r3, r3, r0
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	b005      	add	sp, #20
 8004e68:	ecbd 8b02 	vpop	{d8}
 8004e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6e:	2d46      	cmp	r5, #70	@ 0x46
 8004e70:	eb00 0204 	add.w	r2, r0, r4
 8004e74:	d1e9      	bne.n	8004e4a <__cvt+0x58>
 8004e76:	7803      	ldrb	r3, [r0, #0]
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d107      	bne.n	8004e8c <__cvt+0x9a>
 8004e7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	bf1c      	itt	ne
 8004e86:	f1c4 0401 	rsbne	r4, r4, #1
 8004e8a:	6034      	strne	r4, [r6, #0]
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	441a      	add	r2, r3
 8004e90:	e7db      	b.n	8004e4a <__cvt+0x58>
 8004e92:	1c5c      	adds	r4, r3, #1
 8004e94:	9403      	str	r4, [sp, #12]
 8004e96:	7019      	strb	r1, [r3, #0]
 8004e98:	e7de      	b.n	8004e58 <__cvt+0x66>

08004e9a <__exponent>:
 8004e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	bfba      	itte	lt
 8004ea0:	4249      	neglt	r1, r1
 8004ea2:	232d      	movlt	r3, #45	@ 0x2d
 8004ea4:	232b      	movge	r3, #43	@ 0x2b
 8004ea6:	2909      	cmp	r1, #9
 8004ea8:	7002      	strb	r2, [r0, #0]
 8004eaa:	7043      	strb	r3, [r0, #1]
 8004eac:	dd29      	ble.n	8004f02 <__exponent+0x68>
 8004eae:	f10d 0307 	add.w	r3, sp, #7
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	270a      	movs	r7, #10
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ebc:	fb07 1416 	mls	r4, r7, r6, r1
 8004ec0:	3430      	adds	r4, #48	@ 0x30
 8004ec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	2c63      	cmp	r4, #99	@ 0x63
 8004eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ece:	4631      	mov	r1, r6
 8004ed0:	dcf1      	bgt.n	8004eb6 <__exponent+0x1c>
 8004ed2:	3130      	adds	r1, #48	@ 0x30
 8004ed4:	1e94      	subs	r4, r2, #2
 8004ed6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004eda:	1c41      	adds	r1, r0, #1
 8004edc:	4623      	mov	r3, r4
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	d30a      	bcc.n	8004ef8 <__exponent+0x5e>
 8004ee2:	f10d 0309 	add.w	r3, sp, #9
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	42ac      	cmp	r4, r5
 8004eea:	bf88      	it	hi
 8004eec:	2300      	movhi	r3, #0
 8004eee:	3302      	adds	r3, #2
 8004ef0:	4403      	add	r3, r0
 8004ef2:	1a18      	subs	r0, r3, r0
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004efc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f00:	e7ed      	b.n	8004ede <__exponent+0x44>
 8004f02:	2330      	movs	r3, #48	@ 0x30
 8004f04:	3130      	adds	r1, #48	@ 0x30
 8004f06:	7083      	strb	r3, [r0, #2]
 8004f08:	70c1      	strb	r1, [r0, #3]
 8004f0a:	1d03      	adds	r3, r0, #4
 8004f0c:	e7f1      	b.n	8004ef2 <__exponent+0x58>
	...

08004f10 <_printf_float>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	b08d      	sub	sp, #52	@ 0x34
 8004f16:	460c      	mov	r4, r1
 8004f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	461f      	mov	r7, r3
 8004f20:	4605      	mov	r5, r0
 8004f22:	f000 fccb 	bl	80058bc <_localeconv_r>
 8004f26:	f8d0 b000 	ldr.w	fp, [r0]
 8004f2a:	4658      	mov	r0, fp
 8004f2c:	f7fb f9d8 	bl	80002e0 <strlen>
 8004f30:	2300      	movs	r3, #0
 8004f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f34:	f8d8 3000 	ldr.w	r3, [r8]
 8004f38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f3c:	6822      	ldr	r2, [r4, #0]
 8004f3e:	9005      	str	r0, [sp, #20]
 8004f40:	3307      	adds	r3, #7
 8004f42:	f023 0307 	bic.w	r3, r3, #7
 8004f46:	f103 0108 	add.w	r1, r3, #8
 8004f4a:	f8c8 1000 	str.w	r1, [r8]
 8004f4e:	ed93 0b00 	vldr	d0, [r3]
 8004f52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80051b0 <_printf_float+0x2a0>
 8004f56:	eeb0 7bc0 	vabs.f64	d7, d0
 8004f5a:	eeb4 7b46 	vcmp.f64	d7, d6
 8004f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004f66:	dd24      	ble.n	8004fb2 <_printf_float+0xa2>
 8004f68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	d502      	bpl.n	8004f78 <_printf_float+0x68>
 8004f72:	232d      	movs	r3, #45	@ 0x2d
 8004f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f78:	498f      	ldr	r1, [pc, #572]	@ (80051b8 <_printf_float+0x2a8>)
 8004f7a:	4b90      	ldr	r3, [pc, #576]	@ (80051bc <_printf_float+0x2ac>)
 8004f7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004f80:	bf8c      	ite	hi
 8004f82:	4688      	movhi	r8, r1
 8004f84:	4698      	movls	r8, r3
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	6123      	str	r3, [r4, #16]
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	f04f 0a00 	mov.w	sl, #0
 8004f94:	9700      	str	r7, [sp, #0]
 8004f96:	4633      	mov	r3, r6
 8004f98:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f9d1 	bl	8005344 <_printf_common>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f040 8089 	bne.w	80050ba <_printf_float+0x1aa>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	b00d      	add	sp, #52	@ 0x34
 8004fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb2:	eeb4 0b40 	vcmp.f64	d0, d0
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	d709      	bvc.n	8004fd0 <_printf_float+0xc0>
 8004fbc:	ee10 3a90 	vmov	r3, s1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bfbc      	itt	lt
 8004fc4:	232d      	movlt	r3, #45	@ 0x2d
 8004fc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fca:	497d      	ldr	r1, [pc, #500]	@ (80051c0 <_printf_float+0x2b0>)
 8004fcc:	4b7d      	ldr	r3, [pc, #500]	@ (80051c4 <_printf_float+0x2b4>)
 8004fce:	e7d5      	b.n	8004f7c <_printf_float+0x6c>
 8004fd0:	6863      	ldr	r3, [r4, #4]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004fd8:	d139      	bne.n	800504e <_printf_float+0x13e>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	6063      	str	r3, [r4, #4]
 8004fde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6022      	str	r2, [r4, #0]
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004fee:	ab09      	add	r3, sp, #36	@ 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6861      	ldr	r1, [r4, #4]
 8004ff4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7ff fefa 	bl	8004df2 <__cvt>
 8004ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005002:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005004:	4680      	mov	r8, r0
 8005006:	d129      	bne.n	800505c <_printf_float+0x14c>
 8005008:	1cc8      	adds	r0, r1, #3
 800500a:	db02      	blt.n	8005012 <_printf_float+0x102>
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	4299      	cmp	r1, r3
 8005010:	dd41      	ble.n	8005096 <_printf_float+0x186>
 8005012:	f1a9 0902 	sub.w	r9, r9, #2
 8005016:	fa5f f989 	uxtb.w	r9, r9
 800501a:	3901      	subs	r1, #1
 800501c:	464a      	mov	r2, r9
 800501e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005022:	9109      	str	r1, [sp, #36]	@ 0x24
 8005024:	f7ff ff39 	bl	8004e9a <__exponent>
 8005028:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800502a:	1813      	adds	r3, r2, r0
 800502c:	2a01      	cmp	r2, #1
 800502e:	4682      	mov	sl, r0
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	dc02      	bgt.n	800503a <_printf_float+0x12a>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	07d2      	lsls	r2, r2, #31
 8005038:	d501      	bpl.n	800503e <_printf_float+0x12e>
 800503a:	3301      	adds	r3, #1
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0a6      	beq.n	8004f94 <_printf_float+0x84>
 8005046:	232d      	movs	r3, #45	@ 0x2d
 8005048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800504c:	e7a2      	b.n	8004f94 <_printf_float+0x84>
 800504e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005052:	d1c4      	bne.n	8004fde <_printf_float+0xce>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1c2      	bne.n	8004fde <_printf_float+0xce>
 8005058:	2301      	movs	r3, #1
 800505a:	e7bf      	b.n	8004fdc <_printf_float+0xcc>
 800505c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005060:	d9db      	bls.n	800501a <_printf_float+0x10a>
 8005062:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8005066:	d118      	bne.n	800509a <_printf_float+0x18a>
 8005068:	2900      	cmp	r1, #0
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	dd0b      	ble.n	8005086 <_printf_float+0x176>
 800506e:	6121      	str	r1, [r4, #16]
 8005070:	b913      	cbnz	r3, 8005078 <_printf_float+0x168>
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	07d0      	lsls	r0, r2, #31
 8005076:	d502      	bpl.n	800507e <_printf_float+0x16e>
 8005078:	3301      	adds	r3, #1
 800507a:	440b      	add	r3, r1
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005080:	f04f 0a00 	mov.w	sl, #0
 8005084:	e7db      	b.n	800503e <_printf_float+0x12e>
 8005086:	b913      	cbnz	r3, 800508e <_printf_float+0x17e>
 8005088:	6822      	ldr	r2, [r4, #0]
 800508a:	07d2      	lsls	r2, r2, #31
 800508c:	d501      	bpl.n	8005092 <_printf_float+0x182>
 800508e:	3302      	adds	r3, #2
 8005090:	e7f4      	b.n	800507c <_printf_float+0x16c>
 8005092:	2301      	movs	r3, #1
 8005094:	e7f2      	b.n	800507c <_printf_float+0x16c>
 8005096:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800509a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800509c:	4299      	cmp	r1, r3
 800509e:	db05      	blt.n	80050ac <_printf_float+0x19c>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	6121      	str	r1, [r4, #16]
 80050a4:	07d8      	lsls	r0, r3, #31
 80050a6:	d5ea      	bpl.n	800507e <_printf_float+0x16e>
 80050a8:	1c4b      	adds	r3, r1, #1
 80050aa:	e7e7      	b.n	800507c <_printf_float+0x16c>
 80050ac:	2900      	cmp	r1, #0
 80050ae:	bfd4      	ite	le
 80050b0:	f1c1 0202 	rsble	r2, r1, #2
 80050b4:	2201      	movgt	r2, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	e7e0      	b.n	800507c <_printf_float+0x16c>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	055a      	lsls	r2, r3, #21
 80050be:	d407      	bmi.n	80050d0 <_printf_float+0x1c0>
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	4642      	mov	r2, r8
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	d12a      	bne.n	8005124 <_printf_float+0x214>
 80050ce:	e76b      	b.n	8004fa8 <_printf_float+0x98>
 80050d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80050d4:	f240 80e0 	bls.w	8005298 <_printf_float+0x388>
 80050d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80050dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	d133      	bne.n	800514e <_printf_float+0x23e>
 80050e6:	4a38      	ldr	r2, [pc, #224]	@ (80051c8 <_printf_float+0x2b8>)
 80050e8:	2301      	movs	r3, #1
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f af59 	beq.w	8004fa8 <_printf_float+0x98>
 80050f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050fa:	4543      	cmp	r3, r8
 80050fc:	db02      	blt.n	8005104 <_printf_float+0x1f4>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	07d8      	lsls	r0, r3, #31
 8005102:	d50f      	bpl.n	8005124 <_printf_float+0x214>
 8005104:	9b05      	ldr	r3, [sp, #20]
 8005106:	465a      	mov	r2, fp
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f af4a 	beq.w	8004fa8 <_printf_float+0x98>
 8005114:	f04f 0900 	mov.w	r9, #0
 8005118:	f108 38ff 	add.w	r8, r8, #4294967295
 800511c:	f104 0a1a 	add.w	sl, r4, #26
 8005120:	45c8      	cmp	r8, r9
 8005122:	dc09      	bgt.n	8005138 <_printf_float+0x228>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	079b      	lsls	r3, r3, #30
 8005128:	f100 8107 	bmi.w	800533a <_printf_float+0x42a>
 800512c:	68e0      	ldr	r0, [r4, #12]
 800512e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005130:	4298      	cmp	r0, r3
 8005132:	bfb8      	it	lt
 8005134:	4618      	movlt	r0, r3
 8005136:	e739      	b.n	8004fac <_printf_float+0x9c>
 8005138:	2301      	movs	r3, #1
 800513a:	4652      	mov	r2, sl
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af30 	beq.w	8004fa8 <_printf_float+0x98>
 8005148:	f109 0901 	add.w	r9, r9, #1
 800514c:	e7e8      	b.n	8005120 <_printf_float+0x210>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	dc3b      	bgt.n	80051cc <_printf_float+0x2bc>
 8005154:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <_printf_float+0x2b8>)
 8005156:	2301      	movs	r3, #1
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f af22 	beq.w	8004fa8 <_printf_float+0x98>
 8005164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005168:	ea59 0303 	orrs.w	r3, r9, r3
 800516c:	d102      	bne.n	8005174 <_printf_float+0x264>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	07d9      	lsls	r1, r3, #31
 8005172:	d5d7      	bpl.n	8005124 <_printf_float+0x214>
 8005174:	9b05      	ldr	r3, [sp, #20]
 8005176:	465a      	mov	r2, fp
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f af12 	beq.w	8004fa8 <_printf_float+0x98>
 8005184:	f04f 0a00 	mov.w	sl, #0
 8005188:	f104 0b1a 	add.w	fp, r4, #26
 800518c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800518e:	425b      	negs	r3, r3
 8005190:	4553      	cmp	r3, sl
 8005192:	dc01      	bgt.n	8005198 <_printf_float+0x288>
 8005194:	464b      	mov	r3, r9
 8005196:	e794      	b.n	80050c2 <_printf_float+0x1b2>
 8005198:	2301      	movs	r3, #1
 800519a:	465a      	mov	r2, fp
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af00 	beq.w	8004fa8 <_printf_float+0x98>
 80051a8:	f10a 0a01 	add.w	sl, sl, #1
 80051ac:	e7ee      	b.n	800518c <_printf_float+0x27c>
 80051ae:	bf00      	nop
 80051b0:	ffffffff 	.word	0xffffffff
 80051b4:	7fefffff 	.word	0x7fefffff
 80051b8:	080079b8 	.word	0x080079b8
 80051bc:	080079b4 	.word	0x080079b4
 80051c0:	080079c0 	.word	0x080079c0
 80051c4:	080079bc 	.word	0x080079bc
 80051c8:	080079c4 	.word	0x080079c4
 80051cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051d2:	4553      	cmp	r3, sl
 80051d4:	bfa8      	it	ge
 80051d6:	4653      	movge	r3, sl
 80051d8:	2b00      	cmp	r3, #0
 80051da:	4699      	mov	r9, r3
 80051dc:	dc37      	bgt.n	800524e <_printf_float+0x33e>
 80051de:	2300      	movs	r3, #0
 80051e0:	9307      	str	r3, [sp, #28]
 80051e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051e6:	f104 021a 	add.w	r2, r4, #26
 80051ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ec:	9907      	ldr	r1, [sp, #28]
 80051ee:	9306      	str	r3, [sp, #24]
 80051f0:	eba3 0309 	sub.w	r3, r3, r9
 80051f4:	428b      	cmp	r3, r1
 80051f6:	dc31      	bgt.n	800525c <_printf_float+0x34c>
 80051f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051fa:	459a      	cmp	sl, r3
 80051fc:	dc3b      	bgt.n	8005276 <_printf_float+0x366>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	07da      	lsls	r2, r3, #31
 8005202:	d438      	bmi.n	8005276 <_printf_float+0x366>
 8005204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005206:	ebaa 0903 	sub.w	r9, sl, r3
 800520a:	9b06      	ldr	r3, [sp, #24]
 800520c:	ebaa 0303 	sub.w	r3, sl, r3
 8005210:	4599      	cmp	r9, r3
 8005212:	bfa8      	it	ge
 8005214:	4699      	movge	r9, r3
 8005216:	f1b9 0f00 	cmp.w	r9, #0
 800521a:	dc34      	bgt.n	8005286 <_printf_float+0x376>
 800521c:	f04f 0800 	mov.w	r8, #0
 8005220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005224:	f104 0b1a 	add.w	fp, r4, #26
 8005228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522a:	ebaa 0303 	sub.w	r3, sl, r3
 800522e:	eba3 0309 	sub.w	r3, r3, r9
 8005232:	4543      	cmp	r3, r8
 8005234:	f77f af76 	ble.w	8005124 <_printf_float+0x214>
 8005238:	2301      	movs	r3, #1
 800523a:	465a      	mov	r2, fp
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f aeb0 	beq.w	8004fa8 <_printf_float+0x98>
 8005248:	f108 0801 	add.w	r8, r8, #1
 800524c:	e7ec      	b.n	8005228 <_printf_float+0x318>
 800524e:	4642      	mov	r2, r8
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	d1c1      	bne.n	80051de <_printf_float+0x2ce>
 800525a:	e6a5      	b.n	8004fa8 <_printf_float+0x98>
 800525c:	2301      	movs	r3, #1
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	9206      	str	r2, [sp, #24]
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f ae9e 	beq.w	8004fa8 <_printf_float+0x98>
 800526c:	9b07      	ldr	r3, [sp, #28]
 800526e:	9a06      	ldr	r2, [sp, #24]
 8005270:	3301      	adds	r3, #1
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	e7b9      	b.n	80051ea <_printf_float+0x2da>
 8005276:	9b05      	ldr	r3, [sp, #20]
 8005278:	465a      	mov	r2, fp
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	d1bf      	bne.n	8005204 <_printf_float+0x2f4>
 8005284:	e690      	b.n	8004fa8 <_printf_float+0x98>
 8005286:	9a06      	ldr	r2, [sp, #24]
 8005288:	464b      	mov	r3, r9
 800528a:	4442      	add	r2, r8
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	d1c2      	bne.n	800521c <_printf_float+0x30c>
 8005296:	e687      	b.n	8004fa8 <_printf_float+0x98>
 8005298:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800529c:	f1b9 0f01 	cmp.w	r9, #1
 80052a0:	dc01      	bgt.n	80052a6 <_printf_float+0x396>
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d536      	bpl.n	8005314 <_printf_float+0x404>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4642      	mov	r2, r8
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae79 	beq.w	8004fa8 <_printf_float+0x98>
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	465a      	mov	r2, fp
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f ae71 	beq.w	8004fa8 <_printf_float+0x98>
 80052c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80052ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80052d6:	d018      	beq.n	800530a <_printf_float+0x3fa>
 80052d8:	464b      	mov	r3, r9
 80052da:	f108 0201 	add.w	r2, r8, #1
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	d10c      	bne.n	8005302 <_printf_float+0x3f2>
 80052e8:	e65e      	b.n	8004fa8 <_printf_float+0x98>
 80052ea:	2301      	movs	r3, #1
 80052ec:	465a      	mov	r2, fp
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f ae57 	beq.w	8004fa8 <_printf_float+0x98>
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	45c8      	cmp	r8, r9
 8005300:	dbf3      	blt.n	80052ea <_printf_float+0x3da>
 8005302:	4653      	mov	r3, sl
 8005304:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005308:	e6dc      	b.n	80050c4 <_printf_float+0x1b4>
 800530a:	f04f 0800 	mov.w	r8, #0
 800530e:	f104 0b1a 	add.w	fp, r4, #26
 8005312:	e7f4      	b.n	80052fe <_printf_float+0x3ee>
 8005314:	2301      	movs	r3, #1
 8005316:	4642      	mov	r2, r8
 8005318:	e7e1      	b.n	80052de <_printf_float+0x3ce>
 800531a:	2301      	movs	r3, #1
 800531c:	464a      	mov	r2, r9
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f ae3f 	beq.w	8004fa8 <_printf_float+0x98>
 800532a:	f108 0801 	add.w	r8, r8, #1
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	4543      	cmp	r3, r8
 8005336:	dcf0      	bgt.n	800531a <_printf_float+0x40a>
 8005338:	e6f8      	b.n	800512c <_printf_float+0x21c>
 800533a:	f04f 0800 	mov.w	r8, #0
 800533e:	f104 0919 	add.w	r9, r4, #25
 8005342:	e7f4      	b.n	800532e <_printf_float+0x41e>

08005344 <_printf_common>:
 8005344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	4616      	mov	r6, r2
 800534a:	4698      	mov	r8, r3
 800534c:	688a      	ldr	r2, [r1, #8]
 800534e:	690b      	ldr	r3, [r1, #16]
 8005350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005354:	4293      	cmp	r3, r2
 8005356:	bfb8      	it	lt
 8005358:	4613      	movlt	r3, r2
 800535a:	6033      	str	r3, [r6, #0]
 800535c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005360:	4607      	mov	r7, r0
 8005362:	460c      	mov	r4, r1
 8005364:	b10a      	cbz	r2, 800536a <_printf_common+0x26>
 8005366:	3301      	adds	r3, #1
 8005368:	6033      	str	r3, [r6, #0]
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	0699      	lsls	r1, r3, #26
 800536e:	bf42      	ittt	mi
 8005370:	6833      	ldrmi	r3, [r6, #0]
 8005372:	3302      	addmi	r3, #2
 8005374:	6033      	strmi	r3, [r6, #0]
 8005376:	6825      	ldr	r5, [r4, #0]
 8005378:	f015 0506 	ands.w	r5, r5, #6
 800537c:	d106      	bne.n	800538c <_printf_common+0x48>
 800537e:	f104 0a19 	add.w	sl, r4, #25
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	6832      	ldr	r2, [r6, #0]
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	42ab      	cmp	r3, r5
 800538a:	dc26      	bgt.n	80053da <_printf_common+0x96>
 800538c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	3b00      	subs	r3, #0
 8005394:	bf18      	it	ne
 8005396:	2301      	movne	r3, #1
 8005398:	0692      	lsls	r2, r2, #26
 800539a:	d42b      	bmi.n	80053f4 <_printf_common+0xb0>
 800539c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053a0:	4641      	mov	r1, r8
 80053a2:	4638      	mov	r0, r7
 80053a4:	47c8      	blx	r9
 80053a6:	3001      	adds	r0, #1
 80053a8:	d01e      	beq.n	80053e8 <_printf_common+0xa4>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	f003 0306 	and.w	r3, r3, #6
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	bf02      	ittt	eq
 80053b6:	68e5      	ldreq	r5, [r4, #12]
 80053b8:	6833      	ldreq	r3, [r6, #0]
 80053ba:	1aed      	subeq	r5, r5, r3
 80053bc:	68a3      	ldr	r3, [r4, #8]
 80053be:	bf0c      	ite	eq
 80053c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c4:	2500      	movne	r5, #0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	bfc4      	itt	gt
 80053ca:	1a9b      	subgt	r3, r3, r2
 80053cc:	18ed      	addgt	r5, r5, r3
 80053ce:	2600      	movs	r6, #0
 80053d0:	341a      	adds	r4, #26
 80053d2:	42b5      	cmp	r5, r6
 80053d4:	d11a      	bne.n	800540c <_printf_common+0xc8>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e008      	b.n	80053ec <_printf_common+0xa8>
 80053da:	2301      	movs	r3, #1
 80053dc:	4652      	mov	r2, sl
 80053de:	4641      	mov	r1, r8
 80053e0:	4638      	mov	r0, r7
 80053e2:	47c8      	blx	r9
 80053e4:	3001      	adds	r0, #1
 80053e6:	d103      	bne.n	80053f0 <_printf_common+0xac>
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f0:	3501      	adds	r5, #1
 80053f2:	e7c6      	b.n	8005382 <_printf_common+0x3e>
 80053f4:	18e1      	adds	r1, r4, r3
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	2030      	movs	r0, #48	@ 0x30
 80053fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053fe:	4422      	add	r2, r4
 8005400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005408:	3302      	adds	r3, #2
 800540a:	e7c7      	b.n	800539c <_printf_common+0x58>
 800540c:	2301      	movs	r3, #1
 800540e:	4622      	mov	r2, r4
 8005410:	4641      	mov	r1, r8
 8005412:	4638      	mov	r0, r7
 8005414:	47c8      	blx	r9
 8005416:	3001      	adds	r0, #1
 8005418:	d0e6      	beq.n	80053e8 <_printf_common+0xa4>
 800541a:	3601      	adds	r6, #1
 800541c:	e7d9      	b.n	80053d2 <_printf_common+0x8e>
	...

08005420 <_printf_i>:
 8005420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	7e0f      	ldrb	r7, [r1, #24]
 8005426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005428:	2f78      	cmp	r7, #120	@ 0x78
 800542a:	4691      	mov	r9, r2
 800542c:	4680      	mov	r8, r0
 800542e:	460c      	mov	r4, r1
 8005430:	469a      	mov	sl, r3
 8005432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005436:	d807      	bhi.n	8005448 <_printf_i+0x28>
 8005438:	2f62      	cmp	r7, #98	@ 0x62
 800543a:	d80a      	bhi.n	8005452 <_printf_i+0x32>
 800543c:	2f00      	cmp	r7, #0
 800543e:	f000 80d1 	beq.w	80055e4 <_printf_i+0x1c4>
 8005442:	2f58      	cmp	r7, #88	@ 0x58
 8005444:	f000 80b8 	beq.w	80055b8 <_printf_i+0x198>
 8005448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800544c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005450:	e03a      	b.n	80054c8 <_printf_i+0xa8>
 8005452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005456:	2b15      	cmp	r3, #21
 8005458:	d8f6      	bhi.n	8005448 <_printf_i+0x28>
 800545a:	a101      	add	r1, pc, #4	@ (adr r1, 8005460 <_printf_i+0x40>)
 800545c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054cd 	.word	0x080054cd
 8005468:	08005449 	.word	0x08005449
 800546c:	08005449 	.word	0x08005449
 8005470:	08005449 	.word	0x08005449
 8005474:	08005449 	.word	0x08005449
 8005478:	080054cd 	.word	0x080054cd
 800547c:	08005449 	.word	0x08005449
 8005480:	08005449 	.word	0x08005449
 8005484:	08005449 	.word	0x08005449
 8005488:	08005449 	.word	0x08005449
 800548c:	080055cb 	.word	0x080055cb
 8005490:	080054f7 	.word	0x080054f7
 8005494:	08005585 	.word	0x08005585
 8005498:	08005449 	.word	0x08005449
 800549c:	08005449 	.word	0x08005449
 80054a0:	080055ed 	.word	0x080055ed
 80054a4:	08005449 	.word	0x08005449
 80054a8:	080054f7 	.word	0x080054f7
 80054ac:	08005449 	.word	0x08005449
 80054b0:	08005449 	.word	0x08005449
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054c8:	2301      	movs	r3, #1
 80054ca:	e09c      	b.n	8005606 <_printf_i+0x1e6>
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	1d19      	adds	r1, r3, #4
 80054d2:	6031      	str	r1, [r6, #0]
 80054d4:	0606      	lsls	r6, r0, #24
 80054d6:	d501      	bpl.n	80054dc <_printf_i+0xbc>
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	e003      	b.n	80054e4 <_printf_i+0xc4>
 80054dc:	0645      	lsls	r5, r0, #25
 80054de:	d5fb      	bpl.n	80054d8 <_printf_i+0xb8>
 80054e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	da03      	bge.n	80054f0 <_printf_i+0xd0>
 80054e8:	232d      	movs	r3, #45	@ 0x2d
 80054ea:	426d      	negs	r5, r5
 80054ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f0:	4858      	ldr	r0, [pc, #352]	@ (8005654 <_printf_i+0x234>)
 80054f2:	230a      	movs	r3, #10
 80054f4:	e011      	b.n	800551a <_printf_i+0xfa>
 80054f6:	6821      	ldr	r1, [r4, #0]
 80054f8:	6833      	ldr	r3, [r6, #0]
 80054fa:	0608      	lsls	r0, r1, #24
 80054fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005500:	d402      	bmi.n	8005508 <_printf_i+0xe8>
 8005502:	0649      	lsls	r1, r1, #25
 8005504:	bf48      	it	mi
 8005506:	b2ad      	uxthmi	r5, r5
 8005508:	2f6f      	cmp	r7, #111	@ 0x6f
 800550a:	4852      	ldr	r0, [pc, #328]	@ (8005654 <_printf_i+0x234>)
 800550c:	6033      	str	r3, [r6, #0]
 800550e:	bf14      	ite	ne
 8005510:	230a      	movne	r3, #10
 8005512:	2308      	moveq	r3, #8
 8005514:	2100      	movs	r1, #0
 8005516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800551a:	6866      	ldr	r6, [r4, #4]
 800551c:	60a6      	str	r6, [r4, #8]
 800551e:	2e00      	cmp	r6, #0
 8005520:	db05      	blt.n	800552e <_printf_i+0x10e>
 8005522:	6821      	ldr	r1, [r4, #0]
 8005524:	432e      	orrs	r6, r5
 8005526:	f021 0104 	bic.w	r1, r1, #4
 800552a:	6021      	str	r1, [r4, #0]
 800552c:	d04b      	beq.n	80055c6 <_printf_i+0x1a6>
 800552e:	4616      	mov	r6, r2
 8005530:	fbb5 f1f3 	udiv	r1, r5, r3
 8005534:	fb03 5711 	mls	r7, r3, r1, r5
 8005538:	5dc7      	ldrb	r7, [r0, r7]
 800553a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800553e:	462f      	mov	r7, r5
 8005540:	42bb      	cmp	r3, r7
 8005542:	460d      	mov	r5, r1
 8005544:	d9f4      	bls.n	8005530 <_printf_i+0x110>
 8005546:	2b08      	cmp	r3, #8
 8005548:	d10b      	bne.n	8005562 <_printf_i+0x142>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	07df      	lsls	r7, r3, #31
 800554e:	d508      	bpl.n	8005562 <_printf_i+0x142>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	6861      	ldr	r1, [r4, #4]
 8005554:	4299      	cmp	r1, r3
 8005556:	bfde      	ittt	le
 8005558:	2330      	movle	r3, #48	@ 0x30
 800555a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800555e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005562:	1b92      	subs	r2, r2, r6
 8005564:	6122      	str	r2, [r4, #16]
 8005566:	f8cd a000 	str.w	sl, [sp]
 800556a:	464b      	mov	r3, r9
 800556c:	aa03      	add	r2, sp, #12
 800556e:	4621      	mov	r1, r4
 8005570:	4640      	mov	r0, r8
 8005572:	f7ff fee7 	bl	8005344 <_printf_common>
 8005576:	3001      	adds	r0, #1
 8005578:	d14a      	bne.n	8005610 <_printf_i+0x1f0>
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	b004      	add	sp, #16
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f043 0320 	orr.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	4832      	ldr	r0, [pc, #200]	@ (8005658 <_printf_i+0x238>)
 800558e:	2778      	movs	r7, #120	@ 0x78
 8005590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	061f      	lsls	r7, r3, #24
 800559a:	f851 5b04 	ldr.w	r5, [r1], #4
 800559e:	d402      	bmi.n	80055a6 <_printf_i+0x186>
 80055a0:	065f      	lsls	r7, r3, #25
 80055a2:	bf48      	it	mi
 80055a4:	b2ad      	uxthmi	r5, r5
 80055a6:	6031      	str	r1, [r6, #0]
 80055a8:	07d9      	lsls	r1, r3, #31
 80055aa:	bf44      	itt	mi
 80055ac:	f043 0320 	orrmi.w	r3, r3, #32
 80055b0:	6023      	strmi	r3, [r4, #0]
 80055b2:	b11d      	cbz	r5, 80055bc <_printf_i+0x19c>
 80055b4:	2310      	movs	r3, #16
 80055b6:	e7ad      	b.n	8005514 <_printf_i+0xf4>
 80055b8:	4826      	ldr	r0, [pc, #152]	@ (8005654 <_printf_i+0x234>)
 80055ba:	e7e9      	b.n	8005590 <_printf_i+0x170>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	f023 0320 	bic.w	r3, r3, #32
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	e7f6      	b.n	80055b4 <_printf_i+0x194>
 80055c6:	4616      	mov	r6, r2
 80055c8:	e7bd      	b.n	8005546 <_printf_i+0x126>
 80055ca:	6833      	ldr	r3, [r6, #0]
 80055cc:	6825      	ldr	r5, [r4, #0]
 80055ce:	6961      	ldr	r1, [r4, #20]
 80055d0:	1d18      	adds	r0, r3, #4
 80055d2:	6030      	str	r0, [r6, #0]
 80055d4:	062e      	lsls	r6, r5, #24
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	d501      	bpl.n	80055de <_printf_i+0x1be>
 80055da:	6019      	str	r1, [r3, #0]
 80055dc:	e002      	b.n	80055e4 <_printf_i+0x1c4>
 80055de:	0668      	lsls	r0, r5, #25
 80055e0:	d5fb      	bpl.n	80055da <_printf_i+0x1ba>
 80055e2:	8019      	strh	r1, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	6123      	str	r3, [r4, #16]
 80055e8:	4616      	mov	r6, r2
 80055ea:	e7bc      	b.n	8005566 <_printf_i+0x146>
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	6032      	str	r2, [r6, #0]
 80055f2:	681e      	ldr	r6, [r3, #0]
 80055f4:	6862      	ldr	r2, [r4, #4]
 80055f6:	2100      	movs	r1, #0
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7fa fe21 	bl	8000240 <memchr>
 80055fe:	b108      	cbz	r0, 8005604 <_printf_i+0x1e4>
 8005600:	1b80      	subs	r0, r0, r6
 8005602:	6060      	str	r0, [r4, #4]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	2300      	movs	r3, #0
 800560a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800560e:	e7aa      	b.n	8005566 <_printf_i+0x146>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	4632      	mov	r2, r6
 8005614:	4649      	mov	r1, r9
 8005616:	4640      	mov	r0, r8
 8005618:	47d0      	blx	sl
 800561a:	3001      	adds	r0, #1
 800561c:	d0ad      	beq.n	800557a <_printf_i+0x15a>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	079b      	lsls	r3, r3, #30
 8005622:	d413      	bmi.n	800564c <_printf_i+0x22c>
 8005624:	68e0      	ldr	r0, [r4, #12]
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	4298      	cmp	r0, r3
 800562a:	bfb8      	it	lt
 800562c:	4618      	movlt	r0, r3
 800562e:	e7a6      	b.n	800557e <_printf_i+0x15e>
 8005630:	2301      	movs	r3, #1
 8005632:	4632      	mov	r2, r6
 8005634:	4649      	mov	r1, r9
 8005636:	4640      	mov	r0, r8
 8005638:	47d0      	blx	sl
 800563a:	3001      	adds	r0, #1
 800563c:	d09d      	beq.n	800557a <_printf_i+0x15a>
 800563e:	3501      	adds	r5, #1
 8005640:	68e3      	ldr	r3, [r4, #12]
 8005642:	9903      	ldr	r1, [sp, #12]
 8005644:	1a5b      	subs	r3, r3, r1
 8005646:	42ab      	cmp	r3, r5
 8005648:	dcf2      	bgt.n	8005630 <_printf_i+0x210>
 800564a:	e7eb      	b.n	8005624 <_printf_i+0x204>
 800564c:	2500      	movs	r5, #0
 800564e:	f104 0619 	add.w	r6, r4, #25
 8005652:	e7f5      	b.n	8005640 <_printf_i+0x220>
 8005654:	080079c6 	.word	0x080079c6
 8005658:	080079d7 	.word	0x080079d7

0800565c <std>:
 800565c:	2300      	movs	r3, #0
 800565e:	b510      	push	{r4, lr}
 8005660:	4604      	mov	r4, r0
 8005662:	e9c0 3300 	strd	r3, r3, [r0]
 8005666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566a:	6083      	str	r3, [r0, #8]
 800566c:	8181      	strh	r1, [r0, #12]
 800566e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005670:	81c2      	strh	r2, [r0, #14]
 8005672:	6183      	str	r3, [r0, #24]
 8005674:	4619      	mov	r1, r3
 8005676:	2208      	movs	r2, #8
 8005678:	305c      	adds	r0, #92	@ 0x5c
 800567a:	f000 f916 	bl	80058aa <memset>
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x58>)
 8005680:	6263      	str	r3, [r4, #36]	@ 0x24
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x5c>)
 8005684:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x60>)
 8005688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x64>)
 800568c:	6323      	str	r3, [r4, #48]	@ 0x30
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <std+0x68>)
 8005690:	6224      	str	r4, [r4, #32]
 8005692:	429c      	cmp	r4, r3
 8005694:	d006      	beq.n	80056a4 <std+0x48>
 8005696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800569a:	4294      	cmp	r4, r2
 800569c:	d002      	beq.n	80056a4 <std+0x48>
 800569e:	33d0      	adds	r3, #208	@ 0xd0
 80056a0:	429c      	cmp	r4, r3
 80056a2:	d105      	bne.n	80056b0 <std+0x54>
 80056a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	f000 b97a 	b.w	80059a4 <__retarget_lock_init_recursive>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	08005825 	.word	0x08005825
 80056b8:	08005847 	.word	0x08005847
 80056bc:	0800587f 	.word	0x0800587f
 80056c0:	080058a3 	.word	0x080058a3
 80056c4:	20000354 	.word	0x20000354

080056c8 <stdio_exit_handler>:
 80056c8:	4a02      	ldr	r2, [pc, #8]	@ (80056d4 <stdio_exit_handler+0xc>)
 80056ca:	4903      	ldr	r1, [pc, #12]	@ (80056d8 <stdio_exit_handler+0x10>)
 80056cc:	4803      	ldr	r0, [pc, #12]	@ (80056dc <stdio_exit_handler+0x14>)
 80056ce:	f000 b869 	b.w	80057a4 <_fwalk_sglue>
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	08007229 	.word	0x08007229
 80056dc:	2000001c 	.word	0x2000001c

080056e0 <cleanup_stdio>:
 80056e0:	6841      	ldr	r1, [r0, #4]
 80056e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <cleanup_stdio+0x34>)
 80056e4:	4299      	cmp	r1, r3
 80056e6:	b510      	push	{r4, lr}
 80056e8:	4604      	mov	r4, r0
 80056ea:	d001      	beq.n	80056f0 <cleanup_stdio+0x10>
 80056ec:	f001 fd9c 	bl	8007228 <_fflush_r>
 80056f0:	68a1      	ldr	r1, [r4, #8]
 80056f2:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <cleanup_stdio+0x38>)
 80056f4:	4299      	cmp	r1, r3
 80056f6:	d002      	beq.n	80056fe <cleanup_stdio+0x1e>
 80056f8:	4620      	mov	r0, r4
 80056fa:	f001 fd95 	bl	8007228 <_fflush_r>
 80056fe:	68e1      	ldr	r1, [r4, #12]
 8005700:	4b06      	ldr	r3, [pc, #24]	@ (800571c <cleanup_stdio+0x3c>)
 8005702:	4299      	cmp	r1, r3
 8005704:	d004      	beq.n	8005710 <cleanup_stdio+0x30>
 8005706:	4620      	mov	r0, r4
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	f001 bd8c 	b.w	8007228 <_fflush_r>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	20000354 	.word	0x20000354
 8005718:	200003bc 	.word	0x200003bc
 800571c:	20000424 	.word	0x20000424

08005720 <global_stdio_init.part.0>:
 8005720:	b510      	push	{r4, lr}
 8005722:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <global_stdio_init.part.0+0x30>)
 8005724:	4c0b      	ldr	r4, [pc, #44]	@ (8005754 <global_stdio_init.part.0+0x34>)
 8005726:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <global_stdio_init.part.0+0x38>)
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	4620      	mov	r0, r4
 800572c:	2200      	movs	r2, #0
 800572e:	2104      	movs	r1, #4
 8005730:	f7ff ff94 	bl	800565c <std>
 8005734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005738:	2201      	movs	r2, #1
 800573a:	2109      	movs	r1, #9
 800573c:	f7ff ff8e 	bl	800565c <std>
 8005740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005744:	2202      	movs	r2, #2
 8005746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574a:	2112      	movs	r1, #18
 800574c:	f7ff bf86 	b.w	800565c <std>
 8005750:	2000048c 	.word	0x2000048c
 8005754:	20000354 	.word	0x20000354
 8005758:	080056c9 	.word	0x080056c9

0800575c <__sfp_lock_acquire>:
 800575c:	4801      	ldr	r0, [pc, #4]	@ (8005764 <__sfp_lock_acquire+0x8>)
 800575e:	f000 b922 	b.w	80059a6 <__retarget_lock_acquire_recursive>
 8005762:	bf00      	nop
 8005764:	20000495 	.word	0x20000495

08005768 <__sfp_lock_release>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__sfp_lock_release+0x8>)
 800576a:	f000 b91d 	b.w	80059a8 <__retarget_lock_release_recursive>
 800576e:	bf00      	nop
 8005770:	20000495 	.word	0x20000495

08005774 <__sinit>:
 8005774:	b510      	push	{r4, lr}
 8005776:	4604      	mov	r4, r0
 8005778:	f7ff fff0 	bl	800575c <__sfp_lock_acquire>
 800577c:	6a23      	ldr	r3, [r4, #32]
 800577e:	b11b      	cbz	r3, 8005788 <__sinit+0x14>
 8005780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005784:	f7ff bff0 	b.w	8005768 <__sfp_lock_release>
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <__sinit+0x28>)
 800578a:	6223      	str	r3, [r4, #32]
 800578c:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <__sinit+0x2c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f5      	bne.n	8005780 <__sinit+0xc>
 8005794:	f7ff ffc4 	bl	8005720 <global_stdio_init.part.0>
 8005798:	e7f2      	b.n	8005780 <__sinit+0xc>
 800579a:	bf00      	nop
 800579c:	080056e1 	.word	0x080056e1
 80057a0:	2000048c 	.word	0x2000048c

080057a4 <_fwalk_sglue>:
 80057a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4607      	mov	r7, r0
 80057aa:	4688      	mov	r8, r1
 80057ac:	4614      	mov	r4, r2
 80057ae:	2600      	movs	r6, #0
 80057b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b4:	f1b9 0901 	subs.w	r9, r9, #1
 80057b8:	d505      	bpl.n	80057c6 <_fwalk_sglue+0x22>
 80057ba:	6824      	ldr	r4, [r4, #0]
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d1f7      	bne.n	80057b0 <_fwalk_sglue+0xc>
 80057c0:	4630      	mov	r0, r6
 80057c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d907      	bls.n	80057dc <_fwalk_sglue+0x38>
 80057cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057d0:	3301      	adds	r3, #1
 80057d2:	d003      	beq.n	80057dc <_fwalk_sglue+0x38>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c0      	blx	r8
 80057da:	4306      	orrs	r6, r0
 80057dc:	3568      	adds	r5, #104	@ 0x68
 80057de:	e7e9      	b.n	80057b4 <_fwalk_sglue+0x10>

080057e0 <siprintf>:
 80057e0:	b40e      	push	{r1, r2, r3}
 80057e2:	b510      	push	{r4, lr}
 80057e4:	b09d      	sub	sp, #116	@ 0x74
 80057e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80057e8:	9002      	str	r0, [sp, #8]
 80057ea:	9006      	str	r0, [sp, #24]
 80057ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057f0:	480a      	ldr	r0, [pc, #40]	@ (800581c <siprintf+0x3c>)
 80057f2:	9107      	str	r1, [sp, #28]
 80057f4:	9104      	str	r1, [sp, #16]
 80057f6:	490a      	ldr	r1, [pc, #40]	@ (8005820 <siprintf+0x40>)
 80057f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fc:	9105      	str	r1, [sp, #20]
 80057fe:	2400      	movs	r4, #0
 8005800:	a902      	add	r1, sp, #8
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005808:	f001 fb8e 	bl	8006f28 <_svfiprintf_r>
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	701c      	strb	r4, [r3, #0]
 8005810:	b01d      	add	sp, #116	@ 0x74
 8005812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005816:	b003      	add	sp, #12
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000018 	.word	0x20000018
 8005820:	ffff0208 	.word	0xffff0208

08005824 <__sread>:
 8005824:	b510      	push	{r4, lr}
 8005826:	460c      	mov	r4, r1
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	f000 f86c 	bl	8005908 <_read_r>
 8005830:	2800      	cmp	r0, #0
 8005832:	bfab      	itete	ge
 8005834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005836:	89a3      	ldrhlt	r3, [r4, #12]
 8005838:	181b      	addge	r3, r3, r0
 800583a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800583e:	bfac      	ite	ge
 8005840:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005842:	81a3      	strhlt	r3, [r4, #12]
 8005844:	bd10      	pop	{r4, pc}

08005846 <__swrite>:
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	461f      	mov	r7, r3
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	05db      	lsls	r3, r3, #23
 8005850:	4605      	mov	r5, r0
 8005852:	460c      	mov	r4, r1
 8005854:	4616      	mov	r6, r2
 8005856:	d505      	bpl.n	8005864 <__swrite+0x1e>
 8005858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f000 f840 	bl	80058e4 <_lseek_r>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	4632      	mov	r2, r6
 8005872:	463b      	mov	r3, r7
 8005874:	4628      	mov	r0, r5
 8005876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	f000 b857 	b.w	800592c <_write_r>

0800587e <__sseek>:
 800587e:	b510      	push	{r4, lr}
 8005880:	460c      	mov	r4, r1
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 f82d 	bl	80058e4 <_lseek_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	bf15      	itete	ne
 8005890:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800589a:	81a3      	strheq	r3, [r4, #12]
 800589c:	bf18      	it	ne
 800589e:	81a3      	strhne	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__sclose>:
 80058a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a6:	f000 b80d 	b.w	80058c4 <_close_r>

080058aa <memset>:
 80058aa:	4402      	add	r2, r0
 80058ac:	4603      	mov	r3, r0
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d100      	bne.n	80058b4 <memset+0xa>
 80058b2:	4770      	bx	lr
 80058b4:	f803 1b01 	strb.w	r1, [r3], #1
 80058b8:	e7f9      	b.n	80058ae <memset+0x4>
	...

080058bc <_localeconv_r>:
 80058bc:	4800      	ldr	r0, [pc, #0]	@ (80058c0 <_localeconv_r+0x4>)
 80058be:	4770      	bx	lr
 80058c0:	20000158 	.word	0x20000158

080058c4 <_close_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	@ (80058e0 <_close_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fb fbd9 	bl	8001086 <_close>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_close_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_close_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000490 	.word	0x20000490

080058e4 <_lseek_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	@ (8005904 <_lseek_r+0x20>)
 80058e8:	4604      	mov	r4, r0
 80058ea:	4608      	mov	r0, r1
 80058ec:	4611      	mov	r1, r2
 80058ee:	2200      	movs	r2, #0
 80058f0:	602a      	str	r2, [r5, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7fb fbee 	bl	80010d4 <_lseek>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_lseek_r+0x1e>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_lseek_r+0x1e>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000490 	.word	0x20000490

08005908 <_read_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d07      	ldr	r5, [pc, #28]	@ (8005928 <_read_r+0x20>)
 800590c:	4604      	mov	r4, r0
 800590e:	4608      	mov	r0, r1
 8005910:	4611      	mov	r1, r2
 8005912:	2200      	movs	r2, #0
 8005914:	602a      	str	r2, [r5, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f7fb fb7c 	bl	8001014 <_read>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_read_r+0x1e>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_read_r+0x1e>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000490 	.word	0x20000490

0800592c <_write_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	@ (800594c <_write_r+0x20>)
 8005930:	4604      	mov	r4, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fb fb87 	bl	800104e <_write>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_write_r+0x1e>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_write_r+0x1e>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000490 	.word	0x20000490

08005950 <__errno>:
 8005950:	4b01      	ldr	r3, [pc, #4]	@ (8005958 <__errno+0x8>)
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000018 	.word	0x20000018

0800595c <__libc_init_array>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4d0d      	ldr	r5, [pc, #52]	@ (8005994 <__libc_init_array+0x38>)
 8005960:	4c0d      	ldr	r4, [pc, #52]	@ (8005998 <__libc_init_array+0x3c>)
 8005962:	1b64      	subs	r4, r4, r5
 8005964:	10a4      	asrs	r4, r4, #2
 8005966:	2600      	movs	r6, #0
 8005968:	42a6      	cmp	r6, r4
 800596a:	d109      	bne.n	8005980 <__libc_init_array+0x24>
 800596c:	4d0b      	ldr	r5, [pc, #44]	@ (800599c <__libc_init_array+0x40>)
 800596e:	4c0c      	ldr	r4, [pc, #48]	@ (80059a0 <__libc_init_array+0x44>)
 8005970:	f001 fff8 	bl	8007964 <_init>
 8005974:	1b64      	subs	r4, r4, r5
 8005976:	10a4      	asrs	r4, r4, #2
 8005978:	2600      	movs	r6, #0
 800597a:	42a6      	cmp	r6, r4
 800597c:	d105      	bne.n	800598a <__libc_init_array+0x2e>
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	f855 3b04 	ldr.w	r3, [r5], #4
 8005984:	4798      	blx	r3
 8005986:	3601      	adds	r6, #1
 8005988:	e7ee      	b.n	8005968 <__libc_init_array+0xc>
 800598a:	f855 3b04 	ldr.w	r3, [r5], #4
 800598e:	4798      	blx	r3
 8005990:	3601      	adds	r6, #1
 8005992:	e7f2      	b.n	800597a <__libc_init_array+0x1e>
 8005994:	08007d34 	.word	0x08007d34
 8005998:	08007d34 	.word	0x08007d34
 800599c:	08007d34 	.word	0x08007d34
 80059a0:	08007d38 	.word	0x08007d38

080059a4 <__retarget_lock_init_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <__retarget_lock_acquire_recursive>:
 80059a6:	4770      	bx	lr

080059a8 <__retarget_lock_release_recursive>:
 80059a8:	4770      	bx	lr

080059aa <quorem>:
 80059aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ae:	6903      	ldr	r3, [r0, #16]
 80059b0:	690c      	ldr	r4, [r1, #16]
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	4607      	mov	r7, r0
 80059b6:	db7e      	blt.n	8005ab6 <quorem+0x10c>
 80059b8:	3c01      	subs	r4, #1
 80059ba:	f101 0814 	add.w	r8, r1, #20
 80059be:	00a3      	lsls	r3, r4, #2
 80059c0:	f100 0514 	add.w	r5, r0, #20
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d4:	3301      	adds	r3, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80059e0:	d32e      	bcc.n	8005a40 <quorem+0x96>
 80059e2:	f04f 0a00 	mov.w	sl, #0
 80059e6:	46c4      	mov	ip, r8
 80059e8:	46ae      	mov	lr, r5
 80059ea:	46d3      	mov	fp, sl
 80059ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059f0:	b298      	uxth	r0, r3
 80059f2:	fb06 a000 	mla	r0, r6, r0, sl
 80059f6:	0c02      	lsrs	r2, r0, #16
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	fb06 2303 	mla	r3, r6, r3, r2
 80059fe:	f8de 2000 	ldr.w	r2, [lr]
 8005a02:	b280      	uxth	r0, r0
 8005a04:	b292      	uxth	r2, r2
 8005a06:	1a12      	subs	r2, r2, r0
 8005a08:	445a      	add	r2, fp
 8005a0a:	f8de 0000 	ldr.w	r0, [lr]
 8005a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a22:	45e1      	cmp	r9, ip
 8005a24:	f84e 2b04 	str.w	r2, [lr], #4
 8005a28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a2c:	d2de      	bcs.n	80059ec <quorem+0x42>
 8005a2e:	9b00      	ldr	r3, [sp, #0]
 8005a30:	58eb      	ldr	r3, [r5, r3]
 8005a32:	b92b      	cbnz	r3, 8005a40 <quorem+0x96>
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	429d      	cmp	r5, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	d32f      	bcc.n	8005a9e <quorem+0xf4>
 8005a3e:	613c      	str	r4, [r7, #16]
 8005a40:	4638      	mov	r0, r7
 8005a42:	f001 f90d 	bl	8006c60 <__mcmp>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	db25      	blt.n	8005a96 <quorem+0xec>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a52:	f8d1 c000 	ldr.w	ip, [r1]
 8005a56:	fa1f fe82 	uxth.w	lr, r2
 8005a5a:	fa1f f38c 	uxth.w	r3, ip
 8005a5e:	eba3 030e 	sub.w	r3, r3, lr
 8005a62:	4403      	add	r3, r0
 8005a64:	0c12      	lsrs	r2, r2, #16
 8005a66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a74:	45c1      	cmp	r9, r8
 8005a76:	f841 3b04 	str.w	r3, [r1], #4
 8005a7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a7e:	d2e6      	bcs.n	8005a4e <quorem+0xa4>
 8005a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a88:	b922      	cbnz	r2, 8005a94 <quorem+0xea>
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	429d      	cmp	r5, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	d30b      	bcc.n	8005aaa <quorem+0x100>
 8005a92:	613c      	str	r4, [r7, #16]
 8005a94:	3601      	adds	r6, #1
 8005a96:	4630      	mov	r0, r6
 8005a98:	b003      	add	sp, #12
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	3b04      	subs	r3, #4
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	d1cb      	bne.n	8005a3e <quorem+0x94>
 8005aa6:	3c01      	subs	r4, #1
 8005aa8:	e7c6      	b.n	8005a38 <quorem+0x8e>
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	d1ef      	bne.n	8005a92 <quorem+0xe8>
 8005ab2:	3c01      	subs	r4, #1
 8005ab4:	e7ea      	b.n	8005a8c <quorem+0xe2>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e7ee      	b.n	8005a98 <quorem+0xee>
 8005aba:	0000      	movs	r0, r0
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <_dtoa_r>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	ed2d 8b02 	vpush	{d8}
 8005ac8:	69c7      	ldr	r7, [r0, #28]
 8005aca:	b091      	sub	sp, #68	@ 0x44
 8005acc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ad0:	ec55 4b10 	vmov	r4, r5, d0
 8005ad4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005ad6:	9107      	str	r1, [sp, #28]
 8005ad8:	4681      	mov	r9, r0
 8005ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8005adc:	930d      	str	r3, [sp, #52]	@ 0x34
 8005ade:	b97f      	cbnz	r7, 8005b00 <_dtoa_r+0x40>
 8005ae0:	2010      	movs	r0, #16
 8005ae2:	f000 fd95 	bl	8006610 <malloc>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	f8c9 001c 	str.w	r0, [r9, #28]
 8005aec:	b920      	cbnz	r0, 8005af8 <_dtoa_r+0x38>
 8005aee:	4ba0      	ldr	r3, [pc, #640]	@ (8005d70 <_dtoa_r+0x2b0>)
 8005af0:	21ef      	movs	r1, #239	@ 0xef
 8005af2:	48a0      	ldr	r0, [pc, #640]	@ (8005d74 <_dtoa_r+0x2b4>)
 8005af4:	f001 fbf8 	bl	80072e8 <__assert_func>
 8005af8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005afc:	6007      	str	r7, [r0, #0]
 8005afe:	60c7      	str	r7, [r0, #12]
 8005b00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b04:	6819      	ldr	r1, [r3, #0]
 8005b06:	b159      	cbz	r1, 8005b20 <_dtoa_r+0x60>
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	604a      	str	r2, [r1, #4]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4093      	lsls	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
 8005b12:	4648      	mov	r0, r9
 8005b14:	f000 fe72 	bl	80067fc <_Bfree>
 8005b18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	1e2b      	subs	r3, r5, #0
 8005b22:	bfbb      	ittet	lt
 8005b24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b28:	9303      	strlt	r3, [sp, #12]
 8005b2a:	2300      	movge	r3, #0
 8005b2c:	2201      	movlt	r2, #1
 8005b2e:	bfac      	ite	ge
 8005b30:	6033      	strge	r3, [r6, #0]
 8005b32:	6032      	strlt	r2, [r6, #0]
 8005b34:	4b90      	ldr	r3, [pc, #576]	@ (8005d78 <_dtoa_r+0x2b8>)
 8005b36:	9e03      	ldr	r6, [sp, #12]
 8005b38:	43b3      	bics	r3, r6
 8005b3a:	d110      	bne.n	8005b5e <_dtoa_r+0x9e>
 8005b3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005b48:	4323      	orrs	r3, r4
 8005b4a:	f000 84e6 	beq.w	800651a <_dtoa_r+0xa5a>
 8005b4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b50:	4f8a      	ldr	r7, [pc, #552]	@ (8005d7c <_dtoa_r+0x2bc>)
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 84e8 	beq.w	8006528 <_dtoa_r+0xa68>
 8005b58:	1cfb      	adds	r3, r7, #3
 8005b5a:	f000 bce3 	b.w	8006524 <_dtoa_r+0xa64>
 8005b5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005b62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	d10a      	bne.n	8005b82 <_dtoa_r+0xc2>
 8005b6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b6e:	2301      	movs	r3, #1
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b74:	b113      	cbz	r3, 8005b7c <_dtoa_r+0xbc>
 8005b76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005b78:	4b81      	ldr	r3, [pc, #516]	@ (8005d80 <_dtoa_r+0x2c0>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4f81      	ldr	r7, [pc, #516]	@ (8005d84 <_dtoa_r+0x2c4>)
 8005b7e:	f000 bcd3 	b.w	8006528 <_dtoa_r+0xa68>
 8005b82:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b84:	a90f      	add	r1, sp, #60	@ 0x3c
 8005b86:	4648      	mov	r0, r9
 8005b88:	eeb0 0b48 	vmov.f64	d0, d8
 8005b8c:	f001 f918 	bl	8006dc0 <__d2b>
 8005b90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b96:	9001      	str	r0, [sp, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d045      	beq.n	8005c28 <_dtoa_r+0x168>
 8005b9c:	eeb0 7b48 	vmov.f64	d7, d8
 8005ba0:	ee18 1a90 	vmov	r1, s17
 8005ba4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ba8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005bac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005bb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	ee07 1a90 	vmov	s15, r1
 8005bba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005bbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005d58 <_dtoa_r+0x298>
 8005bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005d60 <_dtoa_r+0x2a0>
 8005bca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005bce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005d68 <_dtoa_r+0x2a8>
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005bda:	eeb0 7b46 	vmov.f64	d7, d6
 8005bde:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005be2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005be6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	ee16 8a90 	vmov	r8, s13
 8005bf2:	d508      	bpl.n	8005c06 <_dtoa_r+0x146>
 8005bf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005bf8:	eeb4 6b47 	vcmp.f64	d6, d7
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	bf18      	it	ne
 8005c02:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005c06:	f1b8 0f16 	cmp.w	r8, #22
 8005c0a:	d82b      	bhi.n	8005c64 <_dtoa_r+0x1a4>
 8005c0c:	495e      	ldr	r1, [pc, #376]	@ (8005d88 <_dtoa_r+0x2c8>)
 8005c0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005c12:	ed91 7b00 	vldr	d7, [r1]
 8005c16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1e:	d501      	bpl.n	8005c24 <_dtoa_r+0x164>
 8005c20:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c24:	2100      	movs	r1, #0
 8005c26:	e01e      	b.n	8005c66 <_dtoa_r+0x1a6>
 8005c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005c30:	2920      	cmp	r1, #32
 8005c32:	bfc1      	itttt	gt
 8005c34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005c38:	408e      	lslgt	r6, r1
 8005c3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005c3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005c42:	bfd6      	itet	le
 8005c44:	f1c1 0120 	rsble	r1, r1, #32
 8005c48:	4331      	orrgt	r1, r6
 8005c4a:	fa04 f101 	lslle.w	r1, r4, r1
 8005c4e:	ee07 1a90 	vmov	s15, r1
 8005c52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c56:	3b01      	subs	r3, #1
 8005c58:	ee17 1a90 	vmov	r1, s15
 8005c5c:	2501      	movs	r5, #1
 8005c5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005c62:	e7a8      	b.n	8005bb6 <_dtoa_r+0xf6>
 8005c64:	2101      	movs	r1, #1
 8005c66:	1ad2      	subs	r2, r2, r3
 8005c68:	1e53      	subs	r3, r2, #1
 8005c6a:	9306      	str	r3, [sp, #24]
 8005c6c:	bf45      	ittet	mi
 8005c6e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005c72:	9304      	strmi	r3, [sp, #16]
 8005c74:	2300      	movpl	r3, #0
 8005c76:	2300      	movmi	r3, #0
 8005c78:	bf4c      	ite	mi
 8005c7a:	9306      	strmi	r3, [sp, #24]
 8005c7c:	9304      	strpl	r3, [sp, #16]
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	910c      	str	r1, [sp, #48]	@ 0x30
 8005c84:	db18      	blt.n	8005cb8 <_dtoa_r+0x1f8>
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c8c:	4443      	add	r3, r8
 8005c8e:	9306      	str	r3, [sp, #24]
 8005c90:	2300      	movs	r3, #0
 8005c92:	9a07      	ldr	r2, [sp, #28]
 8005c94:	2a09      	cmp	r2, #9
 8005c96:	d845      	bhi.n	8005d24 <_dtoa_r+0x264>
 8005c98:	2a05      	cmp	r2, #5
 8005c9a:	bfc4      	itt	gt
 8005c9c:	3a04      	subgt	r2, #4
 8005c9e:	9207      	strgt	r2, [sp, #28]
 8005ca0:	9a07      	ldr	r2, [sp, #28]
 8005ca2:	f1a2 0202 	sub.w	r2, r2, #2
 8005ca6:	bfcc      	ite	gt
 8005ca8:	2400      	movgt	r4, #0
 8005caa:	2401      	movle	r4, #1
 8005cac:	2a03      	cmp	r2, #3
 8005cae:	d844      	bhi.n	8005d3a <_dtoa_r+0x27a>
 8005cb0:	e8df f002 	tbb	[pc, r2]
 8005cb4:	0b173634 	.word	0x0b173634
 8005cb8:	9b04      	ldr	r3, [sp, #16]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	eba3 0308 	sub.w	r3, r3, r8
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8005cc4:	f1c8 0300 	rsb	r3, r8, #0
 8005cc8:	e7e3      	b.n	8005c92 <_dtoa_r+0x1d2>
 8005cca:	2201      	movs	r2, #1
 8005ccc:	9208      	str	r2, [sp, #32]
 8005cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cd0:	eb08 0b02 	add.w	fp, r8, r2
 8005cd4:	f10b 0a01 	add.w	sl, fp, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	bfb8      	it	lt
 8005cde:	2201      	movlt	r2, #1
 8005ce0:	e006      	b.n	8005cf0 <_dtoa_r+0x230>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	9208      	str	r2, [sp, #32]
 8005ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce8:	2a00      	cmp	r2, #0
 8005cea:	dd29      	ble.n	8005d40 <_dtoa_r+0x280>
 8005cec:	4693      	mov	fp, r2
 8005cee:	4692      	mov	sl, r2
 8005cf0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	2004      	movs	r0, #4
 8005cf8:	f100 0614 	add.w	r6, r0, #20
 8005cfc:	4296      	cmp	r6, r2
 8005cfe:	d926      	bls.n	8005d4e <_dtoa_r+0x28e>
 8005d00:	6079      	str	r1, [r7, #4]
 8005d02:	4648      	mov	r0, r9
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	f000 fd39 	bl	800677c <_Balloc>
 8005d0a:	9b05      	ldr	r3, [sp, #20]
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d13e      	bne.n	8005d90 <_dtoa_r+0x2d0>
 8005d12:	4b1e      	ldr	r3, [pc, #120]	@ (8005d8c <_dtoa_r+0x2cc>)
 8005d14:	4602      	mov	r2, r0
 8005d16:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d1a:	e6ea      	b.n	8005af2 <_dtoa_r+0x32>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	e7e1      	b.n	8005ce4 <_dtoa_r+0x224>
 8005d20:	2200      	movs	r2, #0
 8005d22:	e7d3      	b.n	8005ccc <_dtoa_r+0x20c>
 8005d24:	2401      	movs	r4, #1
 8005d26:	2200      	movs	r2, #0
 8005d28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005d2c:	f04f 3bff 	mov.w	fp, #4294967295
 8005d30:	2100      	movs	r1, #0
 8005d32:	46da      	mov	sl, fp
 8005d34:	2212      	movs	r2, #18
 8005d36:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d38:	e7da      	b.n	8005cf0 <_dtoa_r+0x230>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	9208      	str	r2, [sp, #32]
 8005d3e:	e7f5      	b.n	8005d2c <_dtoa_r+0x26c>
 8005d40:	f04f 0b01 	mov.w	fp, #1
 8005d44:	46da      	mov	sl, fp
 8005d46:	465a      	mov	r2, fp
 8005d48:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005d4c:	e7d0      	b.n	8005cf0 <_dtoa_r+0x230>
 8005d4e:	3101      	adds	r1, #1
 8005d50:	0040      	lsls	r0, r0, #1
 8005d52:	e7d1      	b.n	8005cf8 <_dtoa_r+0x238>
 8005d54:	f3af 8000 	nop.w
 8005d58:	636f4361 	.word	0x636f4361
 8005d5c:	3fd287a7 	.word	0x3fd287a7
 8005d60:	8b60c8b3 	.word	0x8b60c8b3
 8005d64:	3fc68a28 	.word	0x3fc68a28
 8005d68:	509f79fb 	.word	0x509f79fb
 8005d6c:	3fd34413 	.word	0x3fd34413
 8005d70:	080079f5 	.word	0x080079f5
 8005d74:	08007a0c 	.word	0x08007a0c
 8005d78:	7ff00000 	.word	0x7ff00000
 8005d7c:	080079f1 	.word	0x080079f1
 8005d80:	080079c5 	.word	0x080079c5
 8005d84:	080079c4 	.word	0x080079c4
 8005d88:	08007b60 	.word	0x08007b60
 8005d8c:	08007a64 	.word	0x08007a64
 8005d90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005d94:	f1ba 0f0e 	cmp.w	sl, #14
 8005d98:	6010      	str	r0, [r2, #0]
 8005d9a:	d86e      	bhi.n	8005e7a <_dtoa_r+0x3ba>
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	d06c      	beq.n	8005e7a <_dtoa_r+0x3ba>
 8005da0:	f1b8 0f00 	cmp.w	r8, #0
 8005da4:	f340 80b4 	ble.w	8005f10 <_dtoa_r+0x450>
 8005da8:	4ac8      	ldr	r2, [pc, #800]	@ (80060cc <_dtoa_r+0x60c>)
 8005daa:	f008 010f 	and.w	r1, r8, #15
 8005dae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005db2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005db6:	ed92 7b00 	vldr	d7, [r2]
 8005dba:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005dbe:	f000 809b 	beq.w	8005ef8 <_dtoa_r+0x438>
 8005dc2:	4ac3      	ldr	r2, [pc, #780]	@ (80060d0 <_dtoa_r+0x610>)
 8005dc4:	ed92 6b08 	vldr	d6, [r2, #32]
 8005dc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005dcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005dd0:	f001 010f 	and.w	r1, r1, #15
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	48be      	ldr	r0, [pc, #760]	@ (80060d0 <_dtoa_r+0x610>)
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	f040 808f 	bne.w	8005efc <_dtoa_r+0x43c>
 8005dde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005de2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005de6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005dec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	f000 80b3 	beq.w	8005f5c <_dtoa_r+0x49c>
 8005df6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005dfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e02:	f140 80ab 	bpl.w	8005f5c <_dtoa_r+0x49c>
 8005e06:	f1ba 0f00 	cmp.w	sl, #0
 8005e0a:	f000 80a7 	beq.w	8005f5c <_dtoa_r+0x49c>
 8005e0e:	f1bb 0f00 	cmp.w	fp, #0
 8005e12:	dd30      	ble.n	8005e76 <_dtoa_r+0x3b6>
 8005e14:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005e18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e20:	f108 31ff 	add.w	r1, r8, #4294967295
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	3201      	adds	r2, #1
 8005e28:	465c      	mov	r4, fp
 8005e2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e2e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005e32:	ee07 2a90 	vmov	s15, r2
 8005e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005e3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005e3e:	ee15 2a90 	vmov	r2, s11
 8005e42:	ec51 0b15 	vmov	r0, r1, d5
 8005e46:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	f040 808a 	bne.w	8005f64 <_dtoa_r+0x4a4>
 8005e50:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005e54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e58:	ec41 0b17 	vmov	d7, r0, r1
 8005e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	f300 826a 	bgt.w	800633c <_dtoa_r+0x87c>
 8005e68:	eeb1 7b47 	vneg.f64	d7, d7
 8005e6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e74:	d423      	bmi.n	8005ebe <_dtoa_r+0x3fe>
 8005e76:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	f2c0 8129 	blt.w	80060d4 <_dtoa_r+0x614>
 8005e82:	f1b8 0f0e 	cmp.w	r8, #14
 8005e86:	f300 8125 	bgt.w	80060d4 <_dtoa_r+0x614>
 8005e8a:	4b90      	ldr	r3, [pc, #576]	@ (80060cc <_dtoa_r+0x60c>)
 8005e8c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e90:	ed93 6b00 	vldr	d6, [r3]
 8005e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f280 80c8 	bge.w	800602c <_dtoa_r+0x56c>
 8005e9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ea0:	f300 80c4 	bgt.w	800602c <_dtoa_r+0x56c>
 8005ea4:	d10b      	bne.n	8005ebe <_dtoa_r+0x3fe>
 8005ea6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005eaa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005eb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eba:	f2c0 823c 	blt.w	8006336 <_dtoa_r+0x876>
 8005ebe:	2400      	movs	r4, #0
 8005ec0:	4625      	mov	r5, r4
 8005ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	9305      	str	r3, [sp, #20]
 8005ec8:	463e      	mov	r6, r7
 8005eca:	f04f 0800 	mov.w	r8, #0
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4648      	mov	r0, r9
 8005ed2:	f000 fc93 	bl	80067fc <_Bfree>
 8005ed6:	2d00      	cmp	r5, #0
 8005ed8:	f000 80a2 	beq.w	8006020 <_dtoa_r+0x560>
 8005edc:	f1b8 0f00 	cmp.w	r8, #0
 8005ee0:	d005      	beq.n	8005eee <_dtoa_r+0x42e>
 8005ee2:	45a8      	cmp	r8, r5
 8005ee4:	d003      	beq.n	8005eee <_dtoa_r+0x42e>
 8005ee6:	4641      	mov	r1, r8
 8005ee8:	4648      	mov	r0, r9
 8005eea:	f000 fc87 	bl	80067fc <_Bfree>
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4648      	mov	r0, r9
 8005ef2:	f000 fc83 	bl	80067fc <_Bfree>
 8005ef6:	e093      	b.n	8006020 <_dtoa_r+0x560>
 8005ef8:	2202      	movs	r2, #2
 8005efa:	e76c      	b.n	8005dd6 <_dtoa_r+0x316>
 8005efc:	07cc      	lsls	r4, r1, #31
 8005efe:	d504      	bpl.n	8005f0a <_dtoa_r+0x44a>
 8005f00:	ed90 6b00 	vldr	d6, [r0]
 8005f04:	3201      	adds	r2, #1
 8005f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f0a:	1049      	asrs	r1, r1, #1
 8005f0c:	3008      	adds	r0, #8
 8005f0e:	e763      	b.n	8005dd8 <_dtoa_r+0x318>
 8005f10:	d022      	beq.n	8005f58 <_dtoa_r+0x498>
 8005f12:	f1c8 0100 	rsb	r1, r8, #0
 8005f16:	4a6d      	ldr	r2, [pc, #436]	@ (80060cc <_dtoa_r+0x60c>)
 8005f18:	f001 000f 	and.w	r0, r1, #15
 8005f1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005f20:	ed92 7b00 	vldr	d7, [r2]
 8005f24:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005f28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f2c:	4868      	ldr	r0, [pc, #416]	@ (80060d0 <_dtoa_r+0x610>)
 8005f2e:	1109      	asrs	r1, r1, #4
 8005f30:	2400      	movs	r4, #0
 8005f32:	2202      	movs	r2, #2
 8005f34:	b929      	cbnz	r1, 8005f42 <_dtoa_r+0x482>
 8005f36:	2c00      	cmp	r4, #0
 8005f38:	f43f af57 	beq.w	8005dea <_dtoa_r+0x32a>
 8005f3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f40:	e753      	b.n	8005dea <_dtoa_r+0x32a>
 8005f42:	07ce      	lsls	r6, r1, #31
 8005f44:	d505      	bpl.n	8005f52 <_dtoa_r+0x492>
 8005f46:	ed90 6b00 	vldr	d6, [r0]
 8005f4a:	3201      	adds	r2, #1
 8005f4c:	2401      	movs	r4, #1
 8005f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f52:	1049      	asrs	r1, r1, #1
 8005f54:	3008      	adds	r0, #8
 8005f56:	e7ed      	b.n	8005f34 <_dtoa_r+0x474>
 8005f58:	2202      	movs	r2, #2
 8005f5a:	e746      	b.n	8005dea <_dtoa_r+0x32a>
 8005f5c:	f8cd 8014 	str.w	r8, [sp, #20]
 8005f60:	4654      	mov	r4, sl
 8005f62:	e762      	b.n	8005e2a <_dtoa_r+0x36a>
 8005f64:	4a59      	ldr	r2, [pc, #356]	@ (80060cc <_dtoa_r+0x60c>)
 8005f66:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005f6a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005f6e:	9a08      	ldr	r2, [sp, #32]
 8005f70:	ec41 0b17 	vmov	d7, r0, r1
 8005f74:	443c      	add	r4, r7
 8005f76:	b34a      	cbz	r2, 8005fcc <_dtoa_r+0x50c>
 8005f78:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005f7c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005f80:	463e      	mov	r6, r7
 8005f82:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005f86:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005f8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f8e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f92:	ee14 2a90 	vmov	r2, s9
 8005f96:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f9a:	3230      	adds	r2, #48	@ 0x30
 8005f9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005fa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa8:	f806 2b01 	strb.w	r2, [r6], #1
 8005fac:	d438      	bmi.n	8006020 <_dtoa_r+0x560>
 8005fae:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005fb2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fba:	d46e      	bmi.n	800609a <_dtoa_r+0x5da>
 8005fbc:	42a6      	cmp	r6, r4
 8005fbe:	f43f af5a 	beq.w	8005e76 <_dtoa_r+0x3b6>
 8005fc2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005fc6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005fca:	e7e0      	b.n	8005f8e <_dtoa_r+0x4ce>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	463e      	mov	r6, r7
 8005fd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005fd4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005fd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005fdc:	ee14 2a90 	vmov	r2, s9
 8005fe0:	3230      	adds	r2, #48	@ 0x30
 8005fe2:	f806 2b01 	strb.w	r2, [r6], #1
 8005fe6:	42a6      	cmp	r6, r4
 8005fe8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005fec:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005ff0:	d119      	bne.n	8006026 <_dtoa_r+0x566>
 8005ff2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005ff6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ffa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006002:	dc4a      	bgt.n	800609a <_dtoa_r+0x5da>
 8006004:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006008:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006010:	f57f af31 	bpl.w	8005e76 <_dtoa_r+0x3b6>
 8006014:	460e      	mov	r6, r1
 8006016:	3901      	subs	r1, #1
 8006018:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800601c:	2b30      	cmp	r3, #48	@ 0x30
 800601e:	d0f9      	beq.n	8006014 <_dtoa_r+0x554>
 8006020:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006024:	e027      	b.n	8006076 <_dtoa_r+0x5b6>
 8006026:	ee26 6b03 	vmul.f64	d6, d6, d3
 800602a:	e7d5      	b.n	8005fd8 <_dtoa_r+0x518>
 800602c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006030:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006034:	463e      	mov	r6, r7
 8006036:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800603a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800603e:	ee15 3a10 	vmov	r3, s10
 8006042:	3330      	adds	r3, #48	@ 0x30
 8006044:	f806 3b01 	strb.w	r3, [r6], #1
 8006048:	1bf3      	subs	r3, r6, r7
 800604a:	459a      	cmp	sl, r3
 800604c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006050:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006054:	d132      	bne.n	80060bc <_dtoa_r+0x5fc>
 8006056:	ee37 7b07 	vadd.f64	d7, d7, d7
 800605a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006062:	dc18      	bgt.n	8006096 <_dtoa_r+0x5d6>
 8006064:	eeb4 7b46 	vcmp.f64	d7, d6
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	d103      	bne.n	8006076 <_dtoa_r+0x5b6>
 800606e:	ee15 3a10 	vmov	r3, s10
 8006072:	07db      	lsls	r3, r3, #31
 8006074:	d40f      	bmi.n	8006096 <_dtoa_r+0x5d6>
 8006076:	9901      	ldr	r1, [sp, #4]
 8006078:	4648      	mov	r0, r9
 800607a:	f000 fbbf 	bl	80067fc <_Bfree>
 800607e:	2300      	movs	r3, #0
 8006080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006082:	7033      	strb	r3, [r6, #0]
 8006084:	f108 0301 	add.w	r3, r8, #1
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 824b 	beq.w	8006528 <_dtoa_r+0xa68>
 8006092:	601e      	str	r6, [r3, #0]
 8006094:	e248      	b.n	8006528 <_dtoa_r+0xa68>
 8006096:	f8cd 8014 	str.w	r8, [sp, #20]
 800609a:	4633      	mov	r3, r6
 800609c:	461e      	mov	r6, r3
 800609e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060a2:	2a39      	cmp	r2, #57	@ 0x39
 80060a4:	d106      	bne.n	80060b4 <_dtoa_r+0x5f4>
 80060a6:	429f      	cmp	r7, r3
 80060a8:	d1f8      	bne.n	800609c <_dtoa_r+0x5dc>
 80060aa:	9a05      	ldr	r2, [sp, #20]
 80060ac:	3201      	adds	r2, #1
 80060ae:	9205      	str	r2, [sp, #20]
 80060b0:	2230      	movs	r2, #48	@ 0x30
 80060b2:	703a      	strb	r2, [r7, #0]
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	3201      	adds	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e7b1      	b.n	8006020 <_dtoa_r+0x560>
 80060bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80060c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80060c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c8:	d1b5      	bne.n	8006036 <_dtoa_r+0x576>
 80060ca:	e7d4      	b.n	8006076 <_dtoa_r+0x5b6>
 80060cc:	08007b60 	.word	0x08007b60
 80060d0:	08007b38 	.word	0x08007b38
 80060d4:	9908      	ldr	r1, [sp, #32]
 80060d6:	2900      	cmp	r1, #0
 80060d8:	f000 80e9 	beq.w	80062ae <_dtoa_r+0x7ee>
 80060dc:	9907      	ldr	r1, [sp, #28]
 80060de:	2901      	cmp	r1, #1
 80060e0:	f300 80cb 	bgt.w	800627a <_dtoa_r+0x7ba>
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	f000 80c4 	beq.w	8006272 <_dtoa_r+0x7b2>
 80060ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80060ee:	9e04      	ldr	r6, [sp, #16]
 80060f0:	461c      	mov	r4, r3
 80060f2:	9305      	str	r3, [sp, #20]
 80060f4:	9b04      	ldr	r3, [sp, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	2101      	movs	r1, #1
 80060fe:	4413      	add	r3, r2
 8006100:	4648      	mov	r0, r9
 8006102:	9306      	str	r3, [sp, #24]
 8006104:	f000 fc2e 	bl	8006964 <__i2b>
 8006108:	9b05      	ldr	r3, [sp, #20]
 800610a:	4605      	mov	r5, r0
 800610c:	b166      	cbz	r6, 8006128 <_dtoa_r+0x668>
 800610e:	9a06      	ldr	r2, [sp, #24]
 8006110:	2a00      	cmp	r2, #0
 8006112:	dd09      	ble.n	8006128 <_dtoa_r+0x668>
 8006114:	42b2      	cmp	r2, r6
 8006116:	9904      	ldr	r1, [sp, #16]
 8006118:	bfa8      	it	ge
 800611a:	4632      	movge	r2, r6
 800611c:	1a89      	subs	r1, r1, r2
 800611e:	9104      	str	r1, [sp, #16]
 8006120:	9906      	ldr	r1, [sp, #24]
 8006122:	1ab6      	subs	r6, r6, r2
 8006124:	1a8a      	subs	r2, r1, r2
 8006126:	9206      	str	r2, [sp, #24]
 8006128:	b30b      	cbz	r3, 800616e <_dtoa_r+0x6ae>
 800612a:	9a08      	ldr	r2, [sp, #32]
 800612c:	2a00      	cmp	r2, #0
 800612e:	f000 80c5 	beq.w	80062bc <_dtoa_r+0x7fc>
 8006132:	2c00      	cmp	r4, #0
 8006134:	f000 80bf 	beq.w	80062b6 <_dtoa_r+0x7f6>
 8006138:	4629      	mov	r1, r5
 800613a:	4622      	mov	r2, r4
 800613c:	4648      	mov	r0, r9
 800613e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006140:	f000 fcc8 	bl	8006ad4 <__pow5mult>
 8006144:	9a01      	ldr	r2, [sp, #4]
 8006146:	4601      	mov	r1, r0
 8006148:	4605      	mov	r5, r0
 800614a:	4648      	mov	r0, r9
 800614c:	f000 fc20 	bl	8006990 <__multiply>
 8006150:	9901      	ldr	r1, [sp, #4]
 8006152:	9005      	str	r0, [sp, #20]
 8006154:	4648      	mov	r0, r9
 8006156:	f000 fb51 	bl	80067fc <_Bfree>
 800615a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615c:	1b1b      	subs	r3, r3, r4
 800615e:	f000 80b0 	beq.w	80062c2 <_dtoa_r+0x802>
 8006162:	9905      	ldr	r1, [sp, #20]
 8006164:	461a      	mov	r2, r3
 8006166:	4648      	mov	r0, r9
 8006168:	f000 fcb4 	bl	8006ad4 <__pow5mult>
 800616c:	9001      	str	r0, [sp, #4]
 800616e:	2101      	movs	r1, #1
 8006170:	4648      	mov	r0, r9
 8006172:	f000 fbf7 	bl	8006964 <__i2b>
 8006176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006178:	4604      	mov	r4, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 81da 	beq.w	8006534 <_dtoa_r+0xa74>
 8006180:	461a      	mov	r2, r3
 8006182:	4601      	mov	r1, r0
 8006184:	4648      	mov	r0, r9
 8006186:	f000 fca5 	bl	8006ad4 <__pow5mult>
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	2b01      	cmp	r3, #1
 800618e:	4604      	mov	r4, r0
 8006190:	f300 80a0 	bgt.w	80062d4 <_dtoa_r+0x814>
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 8096 	bne.w	80062c8 <_dtoa_r+0x808>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	f040 8092 	bne.w	80062cc <_dtoa_r+0x80c>
 80061a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80061ac:	0d12      	lsrs	r2, r2, #20
 80061ae:	0512      	lsls	r2, r2, #20
 80061b0:	2a00      	cmp	r2, #0
 80061b2:	f000 808d 	beq.w	80062d0 <_dtoa_r+0x810>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	3301      	adds	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	3301      	adds	r3, #1
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	2301      	movs	r3, #1
 80061c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 81b9 	beq.w	8006540 <_dtoa_r+0xa80>
 80061ce:	6922      	ldr	r2, [r4, #16]
 80061d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80061d4:	6910      	ldr	r0, [r2, #16]
 80061d6:	f000 fb79 	bl	80068cc <__hi0bits>
 80061da:	f1c0 0020 	rsb	r0, r0, #32
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	4418      	add	r0, r3
 80061e2:	f010 001f 	ands.w	r0, r0, #31
 80061e6:	f000 8081 	beq.w	80062ec <_dtoa_r+0x82c>
 80061ea:	f1c0 0220 	rsb	r2, r0, #32
 80061ee:	2a04      	cmp	r2, #4
 80061f0:	dd73      	ble.n	80062da <_dtoa_r+0x81a>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	f1c0 001c 	rsb	r0, r0, #28
 80061f8:	4403      	add	r3, r0
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	9b06      	ldr	r3, [sp, #24]
 80061fe:	4406      	add	r6, r0
 8006200:	4403      	add	r3, r0
 8006202:	9306      	str	r3, [sp, #24]
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dd05      	ble.n	8006216 <_dtoa_r+0x756>
 800620a:	9901      	ldr	r1, [sp, #4]
 800620c:	461a      	mov	r2, r3
 800620e:	4648      	mov	r0, r9
 8006210:	f000 fcba 	bl	8006b88 <__lshift>
 8006214:	9001      	str	r0, [sp, #4]
 8006216:	9b06      	ldr	r3, [sp, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	dd05      	ble.n	8006228 <_dtoa_r+0x768>
 800621c:	4621      	mov	r1, r4
 800621e:	461a      	mov	r2, r3
 8006220:	4648      	mov	r0, r9
 8006222:	f000 fcb1 	bl	8006b88 <__lshift>
 8006226:	4604      	mov	r4, r0
 8006228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800622a:	2b00      	cmp	r3, #0
 800622c:	d060      	beq.n	80062f0 <_dtoa_r+0x830>
 800622e:	9801      	ldr	r0, [sp, #4]
 8006230:	4621      	mov	r1, r4
 8006232:	f000 fd15 	bl	8006c60 <__mcmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	da5a      	bge.n	80062f0 <_dtoa_r+0x830>
 800623a:	f108 33ff 	add.w	r3, r8, #4294967295
 800623e:	9305      	str	r3, [sp, #20]
 8006240:	9901      	ldr	r1, [sp, #4]
 8006242:	2300      	movs	r3, #0
 8006244:	220a      	movs	r2, #10
 8006246:	4648      	mov	r0, r9
 8006248:	f000 fafa 	bl	8006840 <__multadd>
 800624c:	9b08      	ldr	r3, [sp, #32]
 800624e:	9001      	str	r0, [sp, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8177 	beq.w	8006544 <_dtoa_r+0xa84>
 8006256:	4629      	mov	r1, r5
 8006258:	2300      	movs	r3, #0
 800625a:	220a      	movs	r2, #10
 800625c:	4648      	mov	r0, r9
 800625e:	f000 faef 	bl	8006840 <__multadd>
 8006262:	f1bb 0f00 	cmp.w	fp, #0
 8006266:	4605      	mov	r5, r0
 8006268:	dc6e      	bgt.n	8006348 <_dtoa_r+0x888>
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	2b02      	cmp	r3, #2
 800626e:	dc48      	bgt.n	8006302 <_dtoa_r+0x842>
 8006270:	e06a      	b.n	8006348 <_dtoa_r+0x888>
 8006272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006274:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006278:	e739      	b.n	80060ee <_dtoa_r+0x62e>
 800627a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800627e:	42a3      	cmp	r3, r4
 8006280:	db07      	blt.n	8006292 <_dtoa_r+0x7d2>
 8006282:	f1ba 0f00 	cmp.w	sl, #0
 8006286:	eba3 0404 	sub.w	r4, r3, r4
 800628a:	db0b      	blt.n	80062a4 <_dtoa_r+0x7e4>
 800628c:	9e04      	ldr	r6, [sp, #16]
 800628e:	4652      	mov	r2, sl
 8006290:	e72f      	b.n	80060f2 <_dtoa_r+0x632>
 8006292:	1ae2      	subs	r2, r4, r3
 8006294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006296:	9e04      	ldr	r6, [sp, #16]
 8006298:	4413      	add	r3, r2
 800629a:	930a      	str	r3, [sp, #40]	@ 0x28
 800629c:	4652      	mov	r2, sl
 800629e:	4623      	mov	r3, r4
 80062a0:	2400      	movs	r4, #0
 80062a2:	e726      	b.n	80060f2 <_dtoa_r+0x632>
 80062a4:	9a04      	ldr	r2, [sp, #16]
 80062a6:	eba2 060a 	sub.w	r6, r2, sl
 80062aa:	2200      	movs	r2, #0
 80062ac:	e721      	b.n	80060f2 <_dtoa_r+0x632>
 80062ae:	9e04      	ldr	r6, [sp, #16]
 80062b0:	9d08      	ldr	r5, [sp, #32]
 80062b2:	461c      	mov	r4, r3
 80062b4:	e72a      	b.n	800610c <_dtoa_r+0x64c>
 80062b6:	9a01      	ldr	r2, [sp, #4]
 80062b8:	9205      	str	r2, [sp, #20]
 80062ba:	e752      	b.n	8006162 <_dtoa_r+0x6a2>
 80062bc:	9901      	ldr	r1, [sp, #4]
 80062be:	461a      	mov	r2, r3
 80062c0:	e751      	b.n	8006166 <_dtoa_r+0x6a6>
 80062c2:	9b05      	ldr	r3, [sp, #20]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	e752      	b.n	800616e <_dtoa_r+0x6ae>
 80062c8:	2300      	movs	r3, #0
 80062ca:	e77b      	b.n	80061c4 <_dtoa_r+0x704>
 80062cc:	9b02      	ldr	r3, [sp, #8]
 80062ce:	e779      	b.n	80061c4 <_dtoa_r+0x704>
 80062d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80062d2:	e778      	b.n	80061c6 <_dtoa_r+0x706>
 80062d4:	2300      	movs	r3, #0
 80062d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d8:	e779      	b.n	80061ce <_dtoa_r+0x70e>
 80062da:	d093      	beq.n	8006204 <_dtoa_r+0x744>
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	321c      	adds	r2, #28
 80062e0:	4413      	add	r3, r2
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	9b06      	ldr	r3, [sp, #24]
 80062e6:	4416      	add	r6, r2
 80062e8:	4413      	add	r3, r2
 80062ea:	e78a      	b.n	8006202 <_dtoa_r+0x742>
 80062ec:	4602      	mov	r2, r0
 80062ee:	e7f5      	b.n	80062dc <_dtoa_r+0x81c>
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80062f8:	46d3      	mov	fp, sl
 80062fa:	dc21      	bgt.n	8006340 <_dtoa_r+0x880>
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	dd1e      	ble.n	8006340 <_dtoa_r+0x880>
 8006302:	f1bb 0f00 	cmp.w	fp, #0
 8006306:	f47f addc 	bne.w	8005ec2 <_dtoa_r+0x402>
 800630a:	4621      	mov	r1, r4
 800630c:	465b      	mov	r3, fp
 800630e:	2205      	movs	r2, #5
 8006310:	4648      	mov	r0, r9
 8006312:	f000 fa95 	bl	8006840 <__multadd>
 8006316:	4601      	mov	r1, r0
 8006318:	4604      	mov	r4, r0
 800631a:	9801      	ldr	r0, [sp, #4]
 800631c:	f000 fca0 	bl	8006c60 <__mcmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	f77f adce 	ble.w	8005ec2 <_dtoa_r+0x402>
 8006326:	463e      	mov	r6, r7
 8006328:	2331      	movs	r3, #49	@ 0x31
 800632a:	f806 3b01 	strb.w	r3, [r6], #1
 800632e:	9b05      	ldr	r3, [sp, #20]
 8006330:	3301      	adds	r3, #1
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	e5c9      	b.n	8005eca <_dtoa_r+0x40a>
 8006336:	f8cd 8014 	str.w	r8, [sp, #20]
 800633a:	4654      	mov	r4, sl
 800633c:	4625      	mov	r5, r4
 800633e:	e7f2      	b.n	8006326 <_dtoa_r+0x866>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8102 	beq.w	800654c <_dtoa_r+0xa8c>
 8006348:	2e00      	cmp	r6, #0
 800634a:	dd05      	ble.n	8006358 <_dtoa_r+0x898>
 800634c:	4629      	mov	r1, r5
 800634e:	4632      	mov	r2, r6
 8006350:	4648      	mov	r0, r9
 8006352:	f000 fc19 	bl	8006b88 <__lshift>
 8006356:	4605      	mov	r5, r0
 8006358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d058      	beq.n	8006410 <_dtoa_r+0x950>
 800635e:	6869      	ldr	r1, [r5, #4]
 8006360:	4648      	mov	r0, r9
 8006362:	f000 fa0b 	bl	800677c <_Balloc>
 8006366:	4606      	mov	r6, r0
 8006368:	b928      	cbnz	r0, 8006376 <_dtoa_r+0x8b6>
 800636a:	4b82      	ldr	r3, [pc, #520]	@ (8006574 <_dtoa_r+0xab4>)
 800636c:	4602      	mov	r2, r0
 800636e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006372:	f7ff bbbe 	b.w	8005af2 <_dtoa_r+0x32>
 8006376:	692a      	ldr	r2, [r5, #16]
 8006378:	3202      	adds	r2, #2
 800637a:	0092      	lsls	r2, r2, #2
 800637c:	f105 010c 	add.w	r1, r5, #12
 8006380:	300c      	adds	r0, #12
 8006382:	f000 ffa3 	bl	80072cc <memcpy>
 8006386:	2201      	movs	r2, #1
 8006388:	4631      	mov	r1, r6
 800638a:	4648      	mov	r0, r9
 800638c:	f000 fbfc 	bl	8006b88 <__lshift>
 8006390:	1c7b      	adds	r3, r7, #1
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	eb07 030b 	add.w	r3, r7, fp
 8006398:	9309      	str	r3, [sp, #36]	@ 0x24
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	46a8      	mov	r8, r5
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	4605      	mov	r5, r0
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	9801      	ldr	r0, [sp, #4]
 80063aa:	4621      	mov	r1, r4
 80063ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80063b0:	f7ff fafb 	bl	80059aa <quorem>
 80063b4:	4641      	mov	r1, r8
 80063b6:	9002      	str	r0, [sp, #8]
 80063b8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80063bc:	9801      	ldr	r0, [sp, #4]
 80063be:	f000 fc4f 	bl	8006c60 <__mcmp>
 80063c2:	462a      	mov	r2, r5
 80063c4:	9006      	str	r0, [sp, #24]
 80063c6:	4621      	mov	r1, r4
 80063c8:	4648      	mov	r0, r9
 80063ca:	f000 fc65 	bl	8006c98 <__mdiff>
 80063ce:	68c2      	ldr	r2, [r0, #12]
 80063d0:	4606      	mov	r6, r0
 80063d2:	b9fa      	cbnz	r2, 8006414 <_dtoa_r+0x954>
 80063d4:	4601      	mov	r1, r0
 80063d6:	9801      	ldr	r0, [sp, #4]
 80063d8:	f000 fc42 	bl	8006c60 <__mcmp>
 80063dc:	4602      	mov	r2, r0
 80063de:	4631      	mov	r1, r6
 80063e0:	4648      	mov	r0, r9
 80063e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80063e4:	f000 fa0a 	bl	80067fc <_Bfree>
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063ec:	9e04      	ldr	r6, [sp, #16]
 80063ee:	ea42 0103 	orr.w	r1, r2, r3
 80063f2:	9b08      	ldr	r3, [sp, #32]
 80063f4:	4319      	orrs	r1, r3
 80063f6:	d10f      	bne.n	8006418 <_dtoa_r+0x958>
 80063f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80063fc:	d028      	beq.n	8006450 <_dtoa_r+0x990>
 80063fe:	9b06      	ldr	r3, [sp, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	dd02      	ble.n	800640a <_dtoa_r+0x94a>
 8006404:	9b02      	ldr	r3, [sp, #8]
 8006406:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800640a:	f88b a000 	strb.w	sl, [fp]
 800640e:	e55e      	b.n	8005ece <_dtoa_r+0x40e>
 8006410:	4628      	mov	r0, r5
 8006412:	e7bd      	b.n	8006390 <_dtoa_r+0x8d0>
 8006414:	2201      	movs	r2, #1
 8006416:	e7e2      	b.n	80063de <_dtoa_r+0x91e>
 8006418:	9b06      	ldr	r3, [sp, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	db04      	blt.n	8006428 <_dtoa_r+0x968>
 800641e:	9907      	ldr	r1, [sp, #28]
 8006420:	430b      	orrs	r3, r1
 8006422:	9908      	ldr	r1, [sp, #32]
 8006424:	430b      	orrs	r3, r1
 8006426:	d120      	bne.n	800646a <_dtoa_r+0x9aa>
 8006428:	2a00      	cmp	r2, #0
 800642a:	ddee      	ble.n	800640a <_dtoa_r+0x94a>
 800642c:	9901      	ldr	r1, [sp, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	4648      	mov	r0, r9
 8006432:	f000 fba9 	bl	8006b88 <__lshift>
 8006436:	4621      	mov	r1, r4
 8006438:	9001      	str	r0, [sp, #4]
 800643a:	f000 fc11 	bl	8006c60 <__mcmp>
 800643e:	2800      	cmp	r0, #0
 8006440:	dc03      	bgt.n	800644a <_dtoa_r+0x98a>
 8006442:	d1e2      	bne.n	800640a <_dtoa_r+0x94a>
 8006444:	f01a 0f01 	tst.w	sl, #1
 8006448:	d0df      	beq.n	800640a <_dtoa_r+0x94a>
 800644a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800644e:	d1d9      	bne.n	8006404 <_dtoa_r+0x944>
 8006450:	2339      	movs	r3, #57	@ 0x39
 8006452:	f88b 3000 	strb.w	r3, [fp]
 8006456:	4633      	mov	r3, r6
 8006458:	461e      	mov	r6, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006460:	2a39      	cmp	r2, #57	@ 0x39
 8006462:	d052      	beq.n	800650a <_dtoa_r+0xa4a>
 8006464:	3201      	adds	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e531      	b.n	8005ece <_dtoa_r+0x40e>
 800646a:	2a00      	cmp	r2, #0
 800646c:	dd07      	ble.n	800647e <_dtoa_r+0x9be>
 800646e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006472:	d0ed      	beq.n	8006450 <_dtoa_r+0x990>
 8006474:	f10a 0301 	add.w	r3, sl, #1
 8006478:	f88b 3000 	strb.w	r3, [fp]
 800647c:	e527      	b.n	8005ece <_dtoa_r+0x40e>
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006482:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006486:	4293      	cmp	r3, r2
 8006488:	d029      	beq.n	80064de <_dtoa_r+0xa1e>
 800648a:	9901      	ldr	r1, [sp, #4]
 800648c:	2300      	movs	r3, #0
 800648e:	220a      	movs	r2, #10
 8006490:	4648      	mov	r0, r9
 8006492:	f000 f9d5 	bl	8006840 <__multadd>
 8006496:	45a8      	cmp	r8, r5
 8006498:	9001      	str	r0, [sp, #4]
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	f04f 020a 	mov.w	r2, #10
 80064a2:	4641      	mov	r1, r8
 80064a4:	4648      	mov	r0, r9
 80064a6:	d107      	bne.n	80064b8 <_dtoa_r+0x9f8>
 80064a8:	f000 f9ca 	bl	8006840 <__multadd>
 80064ac:	4680      	mov	r8, r0
 80064ae:	4605      	mov	r5, r0
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	3301      	adds	r3, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	e776      	b.n	80063a6 <_dtoa_r+0x8e6>
 80064b8:	f000 f9c2 	bl	8006840 <__multadd>
 80064bc:	4629      	mov	r1, r5
 80064be:	4680      	mov	r8, r0
 80064c0:	2300      	movs	r3, #0
 80064c2:	220a      	movs	r2, #10
 80064c4:	4648      	mov	r0, r9
 80064c6:	f000 f9bb 	bl	8006840 <__multadd>
 80064ca:	4605      	mov	r5, r0
 80064cc:	e7f0      	b.n	80064b0 <_dtoa_r+0x9f0>
 80064ce:	f1bb 0f00 	cmp.w	fp, #0
 80064d2:	bfcc      	ite	gt
 80064d4:	465e      	movgt	r6, fp
 80064d6:	2601      	movle	r6, #1
 80064d8:	443e      	add	r6, r7
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	9901      	ldr	r1, [sp, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fb50 	bl	8006b88 <__lshift>
 80064e8:	4621      	mov	r1, r4
 80064ea:	9001      	str	r0, [sp, #4]
 80064ec:	f000 fbb8 	bl	8006c60 <__mcmp>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	dcb0      	bgt.n	8006456 <_dtoa_r+0x996>
 80064f4:	d102      	bne.n	80064fc <_dtoa_r+0xa3c>
 80064f6:	f01a 0f01 	tst.w	sl, #1
 80064fa:	d1ac      	bne.n	8006456 <_dtoa_r+0x996>
 80064fc:	4633      	mov	r3, r6
 80064fe:	461e      	mov	r6, r3
 8006500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006504:	2a30      	cmp	r2, #48	@ 0x30
 8006506:	d0fa      	beq.n	80064fe <_dtoa_r+0xa3e>
 8006508:	e4e1      	b.n	8005ece <_dtoa_r+0x40e>
 800650a:	429f      	cmp	r7, r3
 800650c:	d1a4      	bne.n	8006458 <_dtoa_r+0x998>
 800650e:	9b05      	ldr	r3, [sp, #20]
 8006510:	3301      	adds	r3, #1
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	2331      	movs	r3, #49	@ 0x31
 8006516:	703b      	strb	r3, [r7, #0]
 8006518:	e4d9      	b.n	8005ece <_dtoa_r+0x40e>
 800651a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800651c:	4f16      	ldr	r7, [pc, #88]	@ (8006578 <_dtoa_r+0xab8>)
 800651e:	b11b      	cbz	r3, 8006528 <_dtoa_r+0xa68>
 8006520:	f107 0308 	add.w	r3, r7, #8
 8006524:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	4638      	mov	r0, r7
 800652a:	b011      	add	sp, #68	@ 0x44
 800652c:	ecbd 8b02 	vpop	{d8}
 8006530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	2b01      	cmp	r3, #1
 8006538:	f77f ae2c 	ble.w	8006194 <_dtoa_r+0x6d4>
 800653c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800653e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006540:	2001      	movs	r0, #1
 8006542:	e64c      	b.n	80061de <_dtoa_r+0x71e>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	f77f aed8 	ble.w	80062fc <_dtoa_r+0x83c>
 800654c:	463e      	mov	r6, r7
 800654e:	9801      	ldr	r0, [sp, #4]
 8006550:	4621      	mov	r1, r4
 8006552:	f7ff fa2a 	bl	80059aa <quorem>
 8006556:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800655a:	f806 ab01 	strb.w	sl, [r6], #1
 800655e:	1bf2      	subs	r2, r6, r7
 8006560:	4593      	cmp	fp, r2
 8006562:	ddb4      	ble.n	80064ce <_dtoa_r+0xa0e>
 8006564:	9901      	ldr	r1, [sp, #4]
 8006566:	2300      	movs	r3, #0
 8006568:	220a      	movs	r2, #10
 800656a:	4648      	mov	r0, r9
 800656c:	f000 f968 	bl	8006840 <__multadd>
 8006570:	9001      	str	r0, [sp, #4]
 8006572:	e7ec      	b.n	800654e <_dtoa_r+0xa8e>
 8006574:	08007a64 	.word	0x08007a64
 8006578:	080079e8 	.word	0x080079e8

0800657c <_free_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4605      	mov	r5, r0
 8006580:	2900      	cmp	r1, #0
 8006582:	d041      	beq.n	8006608 <_free_r+0x8c>
 8006584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006588:	1f0c      	subs	r4, r1, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfb8      	it	lt
 800658e:	18e4      	addlt	r4, r4, r3
 8006590:	f000 f8e8 	bl	8006764 <__malloc_lock>
 8006594:	4a1d      	ldr	r2, [pc, #116]	@ (800660c <_free_r+0x90>)
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	b933      	cbnz	r3, 80065a8 <_free_r+0x2c>
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	6014      	str	r4, [r2, #0]
 800659e:	4628      	mov	r0, r5
 80065a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a4:	f000 b8e4 	b.w	8006770 <__malloc_unlock>
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d908      	bls.n	80065be <_free_r+0x42>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf01      	itttt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	1809      	addeq	r1, r1, r0
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	e7ed      	b.n	800659a <_free_r+0x1e>
 80065be:	461a      	mov	r2, r3
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b10b      	cbz	r3, 80065c8 <_free_r+0x4c>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d9fa      	bls.n	80065be <_free_r+0x42>
 80065c8:	6811      	ldr	r1, [r2, #0]
 80065ca:	1850      	adds	r0, r2, r1
 80065cc:	42a0      	cmp	r0, r4
 80065ce:	d10b      	bne.n	80065e8 <_free_r+0x6c>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	4401      	add	r1, r0
 80065d4:	1850      	adds	r0, r2, r1
 80065d6:	4283      	cmp	r3, r0
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	d1e0      	bne.n	800659e <_free_r+0x22>
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	6053      	str	r3, [r2, #4]
 80065e2:	4408      	add	r0, r1
 80065e4:	6010      	str	r0, [r2, #0]
 80065e6:	e7da      	b.n	800659e <_free_r+0x22>
 80065e8:	d902      	bls.n	80065f0 <_free_r+0x74>
 80065ea:	230c      	movs	r3, #12
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	e7d6      	b.n	800659e <_free_r+0x22>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	1821      	adds	r1, r4, r0
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf04      	itt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	bf04      	itt	eq
 8006600:	1809      	addeq	r1, r1, r0
 8006602:	6021      	streq	r1, [r4, #0]
 8006604:	6054      	str	r4, [r2, #4]
 8006606:	e7ca      	b.n	800659e <_free_r+0x22>
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	2000049c 	.word	0x2000049c

08006610 <malloc>:
 8006610:	4b02      	ldr	r3, [pc, #8]	@ (800661c <malloc+0xc>)
 8006612:	4601      	mov	r1, r0
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	f000 b825 	b.w	8006664 <_malloc_r>
 800661a:	bf00      	nop
 800661c:	20000018 	.word	0x20000018

08006620 <sbrk_aligned>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4e0f      	ldr	r6, [pc, #60]	@ (8006660 <sbrk_aligned+0x40>)
 8006624:	460c      	mov	r4, r1
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	4605      	mov	r5, r0
 800662a:	b911      	cbnz	r1, 8006632 <sbrk_aligned+0x12>
 800662c:	f000 fe3e 	bl	80072ac <_sbrk_r>
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 fe39 	bl	80072ac <_sbrk_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d103      	bne.n	8006646 <sbrk_aligned+0x26>
 800663e:	f04f 34ff 	mov.w	r4, #4294967295
 8006642:	4620      	mov	r0, r4
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	1cc4      	adds	r4, r0, #3
 8006648:	f024 0403 	bic.w	r4, r4, #3
 800664c:	42a0      	cmp	r0, r4
 800664e:	d0f8      	beq.n	8006642 <sbrk_aligned+0x22>
 8006650:	1a21      	subs	r1, r4, r0
 8006652:	4628      	mov	r0, r5
 8006654:	f000 fe2a 	bl	80072ac <_sbrk_r>
 8006658:	3001      	adds	r0, #1
 800665a:	d1f2      	bne.n	8006642 <sbrk_aligned+0x22>
 800665c:	e7ef      	b.n	800663e <sbrk_aligned+0x1e>
 800665e:	bf00      	nop
 8006660:	20000498 	.word	0x20000498

08006664 <_malloc_r>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4606      	mov	r6, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d904      	bls.n	800668a <_malloc_r+0x26>
 8006680:	230c      	movs	r3, #12
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	2000      	movs	r0, #0
 8006686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006760 <_malloc_r+0xfc>
 800668e:	f000 f869 	bl	8006764 <__malloc_lock>
 8006692:	f8d8 3000 	ldr.w	r3, [r8]
 8006696:	461c      	mov	r4, r3
 8006698:	bb44      	cbnz	r4, 80066ec <_malloc_r+0x88>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff ffbf 	bl	8006620 <sbrk_aligned>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	4604      	mov	r4, r0
 80066a6:	d158      	bne.n	800675a <_malloc_r+0xf6>
 80066a8:	f8d8 4000 	ldr.w	r4, [r8]
 80066ac:	4627      	mov	r7, r4
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d143      	bne.n	800673a <_malloc_r+0xd6>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	d04b      	beq.n	800674e <_malloc_r+0xea>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	eb04 0903 	add.w	r9, r4, r3
 80066c0:	f000 fdf4 	bl	80072ac <_sbrk_r>
 80066c4:	4581      	cmp	r9, r0
 80066c6:	d142      	bne.n	800674e <_malloc_r+0xea>
 80066c8:	6821      	ldr	r1, [r4, #0]
 80066ca:	1a6d      	subs	r5, r5, r1
 80066cc:	4629      	mov	r1, r5
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7ff ffa6 	bl	8006620 <sbrk_aligned>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d03a      	beq.n	800674e <_malloc_r+0xea>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	442b      	add	r3, r5
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	f8d8 3000 	ldr.w	r3, [r8]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	bb62      	cbnz	r2, 8006740 <_malloc_r+0xdc>
 80066e6:	f8c8 7000 	str.w	r7, [r8]
 80066ea:	e00f      	b.n	800670c <_malloc_r+0xa8>
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	1b52      	subs	r2, r2, r5
 80066f0:	d420      	bmi.n	8006734 <_malloc_r+0xd0>
 80066f2:	2a0b      	cmp	r2, #11
 80066f4:	d917      	bls.n	8006726 <_malloc_r+0xc2>
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	6025      	str	r5, [r4, #0]
 80066fc:	bf18      	it	ne
 80066fe:	6059      	strne	r1, [r3, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	bf08      	it	eq
 8006704:	f8c8 1000 	streq.w	r1, [r8]
 8006708:	5162      	str	r2, [r4, r5]
 800670a:	604b      	str	r3, [r1, #4]
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f82f 	bl	8006770 <__malloc_unlock>
 8006712:	f104 000b 	add.w	r0, r4, #11
 8006716:	1d23      	adds	r3, r4, #4
 8006718:	f020 0007 	bic.w	r0, r0, #7
 800671c:	1ac2      	subs	r2, r0, r3
 800671e:	bf1c      	itt	ne
 8006720:	1a1b      	subne	r3, r3, r0
 8006722:	50a3      	strne	r3, [r4, r2]
 8006724:	e7af      	b.n	8006686 <_malloc_r+0x22>
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	42a3      	cmp	r3, r4
 800672a:	bf0c      	ite	eq
 800672c:	f8c8 2000 	streq.w	r2, [r8]
 8006730:	605a      	strne	r2, [r3, #4]
 8006732:	e7eb      	b.n	800670c <_malloc_r+0xa8>
 8006734:	4623      	mov	r3, r4
 8006736:	6864      	ldr	r4, [r4, #4]
 8006738:	e7ae      	b.n	8006698 <_malloc_r+0x34>
 800673a:	463c      	mov	r4, r7
 800673c:	687f      	ldr	r7, [r7, #4]
 800673e:	e7b6      	b.n	80066ae <_malloc_r+0x4a>
 8006740:	461a      	mov	r2, r3
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	42a3      	cmp	r3, r4
 8006746:	d1fb      	bne.n	8006740 <_malloc_r+0xdc>
 8006748:	2300      	movs	r3, #0
 800674a:	6053      	str	r3, [r2, #4]
 800674c:	e7de      	b.n	800670c <_malloc_r+0xa8>
 800674e:	230c      	movs	r3, #12
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f80c 	bl	8006770 <__malloc_unlock>
 8006758:	e794      	b.n	8006684 <_malloc_r+0x20>
 800675a:	6005      	str	r5, [r0, #0]
 800675c:	e7d6      	b.n	800670c <_malloc_r+0xa8>
 800675e:	bf00      	nop
 8006760:	2000049c 	.word	0x2000049c

08006764 <__malloc_lock>:
 8006764:	4801      	ldr	r0, [pc, #4]	@ (800676c <__malloc_lock+0x8>)
 8006766:	f7ff b91e 	b.w	80059a6 <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	20000494 	.word	0x20000494

08006770 <__malloc_unlock>:
 8006770:	4801      	ldr	r0, [pc, #4]	@ (8006778 <__malloc_unlock+0x8>)
 8006772:	f7ff b919 	b.w	80059a8 <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	20000494 	.word	0x20000494

0800677c <_Balloc>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	69c6      	ldr	r6, [r0, #28]
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	b976      	cbnz	r6, 80067a4 <_Balloc+0x28>
 8006786:	2010      	movs	r0, #16
 8006788:	f7ff ff42 	bl	8006610 <malloc>
 800678c:	4602      	mov	r2, r0
 800678e:	61e0      	str	r0, [r4, #28]
 8006790:	b920      	cbnz	r0, 800679c <_Balloc+0x20>
 8006792:	4b18      	ldr	r3, [pc, #96]	@ (80067f4 <_Balloc+0x78>)
 8006794:	4818      	ldr	r0, [pc, #96]	@ (80067f8 <_Balloc+0x7c>)
 8006796:	216b      	movs	r1, #107	@ 0x6b
 8006798:	f000 fda6 	bl	80072e8 <__assert_func>
 800679c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a0:	6006      	str	r6, [r0, #0]
 80067a2:	60c6      	str	r6, [r0, #12]
 80067a4:	69e6      	ldr	r6, [r4, #28]
 80067a6:	68f3      	ldr	r3, [r6, #12]
 80067a8:	b183      	cbz	r3, 80067cc <_Balloc+0x50>
 80067aa:	69e3      	ldr	r3, [r4, #28]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067b2:	b9b8      	cbnz	r0, 80067e4 <_Balloc+0x68>
 80067b4:	2101      	movs	r1, #1
 80067b6:	fa01 f605 	lsl.w	r6, r1, r5
 80067ba:	1d72      	adds	r2, r6, #5
 80067bc:	0092      	lsls	r2, r2, #2
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fdb0 	bl	8007324 <_calloc_r>
 80067c4:	b160      	cbz	r0, 80067e0 <_Balloc+0x64>
 80067c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ca:	e00e      	b.n	80067ea <_Balloc+0x6e>
 80067cc:	2221      	movs	r2, #33	@ 0x21
 80067ce:	2104      	movs	r1, #4
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fda7 	bl	8007324 <_calloc_r>
 80067d6:	69e3      	ldr	r3, [r4, #28]
 80067d8:	60f0      	str	r0, [r6, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e4      	bne.n	80067aa <_Balloc+0x2e>
 80067e0:	2000      	movs	r0, #0
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	6802      	ldr	r2, [r0, #0]
 80067e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ea:	2300      	movs	r3, #0
 80067ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067f0:	e7f7      	b.n	80067e2 <_Balloc+0x66>
 80067f2:	bf00      	nop
 80067f4:	080079f5 	.word	0x080079f5
 80067f8:	08007a75 	.word	0x08007a75

080067fc <_Bfree>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	69c6      	ldr	r6, [r0, #28]
 8006800:	4605      	mov	r5, r0
 8006802:	460c      	mov	r4, r1
 8006804:	b976      	cbnz	r6, 8006824 <_Bfree+0x28>
 8006806:	2010      	movs	r0, #16
 8006808:	f7ff ff02 	bl	8006610 <malloc>
 800680c:	4602      	mov	r2, r0
 800680e:	61e8      	str	r0, [r5, #28]
 8006810:	b920      	cbnz	r0, 800681c <_Bfree+0x20>
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <_Bfree+0x3c>)
 8006814:	4809      	ldr	r0, [pc, #36]	@ (800683c <_Bfree+0x40>)
 8006816:	218f      	movs	r1, #143	@ 0x8f
 8006818:	f000 fd66 	bl	80072e8 <__assert_func>
 800681c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006820:	6006      	str	r6, [r0, #0]
 8006822:	60c6      	str	r6, [r0, #12]
 8006824:	b13c      	cbz	r4, 8006836 <_Bfree+0x3a>
 8006826:	69eb      	ldr	r3, [r5, #28]
 8006828:	6862      	ldr	r2, [r4, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006830:	6021      	str	r1, [r4, #0]
 8006832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	080079f5 	.word	0x080079f5
 800683c:	08007a75 	.word	0x08007a75

08006840 <__multadd>:
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	690d      	ldr	r5, [r1, #16]
 8006846:	4607      	mov	r7, r0
 8006848:	460c      	mov	r4, r1
 800684a:	461e      	mov	r6, r3
 800684c:	f101 0c14 	add.w	ip, r1, #20
 8006850:	2000      	movs	r0, #0
 8006852:	f8dc 3000 	ldr.w	r3, [ip]
 8006856:	b299      	uxth	r1, r3
 8006858:	fb02 6101 	mla	r1, r2, r1, r6
 800685c:	0c1e      	lsrs	r6, r3, #16
 800685e:	0c0b      	lsrs	r3, r1, #16
 8006860:	fb02 3306 	mla	r3, r2, r6, r3
 8006864:	b289      	uxth	r1, r1
 8006866:	3001      	adds	r0, #1
 8006868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800686c:	4285      	cmp	r5, r0
 800686e:	f84c 1b04 	str.w	r1, [ip], #4
 8006872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006876:	dcec      	bgt.n	8006852 <__multadd+0x12>
 8006878:	b30e      	cbz	r6, 80068be <__multadd+0x7e>
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	42ab      	cmp	r3, r5
 800687e:	dc19      	bgt.n	80068b4 <__multadd+0x74>
 8006880:	6861      	ldr	r1, [r4, #4]
 8006882:	4638      	mov	r0, r7
 8006884:	3101      	adds	r1, #1
 8006886:	f7ff ff79 	bl	800677c <_Balloc>
 800688a:	4680      	mov	r8, r0
 800688c:	b928      	cbnz	r0, 800689a <__multadd+0x5a>
 800688e:	4602      	mov	r2, r0
 8006890:	4b0c      	ldr	r3, [pc, #48]	@ (80068c4 <__multadd+0x84>)
 8006892:	480d      	ldr	r0, [pc, #52]	@ (80068c8 <__multadd+0x88>)
 8006894:	21ba      	movs	r1, #186	@ 0xba
 8006896:	f000 fd27 	bl	80072e8 <__assert_func>
 800689a:	6922      	ldr	r2, [r4, #16]
 800689c:	3202      	adds	r2, #2
 800689e:	f104 010c 	add.w	r1, r4, #12
 80068a2:	0092      	lsls	r2, r2, #2
 80068a4:	300c      	adds	r0, #12
 80068a6:	f000 fd11 	bl	80072cc <memcpy>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4638      	mov	r0, r7
 80068ae:	f7ff ffa5 	bl	80067fc <_Bfree>
 80068b2:	4644      	mov	r4, r8
 80068b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068b8:	3501      	adds	r5, #1
 80068ba:	615e      	str	r6, [r3, #20]
 80068bc:	6125      	str	r5, [r4, #16]
 80068be:	4620      	mov	r0, r4
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c4:	08007a64 	.word	0x08007a64
 80068c8:	08007a75 	.word	0x08007a75

080068cc <__hi0bits>:
 80068cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068d0:	4603      	mov	r3, r0
 80068d2:	bf36      	itet	cc
 80068d4:	0403      	lslcc	r3, r0, #16
 80068d6:	2000      	movcs	r0, #0
 80068d8:	2010      	movcc	r0, #16
 80068da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068de:	bf3c      	itt	cc
 80068e0:	021b      	lslcc	r3, r3, #8
 80068e2:	3008      	addcc	r0, #8
 80068e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e8:	bf3c      	itt	cc
 80068ea:	011b      	lslcc	r3, r3, #4
 80068ec:	3004      	addcc	r0, #4
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f2:	bf3c      	itt	cc
 80068f4:	009b      	lslcc	r3, r3, #2
 80068f6:	3002      	addcc	r0, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db05      	blt.n	8006908 <__hi0bits+0x3c>
 80068fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006900:	f100 0001 	add.w	r0, r0, #1
 8006904:	bf08      	it	eq
 8006906:	2020      	moveq	r0, #32
 8006908:	4770      	bx	lr

0800690a <__lo0bits>:
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	4602      	mov	r2, r0
 800690e:	f013 0007 	ands.w	r0, r3, #7
 8006912:	d00b      	beq.n	800692c <__lo0bits+0x22>
 8006914:	07d9      	lsls	r1, r3, #31
 8006916:	d421      	bmi.n	800695c <__lo0bits+0x52>
 8006918:	0798      	lsls	r0, r3, #30
 800691a:	bf49      	itett	mi
 800691c:	085b      	lsrmi	r3, r3, #1
 800691e:	089b      	lsrpl	r3, r3, #2
 8006920:	2001      	movmi	r0, #1
 8006922:	6013      	strmi	r3, [r2, #0]
 8006924:	bf5c      	itt	pl
 8006926:	6013      	strpl	r3, [r2, #0]
 8006928:	2002      	movpl	r0, #2
 800692a:	4770      	bx	lr
 800692c:	b299      	uxth	r1, r3
 800692e:	b909      	cbnz	r1, 8006934 <__lo0bits+0x2a>
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	2010      	movs	r0, #16
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	b909      	cbnz	r1, 800693c <__lo0bits+0x32>
 8006938:	3008      	adds	r0, #8
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	0719      	lsls	r1, r3, #28
 800693e:	bf04      	itt	eq
 8006940:	091b      	lsreq	r3, r3, #4
 8006942:	3004      	addeq	r0, #4
 8006944:	0799      	lsls	r1, r3, #30
 8006946:	bf04      	itt	eq
 8006948:	089b      	lsreq	r3, r3, #2
 800694a:	3002      	addeq	r0, #2
 800694c:	07d9      	lsls	r1, r3, #31
 800694e:	d403      	bmi.n	8006958 <__lo0bits+0x4e>
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	f100 0001 	add.w	r0, r0, #1
 8006956:	d003      	beq.n	8006960 <__lo0bits+0x56>
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4770      	bx	lr
 800695c:	2000      	movs	r0, #0
 800695e:	4770      	bx	lr
 8006960:	2020      	movs	r0, #32
 8006962:	4770      	bx	lr

08006964 <__i2b>:
 8006964:	b510      	push	{r4, lr}
 8006966:	460c      	mov	r4, r1
 8006968:	2101      	movs	r1, #1
 800696a:	f7ff ff07 	bl	800677c <_Balloc>
 800696e:	4602      	mov	r2, r0
 8006970:	b928      	cbnz	r0, 800697e <__i2b+0x1a>
 8006972:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <__i2b+0x24>)
 8006974:	4805      	ldr	r0, [pc, #20]	@ (800698c <__i2b+0x28>)
 8006976:	f240 1145 	movw	r1, #325	@ 0x145
 800697a:	f000 fcb5 	bl	80072e8 <__assert_func>
 800697e:	2301      	movs	r3, #1
 8006980:	6144      	str	r4, [r0, #20]
 8006982:	6103      	str	r3, [r0, #16]
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	08007a64 	.word	0x08007a64
 800698c:	08007a75 	.word	0x08007a75

08006990 <__multiply>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	4617      	mov	r7, r2
 8006996:	690a      	ldr	r2, [r1, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	bfa8      	it	ge
 800699e:	463b      	movge	r3, r7
 80069a0:	4689      	mov	r9, r1
 80069a2:	bfa4      	itt	ge
 80069a4:	460f      	movge	r7, r1
 80069a6:	4699      	movge	r9, r3
 80069a8:	693d      	ldr	r5, [r7, #16]
 80069aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	eb05 060a 	add.w	r6, r5, sl
 80069b6:	42b3      	cmp	r3, r6
 80069b8:	b085      	sub	sp, #20
 80069ba:	bfb8      	it	lt
 80069bc:	3101      	addlt	r1, #1
 80069be:	f7ff fedd 	bl	800677c <_Balloc>
 80069c2:	b930      	cbnz	r0, 80069d2 <__multiply+0x42>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b41      	ldr	r3, [pc, #260]	@ (8006acc <__multiply+0x13c>)
 80069c8:	4841      	ldr	r0, [pc, #260]	@ (8006ad0 <__multiply+0x140>)
 80069ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069ce:	f000 fc8b 	bl	80072e8 <__assert_func>
 80069d2:	f100 0414 	add.w	r4, r0, #20
 80069d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80069da:	4623      	mov	r3, r4
 80069dc:	2200      	movs	r2, #0
 80069de:	4573      	cmp	r3, lr
 80069e0:	d320      	bcc.n	8006a24 <__multiply+0x94>
 80069e2:	f107 0814 	add.w	r8, r7, #20
 80069e6:	f109 0114 	add.w	r1, r9, #20
 80069ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80069ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	1beb      	subs	r3, r5, r7
 80069f6:	3b15      	subs	r3, #21
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	3304      	adds	r3, #4
 80069fe:	3715      	adds	r7, #21
 8006a00:	42bd      	cmp	r5, r7
 8006a02:	bf38      	it	cc
 8006a04:	2304      	movcc	r3, #4
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	9b02      	ldr	r3, [sp, #8]
 8006a0a:	9103      	str	r1, [sp, #12]
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d80c      	bhi.n	8006a2a <__multiply+0x9a>
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	dd03      	ble.n	8006a1c <__multiply+0x8c>
 8006a14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d055      	beq.n	8006ac8 <__multiply+0x138>
 8006a1c:	6106      	str	r6, [r0, #16]
 8006a1e:	b005      	add	sp, #20
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	f843 2b04 	str.w	r2, [r3], #4
 8006a28:	e7d9      	b.n	80069de <__multiply+0x4e>
 8006a2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a2e:	f1ba 0f00 	cmp.w	sl, #0
 8006a32:	d01f      	beq.n	8006a74 <__multiply+0xe4>
 8006a34:	46c4      	mov	ip, r8
 8006a36:	46a1      	mov	r9, r4
 8006a38:	2700      	movs	r7, #0
 8006a3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8006a42:	fa1f fb82 	uxth.w	fp, r2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a4c:	443b      	add	r3, r7
 8006a4e:	f8d9 7000 	ldr.w	r7, [r9]
 8006a52:	0c12      	lsrs	r2, r2, #16
 8006a54:	0c3f      	lsrs	r7, r7, #16
 8006a56:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a64:	4565      	cmp	r5, ip
 8006a66:	f849 3b04 	str.w	r3, [r9], #4
 8006a6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006a6e:	d8e4      	bhi.n	8006a3a <__multiply+0xaa>
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	50e7      	str	r7, [r4, r3]
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a7a:	3104      	adds	r1, #4
 8006a7c:	f1b9 0f00 	cmp.w	r9, #0
 8006a80:	d020      	beq.n	8006ac4 <__multiply+0x134>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4647      	mov	r7, r8
 8006a86:	46a4      	mov	ip, r4
 8006a88:	f04f 0a00 	mov.w	sl, #0
 8006a8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006a90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006a94:	fb09 220b 	mla	r2, r9, fp, r2
 8006a98:	4452      	add	r2, sl
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa0:	f84c 3b04 	str.w	r3, [ip], #4
 8006aa4:	f857 3b04 	ldr.w	r3, [r7], #4
 8006aa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006aac:	f8bc 3000 	ldrh.w	r3, [ip]
 8006ab0:	fb09 330a 	mla	r3, r9, sl, r3
 8006ab4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006ab8:	42bd      	cmp	r5, r7
 8006aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006abe:	d8e5      	bhi.n	8006a8c <__multiply+0xfc>
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	50a3      	str	r3, [r4, r2]
 8006ac4:	3404      	adds	r4, #4
 8006ac6:	e79f      	b.n	8006a08 <__multiply+0x78>
 8006ac8:	3e01      	subs	r6, #1
 8006aca:	e7a1      	b.n	8006a10 <__multiply+0x80>
 8006acc:	08007a64 	.word	0x08007a64
 8006ad0:	08007a75 	.word	0x08007a75

08006ad4 <__pow5mult>:
 8006ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	4615      	mov	r5, r2
 8006ada:	f012 0203 	ands.w	r2, r2, #3
 8006ade:	4607      	mov	r7, r0
 8006ae0:	460e      	mov	r6, r1
 8006ae2:	d007      	beq.n	8006af4 <__pow5mult+0x20>
 8006ae4:	4c25      	ldr	r4, [pc, #148]	@ (8006b7c <__pow5mult+0xa8>)
 8006ae6:	3a01      	subs	r2, #1
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aee:	f7ff fea7 	bl	8006840 <__multadd>
 8006af2:	4606      	mov	r6, r0
 8006af4:	10ad      	asrs	r5, r5, #2
 8006af6:	d03d      	beq.n	8006b74 <__pow5mult+0xa0>
 8006af8:	69fc      	ldr	r4, [r7, #28]
 8006afa:	b97c      	cbnz	r4, 8006b1c <__pow5mult+0x48>
 8006afc:	2010      	movs	r0, #16
 8006afe:	f7ff fd87 	bl	8006610 <malloc>
 8006b02:	4602      	mov	r2, r0
 8006b04:	61f8      	str	r0, [r7, #28]
 8006b06:	b928      	cbnz	r0, 8006b14 <__pow5mult+0x40>
 8006b08:	4b1d      	ldr	r3, [pc, #116]	@ (8006b80 <__pow5mult+0xac>)
 8006b0a:	481e      	ldr	r0, [pc, #120]	@ (8006b84 <__pow5mult+0xb0>)
 8006b0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b10:	f000 fbea 	bl	80072e8 <__assert_func>
 8006b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b18:	6004      	str	r4, [r0, #0]
 8006b1a:	60c4      	str	r4, [r0, #12]
 8006b1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b24:	b94c      	cbnz	r4, 8006b3a <__pow5mult+0x66>
 8006b26:	f240 2171 	movw	r1, #625	@ 0x271
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f7ff ff1a 	bl	8006964 <__i2b>
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b36:	4604      	mov	r4, r0
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	07eb      	lsls	r3, r5, #31
 8006b40:	d50a      	bpl.n	8006b58 <__pow5mult+0x84>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4622      	mov	r2, r4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff22 	bl	8006990 <__multiply>
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4680      	mov	r8, r0
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff fe53 	bl	80067fc <_Bfree>
 8006b56:	4646      	mov	r6, r8
 8006b58:	106d      	asrs	r5, r5, #1
 8006b5a:	d00b      	beq.n	8006b74 <__pow5mult+0xa0>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	b938      	cbnz	r0, 8006b70 <__pow5mult+0x9c>
 8006b60:	4622      	mov	r2, r4
 8006b62:	4621      	mov	r1, r4
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff ff13 	bl	8006990 <__multiply>
 8006b6a:	6020      	str	r0, [r4, #0]
 8006b6c:	f8c0 9000 	str.w	r9, [r0]
 8006b70:	4604      	mov	r4, r0
 8006b72:	e7e4      	b.n	8006b3e <__pow5mult+0x6a>
 8006b74:	4630      	mov	r0, r6
 8006b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08007b28 	.word	0x08007b28
 8006b80:	080079f5 	.word	0x080079f5
 8006b84:	08007a75 	.word	0x08007a75

08006b88 <__lshift>:
 8006b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	6849      	ldr	r1, [r1, #4]
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	4607      	mov	r7, r0
 8006b9a:	4691      	mov	r9, r2
 8006b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba0:	f108 0601 	add.w	r6, r8, #1
 8006ba4:	42b3      	cmp	r3, r6
 8006ba6:	db0b      	blt.n	8006bc0 <__lshift+0x38>
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff fde7 	bl	800677c <_Balloc>
 8006bae:	4605      	mov	r5, r0
 8006bb0:	b948      	cbnz	r0, 8006bc6 <__lshift+0x3e>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	4b28      	ldr	r3, [pc, #160]	@ (8006c58 <__lshift+0xd0>)
 8006bb6:	4829      	ldr	r0, [pc, #164]	@ (8006c5c <__lshift+0xd4>)
 8006bb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bbc:	f000 fb94 	bl	80072e8 <__assert_func>
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__lshift+0x1c>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f100 0114 	add.w	r1, r0, #20
 8006bcc:	f100 0210 	add.w	r2, r0, #16
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	4553      	cmp	r3, sl
 8006bd4:	db33      	blt.n	8006c3e <__lshift+0xb6>
 8006bd6:	6920      	ldr	r0, [r4, #16]
 8006bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bdc:	f104 0314 	add.w	r3, r4, #20
 8006be0:	f019 091f 	ands.w	r9, r9, #31
 8006be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006be8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bec:	d02b      	beq.n	8006c46 <__lshift+0xbe>
 8006bee:	f1c9 0e20 	rsb	lr, r9, #32
 8006bf2:	468a      	mov	sl, r1
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	fa00 f009 	lsl.w	r0, r0, r9
 8006bfc:	4310      	orrs	r0, r2
 8006bfe:	f84a 0b04 	str.w	r0, [sl], #4
 8006c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c06:	459c      	cmp	ip, r3
 8006c08:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c0c:	d8f3      	bhi.n	8006bf6 <__lshift+0x6e>
 8006c0e:	ebac 0304 	sub.w	r3, ip, r4
 8006c12:	3b15      	subs	r3, #21
 8006c14:	f023 0303 	bic.w	r3, r3, #3
 8006c18:	3304      	adds	r3, #4
 8006c1a:	f104 0015 	add.w	r0, r4, #21
 8006c1e:	4560      	cmp	r0, ip
 8006c20:	bf88      	it	hi
 8006c22:	2304      	movhi	r3, #4
 8006c24:	50ca      	str	r2, [r1, r3]
 8006c26:	b10a      	cbz	r2, 8006c2c <__lshift+0xa4>
 8006c28:	f108 0602 	add.w	r6, r8, #2
 8006c2c:	3e01      	subs	r6, #1
 8006c2e:	4638      	mov	r0, r7
 8006c30:	612e      	str	r6, [r5, #16]
 8006c32:	4621      	mov	r1, r4
 8006c34:	f7ff fde2 	bl	80067fc <_Bfree>
 8006c38:	4628      	mov	r0, r5
 8006c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c42:	3301      	adds	r3, #1
 8006c44:	e7c5      	b.n	8006bd2 <__lshift+0x4a>
 8006c46:	3904      	subs	r1, #4
 8006c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c50:	459c      	cmp	ip, r3
 8006c52:	d8f9      	bhi.n	8006c48 <__lshift+0xc0>
 8006c54:	e7ea      	b.n	8006c2c <__lshift+0xa4>
 8006c56:	bf00      	nop
 8006c58:	08007a64 	.word	0x08007a64
 8006c5c:	08007a75 	.word	0x08007a75

08006c60 <__mcmp>:
 8006c60:	690a      	ldr	r2, [r1, #16]
 8006c62:	4603      	mov	r3, r0
 8006c64:	6900      	ldr	r0, [r0, #16]
 8006c66:	1a80      	subs	r0, r0, r2
 8006c68:	b530      	push	{r4, r5, lr}
 8006c6a:	d10e      	bne.n	8006c8a <__mcmp+0x2a>
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	3114      	adds	r1, #20
 8006c70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c80:	4295      	cmp	r5, r2
 8006c82:	d003      	beq.n	8006c8c <__mcmp+0x2c>
 8006c84:	d205      	bcs.n	8006c92 <__mcmp+0x32>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	bd30      	pop	{r4, r5, pc}
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d3f3      	bcc.n	8006c78 <__mcmp+0x18>
 8006c90:	e7fb      	b.n	8006c8a <__mcmp+0x2a>
 8006c92:	2001      	movs	r0, #1
 8006c94:	e7f9      	b.n	8006c8a <__mcmp+0x2a>
	...

08006c98 <__mdiff>:
 8006c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	4689      	mov	r9, r1
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4648      	mov	r0, r9
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	f7ff ffdb 	bl	8006c60 <__mcmp>
 8006caa:	1e05      	subs	r5, r0, #0
 8006cac:	d112      	bne.n	8006cd4 <__mdiff+0x3c>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff fd63 	bl	800677c <_Balloc>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	b928      	cbnz	r0, 8006cc6 <__mdiff+0x2e>
 8006cba:	4b3f      	ldr	r3, [pc, #252]	@ (8006db8 <__mdiff+0x120>)
 8006cbc:	f240 2137 	movw	r1, #567	@ 0x237
 8006cc0:	483e      	ldr	r0, [pc, #248]	@ (8006dbc <__mdiff+0x124>)
 8006cc2:	f000 fb11 	bl	80072e8 <__assert_func>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ccc:	4610      	mov	r0, r2
 8006cce:	b003      	add	sp, #12
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	bfbc      	itt	lt
 8006cd6:	464b      	movlt	r3, r9
 8006cd8:	46a1      	movlt	r9, r4
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ce0:	bfba      	itte	lt
 8006ce2:	461c      	movlt	r4, r3
 8006ce4:	2501      	movlt	r5, #1
 8006ce6:	2500      	movge	r5, #0
 8006ce8:	f7ff fd48 	bl	800677c <_Balloc>
 8006cec:	4602      	mov	r2, r0
 8006cee:	b918      	cbnz	r0, 8006cf8 <__mdiff+0x60>
 8006cf0:	4b31      	ldr	r3, [pc, #196]	@ (8006db8 <__mdiff+0x120>)
 8006cf2:	f240 2145 	movw	r1, #581	@ 0x245
 8006cf6:	e7e3      	b.n	8006cc0 <__mdiff+0x28>
 8006cf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006cfc:	6926      	ldr	r6, [r4, #16]
 8006cfe:	60c5      	str	r5, [r0, #12]
 8006d00:	f109 0310 	add.w	r3, r9, #16
 8006d04:	f109 0514 	add.w	r5, r9, #20
 8006d08:	f104 0e14 	add.w	lr, r4, #20
 8006d0c:	f100 0b14 	add.w	fp, r0, #20
 8006d10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	46d9      	mov	r9, fp
 8006d1c:	f04f 0c00 	mov.w	ip, #0
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	fa1f f38a 	uxth.w	r3, sl
 8006d30:	4619      	mov	r1, r3
 8006d32:	b283      	uxth	r3, r0
 8006d34:	1acb      	subs	r3, r1, r3
 8006d36:	0c00      	lsrs	r0, r0, #16
 8006d38:	4463      	add	r3, ip
 8006d3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d48:	4576      	cmp	r6, lr
 8006d4a:	f849 3b04 	str.w	r3, [r9], #4
 8006d4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d52:	d8e5      	bhi.n	8006d20 <__mdiff+0x88>
 8006d54:	1b33      	subs	r3, r6, r4
 8006d56:	3b15      	subs	r3, #21
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	3415      	adds	r4, #21
 8006d5e:	3304      	adds	r3, #4
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	bf38      	it	cc
 8006d64:	2304      	movcc	r3, #4
 8006d66:	441d      	add	r5, r3
 8006d68:	445b      	add	r3, fp
 8006d6a:	461e      	mov	r6, r3
 8006d6c:	462c      	mov	r4, r5
 8006d6e:	4544      	cmp	r4, r8
 8006d70:	d30e      	bcc.n	8006d90 <__mdiff+0xf8>
 8006d72:	f108 0103 	add.w	r1, r8, #3
 8006d76:	1b49      	subs	r1, r1, r5
 8006d78:	f021 0103 	bic.w	r1, r1, #3
 8006d7c:	3d03      	subs	r5, #3
 8006d7e:	45a8      	cmp	r8, r5
 8006d80:	bf38      	it	cc
 8006d82:	2100      	movcc	r1, #0
 8006d84:	440b      	add	r3, r1
 8006d86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d8a:	b191      	cbz	r1, 8006db2 <__mdiff+0x11a>
 8006d8c:	6117      	str	r7, [r2, #16]
 8006d8e:	e79d      	b.n	8006ccc <__mdiff+0x34>
 8006d90:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d94:	46e6      	mov	lr, ip
 8006d96:	0c08      	lsrs	r0, r1, #16
 8006d98:	fa1c fc81 	uxtah	ip, ip, r1
 8006d9c:	4471      	add	r1, lr
 8006d9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006da2:	b289      	uxth	r1, r1
 8006da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006da8:	f846 1b04 	str.w	r1, [r6], #4
 8006dac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006db0:	e7dd      	b.n	8006d6e <__mdiff+0xd6>
 8006db2:	3f01      	subs	r7, #1
 8006db4:	e7e7      	b.n	8006d86 <__mdiff+0xee>
 8006db6:	bf00      	nop
 8006db8:	08007a64 	.word	0x08007a64
 8006dbc:	08007a75 	.word	0x08007a75

08006dc0 <__d2b>:
 8006dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	ec59 8b10 	vmov	r8, r9, d0
 8006dcc:	4616      	mov	r6, r2
 8006dce:	f7ff fcd5 	bl	800677c <_Balloc>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	b930      	cbnz	r0, 8006de4 <__d2b+0x24>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b23      	ldr	r3, [pc, #140]	@ (8006e68 <__d2b+0xa8>)
 8006dda:	4824      	ldr	r0, [pc, #144]	@ (8006e6c <__d2b+0xac>)
 8006ddc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006de0:	f000 fa82 	bl	80072e8 <__assert_func>
 8006de4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dec:	b10d      	cbz	r5, 8006df2 <__d2b+0x32>
 8006dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	f1b8 0300 	subs.w	r3, r8, #0
 8006df8:	d023      	beq.n	8006e42 <__d2b+0x82>
 8006dfa:	4668      	mov	r0, sp
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	f7ff fd84 	bl	800690a <__lo0bits>
 8006e02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e06:	b1d0      	cbz	r0, 8006e3e <__d2b+0x7e>
 8006e08:	f1c0 0320 	rsb	r3, r0, #32
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	430b      	orrs	r3, r1
 8006e12:	40c2      	lsrs	r2, r0
 8006e14:	6163      	str	r3, [r4, #20]
 8006e16:	9201      	str	r2, [sp, #4]
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	61a3      	str	r3, [r4, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf0c      	ite	eq
 8006e20:	2201      	moveq	r2, #1
 8006e22:	2202      	movne	r2, #2
 8006e24:	6122      	str	r2, [r4, #16]
 8006e26:	b1a5      	cbz	r5, 8006e52 <__d2b+0x92>
 8006e28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e2c:	4405      	add	r5, r0
 8006e2e:	603d      	str	r5, [r7, #0]
 8006e30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e34:	6030      	str	r0, [r6, #0]
 8006e36:	4620      	mov	r0, r4
 8006e38:	b003      	add	sp, #12
 8006e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e3e:	6161      	str	r1, [r4, #20]
 8006e40:	e7ea      	b.n	8006e18 <__d2b+0x58>
 8006e42:	a801      	add	r0, sp, #4
 8006e44:	f7ff fd61 	bl	800690a <__lo0bits>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	3020      	adds	r0, #32
 8006e4e:	2201      	movs	r2, #1
 8006e50:	e7e8      	b.n	8006e24 <__d2b+0x64>
 8006e52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e5a:	6038      	str	r0, [r7, #0]
 8006e5c:	6918      	ldr	r0, [r3, #16]
 8006e5e:	f7ff fd35 	bl	80068cc <__hi0bits>
 8006e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e66:	e7e5      	b.n	8006e34 <__d2b+0x74>
 8006e68:	08007a64 	.word	0x08007a64
 8006e6c:	08007a75 	.word	0x08007a75

08006e70 <__ssputs_r>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	688e      	ldr	r6, [r1, #8]
 8006e76:	461f      	mov	r7, r3
 8006e78:	42be      	cmp	r6, r7
 8006e7a:	680b      	ldr	r3, [r1, #0]
 8006e7c:	4682      	mov	sl, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	4690      	mov	r8, r2
 8006e82:	d82d      	bhi.n	8006ee0 <__ssputs_r+0x70>
 8006e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e8c:	d026      	beq.n	8006edc <__ssputs_r+0x6c>
 8006e8e:	6965      	ldr	r5, [r4, #20]
 8006e90:	6909      	ldr	r1, [r1, #16]
 8006e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e96:	eba3 0901 	sub.w	r9, r3, r1
 8006e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e9e:	1c7b      	adds	r3, r7, #1
 8006ea0:	444b      	add	r3, r9
 8006ea2:	106d      	asrs	r5, r5, #1
 8006ea4:	429d      	cmp	r5, r3
 8006ea6:	bf38      	it	cc
 8006ea8:	461d      	movcc	r5, r3
 8006eaa:	0553      	lsls	r3, r2, #21
 8006eac:	d527      	bpl.n	8006efe <__ssputs_r+0x8e>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7ff fbd8 	bl	8006664 <_malloc_r>
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	b360      	cbz	r0, 8006f12 <__ssputs_r+0xa2>
 8006eb8:	6921      	ldr	r1, [r4, #16]
 8006eba:	464a      	mov	r2, r9
 8006ebc:	f000 fa06 	bl	80072cc <memcpy>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	6126      	str	r6, [r4, #16]
 8006ece:	6165      	str	r5, [r4, #20]
 8006ed0:	444e      	add	r6, r9
 8006ed2:	eba5 0509 	sub.w	r5, r5, r9
 8006ed6:	6026      	str	r6, [r4, #0]
 8006ed8:	60a5      	str	r5, [r4, #8]
 8006eda:	463e      	mov	r6, r7
 8006edc:	42be      	cmp	r6, r7
 8006ede:	d900      	bls.n	8006ee2 <__ssputs_r+0x72>
 8006ee0:	463e      	mov	r6, r7
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	f000 f9c6 	bl	8007278 <memmove>
 8006eec:	68a3      	ldr	r3, [r4, #8]
 8006eee:	1b9b      	subs	r3, r3, r6
 8006ef0:	60a3      	str	r3, [r4, #8]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	4433      	add	r3, r6
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	462a      	mov	r2, r5
 8006f00:	f000 fa36 	bl	8007370 <_realloc_r>
 8006f04:	4606      	mov	r6, r0
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d1e0      	bne.n	8006ecc <__ssputs_r+0x5c>
 8006f0a:	6921      	ldr	r1, [r4, #16]
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	f7ff fb35 	bl	800657c <_free_r>
 8006f12:	230c      	movs	r3, #12
 8006f14:	f8ca 3000 	str.w	r3, [sl]
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e7e9      	b.n	8006efa <__ssputs_r+0x8a>
	...

08006f28 <_svfiprintf_r>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	4698      	mov	r8, r3
 8006f2e:	898b      	ldrh	r3, [r1, #12]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	b09d      	sub	sp, #116	@ 0x74
 8006f34:	4607      	mov	r7, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	4614      	mov	r4, r2
 8006f3a:	d510      	bpl.n	8006f5e <_svfiprintf_r+0x36>
 8006f3c:	690b      	ldr	r3, [r1, #16]
 8006f3e:	b973      	cbnz	r3, 8006f5e <_svfiprintf_r+0x36>
 8006f40:	2140      	movs	r1, #64	@ 0x40
 8006f42:	f7ff fb8f 	bl	8006664 <_malloc_r>
 8006f46:	6028      	str	r0, [r5, #0]
 8006f48:	6128      	str	r0, [r5, #16]
 8006f4a:	b930      	cbnz	r0, 8006f5a <_svfiprintf_r+0x32>
 8006f4c:	230c      	movs	r3, #12
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	b01d      	add	sp, #116	@ 0x74
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	2340      	movs	r3, #64	@ 0x40
 8006f5c:	616b      	str	r3, [r5, #20]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f62:	2320      	movs	r3, #32
 8006f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f6c:	2330      	movs	r3, #48	@ 0x30
 8006f6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800710c <_svfiprintf_r+0x1e4>
 8006f72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f76:	f04f 0901 	mov.w	r9, #1
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f82:	b10a      	cbz	r2, 8006f88 <_svfiprintf_r+0x60>
 8006f84:	2a25      	cmp	r2, #37	@ 0x25
 8006f86:	d1f9      	bne.n	8006f7c <_svfiprintf_r+0x54>
 8006f88:	ebba 0b04 	subs.w	fp, sl, r4
 8006f8c:	d00b      	beq.n	8006fa6 <_svfiprintf_r+0x7e>
 8006f8e:	465b      	mov	r3, fp
 8006f90:	4622      	mov	r2, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7ff ff6b 	bl	8006e70 <__ssputs_r>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f000 80a7 	beq.w	80070ee <_svfiprintf_r+0x1c6>
 8006fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa2:	445a      	add	r2, fp
 8006fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 809f 	beq.w	80070ee <_svfiprintf_r+0x1c6>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fba:	f10a 0a01 	add.w	sl, sl, #1
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9307      	str	r3, [sp, #28]
 8006fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2205      	movs	r2, #5
 8006fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd0:	484e      	ldr	r0, [pc, #312]	@ (800710c <_svfiprintf_r+0x1e4>)
 8006fd2:	f7f9 f935 	bl	8000240 <memchr>
 8006fd6:	9a04      	ldr	r2, [sp, #16]
 8006fd8:	b9d8      	cbnz	r0, 8007012 <_svfiprintf_r+0xea>
 8006fda:	06d0      	lsls	r0, r2, #27
 8006fdc:	bf44      	itt	mi
 8006fde:	2320      	movmi	r3, #32
 8006fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fe4:	0711      	lsls	r1, r2, #28
 8006fe6:	bf44      	itt	mi
 8006fe8:	232b      	movmi	r3, #43	@ 0x2b
 8006fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ff4:	d015      	beq.n	8007022 <_svfiprintf_r+0xfa>
 8006ff6:	9a07      	ldr	r2, [sp, #28]
 8006ff8:	4654      	mov	r4, sl
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	f04f 0c0a 	mov.w	ip, #10
 8007000:	4621      	mov	r1, r4
 8007002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007006:	3b30      	subs	r3, #48	@ 0x30
 8007008:	2b09      	cmp	r3, #9
 800700a:	d94b      	bls.n	80070a4 <_svfiprintf_r+0x17c>
 800700c:	b1b0      	cbz	r0, 800703c <_svfiprintf_r+0x114>
 800700e:	9207      	str	r2, [sp, #28]
 8007010:	e014      	b.n	800703c <_svfiprintf_r+0x114>
 8007012:	eba0 0308 	sub.w	r3, r0, r8
 8007016:	fa09 f303 	lsl.w	r3, r9, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	46a2      	mov	sl, r4
 8007020:	e7d2      	b.n	8006fc8 <_svfiprintf_r+0xa0>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	1d19      	adds	r1, r3, #4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfbb      	ittet	lt
 800702e:	425b      	neglt	r3, r3
 8007030:	f042 0202 	orrlt.w	r2, r2, #2
 8007034:	9307      	strge	r3, [sp, #28]
 8007036:	9307      	strlt	r3, [sp, #28]
 8007038:	bfb8      	it	lt
 800703a:	9204      	strlt	r2, [sp, #16]
 800703c:	7823      	ldrb	r3, [r4, #0]
 800703e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007040:	d10a      	bne.n	8007058 <_svfiprintf_r+0x130>
 8007042:	7863      	ldrb	r3, [r4, #1]
 8007044:	2b2a      	cmp	r3, #42	@ 0x2a
 8007046:	d132      	bne.n	80070ae <_svfiprintf_r+0x186>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	9203      	str	r2, [sp, #12]
 8007050:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007054:	3402      	adds	r4, #2
 8007056:	9305      	str	r3, [sp, #20]
 8007058:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800711c <_svfiprintf_r+0x1f4>
 800705c:	7821      	ldrb	r1, [r4, #0]
 800705e:	2203      	movs	r2, #3
 8007060:	4650      	mov	r0, sl
 8007062:	f7f9 f8ed 	bl	8000240 <memchr>
 8007066:	b138      	cbz	r0, 8007078 <_svfiprintf_r+0x150>
 8007068:	9b04      	ldr	r3, [sp, #16]
 800706a:	eba0 000a 	sub.w	r0, r0, sl
 800706e:	2240      	movs	r2, #64	@ 0x40
 8007070:	4082      	lsls	r2, r0
 8007072:	4313      	orrs	r3, r2
 8007074:	3401      	adds	r4, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707c:	4824      	ldr	r0, [pc, #144]	@ (8007110 <_svfiprintf_r+0x1e8>)
 800707e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007082:	2206      	movs	r2, #6
 8007084:	f7f9 f8dc 	bl	8000240 <memchr>
 8007088:	2800      	cmp	r0, #0
 800708a:	d036      	beq.n	80070fa <_svfiprintf_r+0x1d2>
 800708c:	4b21      	ldr	r3, [pc, #132]	@ (8007114 <_svfiprintf_r+0x1ec>)
 800708e:	bb1b      	cbnz	r3, 80070d8 <_svfiprintf_r+0x1b0>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	3307      	adds	r3, #7
 8007094:	f023 0307 	bic.w	r3, r3, #7
 8007098:	3308      	adds	r3, #8
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709e:	4433      	add	r3, r6
 80070a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a2:	e76a      	b.n	8006f7a <_svfiprintf_r+0x52>
 80070a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070a8:	460c      	mov	r4, r1
 80070aa:	2001      	movs	r0, #1
 80070ac:	e7a8      	b.n	8007000 <_svfiprintf_r+0xd8>
 80070ae:	2300      	movs	r3, #0
 80070b0:	3401      	adds	r4, #1
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	4619      	mov	r1, r3
 80070b6:	f04f 0c0a 	mov.w	ip, #10
 80070ba:	4620      	mov	r0, r4
 80070bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c0:	3a30      	subs	r2, #48	@ 0x30
 80070c2:	2a09      	cmp	r2, #9
 80070c4:	d903      	bls.n	80070ce <_svfiprintf_r+0x1a6>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0c6      	beq.n	8007058 <_svfiprintf_r+0x130>
 80070ca:	9105      	str	r1, [sp, #20]
 80070cc:	e7c4      	b.n	8007058 <_svfiprintf_r+0x130>
 80070ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80070d2:	4604      	mov	r4, r0
 80070d4:	2301      	movs	r3, #1
 80070d6:	e7f0      	b.n	80070ba <_svfiprintf_r+0x192>
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	462a      	mov	r2, r5
 80070de:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <_svfiprintf_r+0x1f0>)
 80070e0:	a904      	add	r1, sp, #16
 80070e2:	4638      	mov	r0, r7
 80070e4:	f7fd ff14 	bl	8004f10 <_printf_float>
 80070e8:	1c42      	adds	r2, r0, #1
 80070ea:	4606      	mov	r6, r0
 80070ec:	d1d6      	bne.n	800709c <_svfiprintf_r+0x174>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	065b      	lsls	r3, r3, #25
 80070f2:	f53f af2d 	bmi.w	8006f50 <_svfiprintf_r+0x28>
 80070f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f8:	e72c      	b.n	8006f54 <_svfiprintf_r+0x2c>
 80070fa:	ab03      	add	r3, sp, #12
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	462a      	mov	r2, r5
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <_svfiprintf_r+0x1f0>)
 8007102:	a904      	add	r1, sp, #16
 8007104:	4638      	mov	r0, r7
 8007106:	f7fe f98b 	bl	8005420 <_printf_i>
 800710a:	e7ed      	b.n	80070e8 <_svfiprintf_r+0x1c0>
 800710c:	08007ace 	.word	0x08007ace
 8007110:	08007ad8 	.word	0x08007ad8
 8007114:	08004f11 	.word	0x08004f11
 8007118:	08006e71 	.word	0x08006e71
 800711c:	08007ad4 	.word	0x08007ad4

08007120 <__sflush_r>:
 8007120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	0716      	lsls	r6, r2, #28
 800712a:	4605      	mov	r5, r0
 800712c:	460c      	mov	r4, r1
 800712e:	d454      	bmi.n	80071da <__sflush_r+0xba>
 8007130:	684b      	ldr	r3, [r1, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dc02      	bgt.n	800713c <__sflush_r+0x1c>
 8007136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd48      	ble.n	80071ce <__sflush_r+0xae>
 800713c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800713e:	2e00      	cmp	r6, #0
 8007140:	d045      	beq.n	80071ce <__sflush_r+0xae>
 8007142:	2300      	movs	r3, #0
 8007144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007148:	682f      	ldr	r7, [r5, #0]
 800714a:	6a21      	ldr	r1, [r4, #32]
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	d030      	beq.n	80071b2 <__sflush_r+0x92>
 8007150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	0759      	lsls	r1, r3, #29
 8007156:	d505      	bpl.n	8007164 <__sflush_r+0x44>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800715e:	b10b      	cbz	r3, 8007164 <__sflush_r+0x44>
 8007160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	2300      	movs	r3, #0
 8007166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007168:	6a21      	ldr	r1, [r4, #32]
 800716a:	4628      	mov	r0, r5
 800716c:	47b0      	blx	r6
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	d106      	bne.n	8007182 <__sflush_r+0x62>
 8007174:	6829      	ldr	r1, [r5, #0]
 8007176:	291d      	cmp	r1, #29
 8007178:	d82b      	bhi.n	80071d2 <__sflush_r+0xb2>
 800717a:	4a2a      	ldr	r2, [pc, #168]	@ (8007224 <__sflush_r+0x104>)
 800717c:	40ca      	lsrs	r2, r1
 800717e:	07d6      	lsls	r6, r2, #31
 8007180:	d527      	bpl.n	80071d2 <__sflush_r+0xb2>
 8007182:	2200      	movs	r2, #0
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	04d9      	lsls	r1, r3, #19
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	d504      	bpl.n	8007198 <__sflush_r+0x78>
 800718e:	1c42      	adds	r2, r0, #1
 8007190:	d101      	bne.n	8007196 <__sflush_r+0x76>
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	b903      	cbnz	r3, 8007198 <__sflush_r+0x78>
 8007196:	6560      	str	r0, [r4, #84]	@ 0x54
 8007198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800719a:	602f      	str	r7, [r5, #0]
 800719c:	b1b9      	cbz	r1, 80071ce <__sflush_r+0xae>
 800719e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071a2:	4299      	cmp	r1, r3
 80071a4:	d002      	beq.n	80071ac <__sflush_r+0x8c>
 80071a6:	4628      	mov	r0, r5
 80071a8:	f7ff f9e8 	bl	800657c <_free_r>
 80071ac:	2300      	movs	r3, #0
 80071ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80071b0:	e00d      	b.n	80071ce <__sflush_r+0xae>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b0      	blx	r6
 80071b8:	4602      	mov	r2, r0
 80071ba:	1c50      	adds	r0, r2, #1
 80071bc:	d1c9      	bne.n	8007152 <__sflush_r+0x32>
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0c6      	beq.n	8007152 <__sflush_r+0x32>
 80071c4:	2b1d      	cmp	r3, #29
 80071c6:	d001      	beq.n	80071cc <__sflush_r+0xac>
 80071c8:	2b16      	cmp	r3, #22
 80071ca:	d11e      	bne.n	800720a <__sflush_r+0xea>
 80071cc:	602f      	str	r7, [r5, #0]
 80071ce:	2000      	movs	r0, #0
 80071d0:	e022      	b.n	8007218 <__sflush_r+0xf8>
 80071d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071d6:	b21b      	sxth	r3, r3
 80071d8:	e01b      	b.n	8007212 <__sflush_r+0xf2>
 80071da:	690f      	ldr	r7, [r1, #16]
 80071dc:	2f00      	cmp	r7, #0
 80071de:	d0f6      	beq.n	80071ce <__sflush_r+0xae>
 80071e0:	0793      	lsls	r3, r2, #30
 80071e2:	680e      	ldr	r6, [r1, #0]
 80071e4:	bf08      	it	eq
 80071e6:	694b      	ldreq	r3, [r1, #20]
 80071e8:	600f      	str	r7, [r1, #0]
 80071ea:	bf18      	it	ne
 80071ec:	2300      	movne	r3, #0
 80071ee:	eba6 0807 	sub.w	r8, r6, r7
 80071f2:	608b      	str	r3, [r1, #8]
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	dde9      	ble.n	80071ce <__sflush_r+0xae>
 80071fa:	6a21      	ldr	r1, [r4, #32]
 80071fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80071fe:	4643      	mov	r3, r8
 8007200:	463a      	mov	r2, r7
 8007202:	4628      	mov	r0, r5
 8007204:	47b0      	blx	r6
 8007206:	2800      	cmp	r0, #0
 8007208:	dc08      	bgt.n	800721c <__sflush_r+0xfc>
 800720a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	4407      	add	r7, r0
 800721e:	eba8 0800 	sub.w	r8, r8, r0
 8007222:	e7e7      	b.n	80071f4 <__sflush_r+0xd4>
 8007224:	20400001 	.word	0x20400001

08007228 <_fflush_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	690b      	ldr	r3, [r1, #16]
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b913      	cbnz	r3, 8007238 <_fflush_r+0x10>
 8007232:	2500      	movs	r5, #0
 8007234:	4628      	mov	r0, r5
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	b118      	cbz	r0, 8007242 <_fflush_r+0x1a>
 800723a:	6a03      	ldr	r3, [r0, #32]
 800723c:	b90b      	cbnz	r3, 8007242 <_fflush_r+0x1a>
 800723e:	f7fe fa99 	bl	8005774 <__sinit>
 8007242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0f3      	beq.n	8007232 <_fflush_r+0xa>
 800724a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800724c:	07d0      	lsls	r0, r2, #31
 800724e:	d404      	bmi.n	800725a <_fflush_r+0x32>
 8007250:	0599      	lsls	r1, r3, #22
 8007252:	d402      	bmi.n	800725a <_fflush_r+0x32>
 8007254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007256:	f7fe fba6 	bl	80059a6 <__retarget_lock_acquire_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	4621      	mov	r1, r4
 800725e:	f7ff ff5f 	bl	8007120 <__sflush_r>
 8007262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007264:	07da      	lsls	r2, r3, #31
 8007266:	4605      	mov	r5, r0
 8007268:	d4e4      	bmi.n	8007234 <_fflush_r+0xc>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	059b      	lsls	r3, r3, #22
 800726e:	d4e1      	bmi.n	8007234 <_fflush_r+0xc>
 8007270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007272:	f7fe fb99 	bl	80059a8 <__retarget_lock_release_recursive>
 8007276:	e7dd      	b.n	8007234 <_fflush_r+0xc>

08007278 <memmove>:
 8007278:	4288      	cmp	r0, r1
 800727a:	b510      	push	{r4, lr}
 800727c:	eb01 0402 	add.w	r4, r1, r2
 8007280:	d902      	bls.n	8007288 <memmove+0x10>
 8007282:	4284      	cmp	r4, r0
 8007284:	4623      	mov	r3, r4
 8007286:	d807      	bhi.n	8007298 <memmove+0x20>
 8007288:	1e43      	subs	r3, r0, #1
 800728a:	42a1      	cmp	r1, r4
 800728c:	d008      	beq.n	80072a0 <memmove+0x28>
 800728e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007296:	e7f8      	b.n	800728a <memmove+0x12>
 8007298:	4402      	add	r2, r0
 800729a:	4601      	mov	r1, r0
 800729c:	428a      	cmp	r2, r1
 800729e:	d100      	bne.n	80072a2 <memmove+0x2a>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072aa:	e7f7      	b.n	800729c <memmove+0x24>

080072ac <_sbrk_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d06      	ldr	r5, [pc, #24]	@ (80072c8 <_sbrk_r+0x1c>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7f9 ff1a 	bl	80010f0 <_sbrk>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_sbrk_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_sbrk_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	20000490 	.word	0x20000490

080072cc <memcpy>:
 80072cc:	440a      	add	r2, r1
 80072ce:	4291      	cmp	r1, r2
 80072d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d4:	d100      	bne.n	80072d8 <memcpy+0xc>
 80072d6:	4770      	bx	lr
 80072d8:	b510      	push	{r4, lr}
 80072da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e2:	4291      	cmp	r1, r2
 80072e4:	d1f9      	bne.n	80072da <memcpy+0xe>
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <__assert_func>:
 80072e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ea:	4614      	mov	r4, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <__assert_func+0x2c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4605      	mov	r5, r0
 80072f4:	68d8      	ldr	r0, [r3, #12]
 80072f6:	b14c      	cbz	r4, 800730c <__assert_func+0x24>
 80072f8:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <__assert_func+0x30>)
 80072fa:	9100      	str	r1, [sp, #0]
 80072fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007300:	4906      	ldr	r1, [pc, #24]	@ (800731c <__assert_func+0x34>)
 8007302:	462b      	mov	r3, r5
 8007304:	f000 f870 	bl	80073e8 <fiprintf>
 8007308:	f000 f880 	bl	800740c <abort>
 800730c:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <__assert_func+0x38>)
 800730e:	461c      	mov	r4, r3
 8007310:	e7f3      	b.n	80072fa <__assert_func+0x12>
 8007312:	bf00      	nop
 8007314:	20000018 	.word	0x20000018
 8007318:	08007ae9 	.word	0x08007ae9
 800731c:	08007af6 	.word	0x08007af6
 8007320:	08007b24 	.word	0x08007b24

08007324 <_calloc_r>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	fba1 5402 	umull	r5, r4, r1, r2
 800732a:	b934      	cbnz	r4, 800733a <_calloc_r+0x16>
 800732c:	4629      	mov	r1, r5
 800732e:	f7ff f999 	bl	8006664 <_malloc_r>
 8007332:	4606      	mov	r6, r0
 8007334:	b928      	cbnz	r0, 8007342 <_calloc_r+0x1e>
 8007336:	4630      	mov	r0, r6
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	220c      	movs	r2, #12
 800733c:	6002      	str	r2, [r0, #0]
 800733e:	2600      	movs	r6, #0
 8007340:	e7f9      	b.n	8007336 <_calloc_r+0x12>
 8007342:	462a      	mov	r2, r5
 8007344:	4621      	mov	r1, r4
 8007346:	f7fe fab0 	bl	80058aa <memset>
 800734a:	e7f4      	b.n	8007336 <_calloc_r+0x12>

0800734c <__ascii_mbtowc>:
 800734c:	b082      	sub	sp, #8
 800734e:	b901      	cbnz	r1, 8007352 <__ascii_mbtowc+0x6>
 8007350:	a901      	add	r1, sp, #4
 8007352:	b142      	cbz	r2, 8007366 <__ascii_mbtowc+0x1a>
 8007354:	b14b      	cbz	r3, 800736a <__ascii_mbtowc+0x1e>
 8007356:	7813      	ldrb	r3, [r2, #0]
 8007358:	600b      	str	r3, [r1, #0]
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	1e10      	subs	r0, r2, #0
 800735e:	bf18      	it	ne
 8007360:	2001      	movne	r0, #1
 8007362:	b002      	add	sp, #8
 8007364:	4770      	bx	lr
 8007366:	4610      	mov	r0, r2
 8007368:	e7fb      	b.n	8007362 <__ascii_mbtowc+0x16>
 800736a:	f06f 0001 	mvn.w	r0, #1
 800736e:	e7f8      	b.n	8007362 <__ascii_mbtowc+0x16>

08007370 <_realloc_r>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	4607      	mov	r7, r0
 8007376:	4614      	mov	r4, r2
 8007378:	460d      	mov	r5, r1
 800737a:	b921      	cbnz	r1, 8007386 <_realloc_r+0x16>
 800737c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4611      	mov	r1, r2
 8007382:	f7ff b96f 	b.w	8006664 <_malloc_r>
 8007386:	b92a      	cbnz	r2, 8007394 <_realloc_r+0x24>
 8007388:	f7ff f8f8 	bl	800657c <_free_r>
 800738c:	4625      	mov	r5, r4
 800738e:	4628      	mov	r0, r5
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	f000 f841 	bl	800741a <_malloc_usable_size_r>
 8007398:	4284      	cmp	r4, r0
 800739a:	4606      	mov	r6, r0
 800739c:	d802      	bhi.n	80073a4 <_realloc_r+0x34>
 800739e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a2:	d8f4      	bhi.n	800738e <_realloc_r+0x1e>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7ff f95c 	bl	8006664 <_malloc_r>
 80073ac:	4680      	mov	r8, r0
 80073ae:	b908      	cbnz	r0, 80073b4 <_realloc_r+0x44>
 80073b0:	4645      	mov	r5, r8
 80073b2:	e7ec      	b.n	800738e <_realloc_r+0x1e>
 80073b4:	42b4      	cmp	r4, r6
 80073b6:	4622      	mov	r2, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	bf28      	it	cs
 80073bc:	4632      	movcs	r2, r6
 80073be:	f7ff ff85 	bl	80072cc <memcpy>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7ff f8d9 	bl	800657c <_free_r>
 80073ca:	e7f1      	b.n	80073b0 <_realloc_r+0x40>

080073cc <__ascii_wctomb>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	b141      	cbz	r1, 80073e4 <__ascii_wctomb+0x18>
 80073d2:	2aff      	cmp	r2, #255	@ 0xff
 80073d4:	d904      	bls.n	80073e0 <__ascii_wctomb+0x14>
 80073d6:	228a      	movs	r2, #138	@ 0x8a
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	4770      	bx	lr
 80073e0:	700a      	strb	r2, [r1, #0]
 80073e2:	2001      	movs	r0, #1
 80073e4:	4770      	bx	lr
	...

080073e8 <fiprintf>:
 80073e8:	b40e      	push	{r1, r2, r3}
 80073ea:	b503      	push	{r0, r1, lr}
 80073ec:	4601      	mov	r1, r0
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	4805      	ldr	r0, [pc, #20]	@ (8007408 <fiprintf+0x20>)
 80073f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	f000 f83f 	bl	800747c <_vfiprintf_r>
 80073fe:	b002      	add	sp, #8
 8007400:	f85d eb04 	ldr.w	lr, [sp], #4
 8007404:	b003      	add	sp, #12
 8007406:	4770      	bx	lr
 8007408:	20000018 	.word	0x20000018

0800740c <abort>:
 800740c:	b508      	push	{r3, lr}
 800740e:	2006      	movs	r0, #6
 8007410:	f000 fa08 	bl	8007824 <raise>
 8007414:	2001      	movs	r0, #1
 8007416:	f7f9 fdf2 	bl	8000ffe <_exit>

0800741a <_malloc_usable_size_r>:
 800741a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741e:	1f18      	subs	r0, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfbc      	itt	lt
 8007424:	580b      	ldrlt	r3, [r1, r0]
 8007426:	18c0      	addlt	r0, r0, r3
 8007428:	4770      	bx	lr

0800742a <__sfputc_r>:
 800742a:	6893      	ldr	r3, [r2, #8]
 800742c:	3b01      	subs	r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	b410      	push	{r4}
 8007432:	6093      	str	r3, [r2, #8]
 8007434:	da08      	bge.n	8007448 <__sfputc_r+0x1e>
 8007436:	6994      	ldr	r4, [r2, #24]
 8007438:	42a3      	cmp	r3, r4
 800743a:	db01      	blt.n	8007440 <__sfputc_r+0x16>
 800743c:	290a      	cmp	r1, #10
 800743e:	d103      	bne.n	8007448 <__sfputc_r+0x1e>
 8007440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007444:	f000 b932 	b.w	80076ac <__swbuf_r>
 8007448:	6813      	ldr	r3, [r2, #0]
 800744a:	1c58      	adds	r0, r3, #1
 800744c:	6010      	str	r0, [r2, #0]
 800744e:	7019      	strb	r1, [r3, #0]
 8007450:	4608      	mov	r0, r1
 8007452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007456:	4770      	bx	lr

08007458 <__sfputs_r>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	4614      	mov	r4, r2
 8007460:	18d5      	adds	r5, r2, r3
 8007462:	42ac      	cmp	r4, r5
 8007464:	d101      	bne.n	800746a <__sfputs_r+0x12>
 8007466:	2000      	movs	r0, #0
 8007468:	e007      	b.n	800747a <__sfputs_r+0x22>
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	463a      	mov	r2, r7
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff ffda 	bl	800742a <__sfputc_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d1f3      	bne.n	8007462 <__sfputs_r+0xa>
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800747c <_vfiprintf_r>:
 800747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	460d      	mov	r5, r1
 8007482:	b09d      	sub	sp, #116	@ 0x74
 8007484:	4614      	mov	r4, r2
 8007486:	4698      	mov	r8, r3
 8007488:	4606      	mov	r6, r0
 800748a:	b118      	cbz	r0, 8007494 <_vfiprintf_r+0x18>
 800748c:	6a03      	ldr	r3, [r0, #32]
 800748e:	b90b      	cbnz	r3, 8007494 <_vfiprintf_r+0x18>
 8007490:	f7fe f970 	bl	8005774 <__sinit>
 8007494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007496:	07d9      	lsls	r1, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_vfiprintf_r+0x2a>
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	059a      	lsls	r2, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_vfiprintf_r+0x2a>
 80074a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074a2:	f7fe fa80 	bl	80059a6 <__retarget_lock_acquire_recursive>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	071b      	lsls	r3, r3, #28
 80074aa:	d501      	bpl.n	80074b0 <_vfiprintf_r+0x34>
 80074ac:	692b      	ldr	r3, [r5, #16]
 80074ae:	b99b      	cbnz	r3, 80074d8 <_vfiprintf_r+0x5c>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f000 f938 	bl	8007728 <__swsetup_r>
 80074b8:	b170      	cbz	r0, 80074d8 <_vfiprintf_r+0x5c>
 80074ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074bc:	07dc      	lsls	r4, r3, #31
 80074be:	d504      	bpl.n	80074ca <_vfiprintf_r+0x4e>
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	b01d      	add	sp, #116	@ 0x74
 80074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ca:	89ab      	ldrh	r3, [r5, #12]
 80074cc:	0598      	lsls	r0, r3, #22
 80074ce:	d4f7      	bmi.n	80074c0 <_vfiprintf_r+0x44>
 80074d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074d2:	f7fe fa69 	bl	80059a8 <__retarget_lock_release_recursive>
 80074d6:	e7f3      	b.n	80074c0 <_vfiprintf_r+0x44>
 80074d8:	2300      	movs	r3, #0
 80074da:	9309      	str	r3, [sp, #36]	@ 0x24
 80074dc:	2320      	movs	r3, #32
 80074de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e6:	2330      	movs	r3, #48	@ 0x30
 80074e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007698 <_vfiprintf_r+0x21c>
 80074ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074f0:	f04f 0901 	mov.w	r9, #1
 80074f4:	4623      	mov	r3, r4
 80074f6:	469a      	mov	sl, r3
 80074f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fc:	b10a      	cbz	r2, 8007502 <_vfiprintf_r+0x86>
 80074fe:	2a25      	cmp	r2, #37	@ 0x25
 8007500:	d1f9      	bne.n	80074f6 <_vfiprintf_r+0x7a>
 8007502:	ebba 0b04 	subs.w	fp, sl, r4
 8007506:	d00b      	beq.n	8007520 <_vfiprintf_r+0xa4>
 8007508:	465b      	mov	r3, fp
 800750a:	4622      	mov	r2, r4
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ffa2 	bl	8007458 <__sfputs_r>
 8007514:	3001      	adds	r0, #1
 8007516:	f000 80a7 	beq.w	8007668 <_vfiprintf_r+0x1ec>
 800751a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800751c:	445a      	add	r2, fp
 800751e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007520:	f89a 3000 	ldrb.w	r3, [sl]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 809f 	beq.w	8007668 <_vfiprintf_r+0x1ec>
 800752a:	2300      	movs	r3, #0
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007534:	f10a 0a01 	add.w	sl, sl, #1
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	9307      	str	r3, [sp, #28]
 800753c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007540:	931a      	str	r3, [sp, #104]	@ 0x68
 8007542:	4654      	mov	r4, sl
 8007544:	2205      	movs	r2, #5
 8007546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754a:	4853      	ldr	r0, [pc, #332]	@ (8007698 <_vfiprintf_r+0x21c>)
 800754c:	f7f8 fe78 	bl	8000240 <memchr>
 8007550:	9a04      	ldr	r2, [sp, #16]
 8007552:	b9d8      	cbnz	r0, 800758c <_vfiprintf_r+0x110>
 8007554:	06d1      	lsls	r1, r2, #27
 8007556:	bf44      	itt	mi
 8007558:	2320      	movmi	r3, #32
 800755a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800755e:	0713      	lsls	r3, r2, #28
 8007560:	bf44      	itt	mi
 8007562:	232b      	movmi	r3, #43	@ 0x2b
 8007564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007568:	f89a 3000 	ldrb.w	r3, [sl]
 800756c:	2b2a      	cmp	r3, #42	@ 0x2a
 800756e:	d015      	beq.n	800759c <_vfiprintf_r+0x120>
 8007570:	9a07      	ldr	r2, [sp, #28]
 8007572:	4654      	mov	r4, sl
 8007574:	2000      	movs	r0, #0
 8007576:	f04f 0c0a 	mov.w	ip, #10
 800757a:	4621      	mov	r1, r4
 800757c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007580:	3b30      	subs	r3, #48	@ 0x30
 8007582:	2b09      	cmp	r3, #9
 8007584:	d94b      	bls.n	800761e <_vfiprintf_r+0x1a2>
 8007586:	b1b0      	cbz	r0, 80075b6 <_vfiprintf_r+0x13a>
 8007588:	9207      	str	r2, [sp, #28]
 800758a:	e014      	b.n	80075b6 <_vfiprintf_r+0x13a>
 800758c:	eba0 0308 	sub.w	r3, r0, r8
 8007590:	fa09 f303 	lsl.w	r3, r9, r3
 8007594:	4313      	orrs	r3, r2
 8007596:	9304      	str	r3, [sp, #16]
 8007598:	46a2      	mov	sl, r4
 800759a:	e7d2      	b.n	8007542 <_vfiprintf_r+0xc6>
 800759c:	9b03      	ldr	r3, [sp, #12]
 800759e:	1d19      	adds	r1, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	9103      	str	r1, [sp, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfbb      	ittet	lt
 80075a8:	425b      	neglt	r3, r3
 80075aa:	f042 0202 	orrlt.w	r2, r2, #2
 80075ae:	9307      	strge	r3, [sp, #28]
 80075b0:	9307      	strlt	r3, [sp, #28]
 80075b2:	bfb8      	it	lt
 80075b4:	9204      	strlt	r2, [sp, #16]
 80075b6:	7823      	ldrb	r3, [r4, #0]
 80075b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ba:	d10a      	bne.n	80075d2 <_vfiprintf_r+0x156>
 80075bc:	7863      	ldrb	r3, [r4, #1]
 80075be:	2b2a      	cmp	r3, #42	@ 0x2a
 80075c0:	d132      	bne.n	8007628 <_vfiprintf_r+0x1ac>
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	1d1a      	adds	r2, r3, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	9203      	str	r2, [sp, #12]
 80075ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075ce:	3402      	adds	r4, #2
 80075d0:	9305      	str	r3, [sp, #20]
 80075d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076a8 <_vfiprintf_r+0x22c>
 80075d6:	7821      	ldrb	r1, [r4, #0]
 80075d8:	2203      	movs	r2, #3
 80075da:	4650      	mov	r0, sl
 80075dc:	f7f8 fe30 	bl	8000240 <memchr>
 80075e0:	b138      	cbz	r0, 80075f2 <_vfiprintf_r+0x176>
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	eba0 000a 	sub.w	r0, r0, sl
 80075e8:	2240      	movs	r2, #64	@ 0x40
 80075ea:	4082      	lsls	r2, r0
 80075ec:	4313      	orrs	r3, r2
 80075ee:	3401      	adds	r4, #1
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f6:	4829      	ldr	r0, [pc, #164]	@ (800769c <_vfiprintf_r+0x220>)
 80075f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075fc:	2206      	movs	r2, #6
 80075fe:	f7f8 fe1f 	bl	8000240 <memchr>
 8007602:	2800      	cmp	r0, #0
 8007604:	d03f      	beq.n	8007686 <_vfiprintf_r+0x20a>
 8007606:	4b26      	ldr	r3, [pc, #152]	@ (80076a0 <_vfiprintf_r+0x224>)
 8007608:	bb1b      	cbnz	r3, 8007652 <_vfiprintf_r+0x1d6>
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	3307      	adds	r3, #7
 800760e:	f023 0307 	bic.w	r3, r3, #7
 8007612:	3308      	adds	r3, #8
 8007614:	9303      	str	r3, [sp, #12]
 8007616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007618:	443b      	add	r3, r7
 800761a:	9309      	str	r3, [sp, #36]	@ 0x24
 800761c:	e76a      	b.n	80074f4 <_vfiprintf_r+0x78>
 800761e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007622:	460c      	mov	r4, r1
 8007624:	2001      	movs	r0, #1
 8007626:	e7a8      	b.n	800757a <_vfiprintf_r+0xfe>
 8007628:	2300      	movs	r3, #0
 800762a:	3401      	adds	r4, #1
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	4619      	mov	r1, r3
 8007630:	f04f 0c0a 	mov.w	ip, #10
 8007634:	4620      	mov	r0, r4
 8007636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800763a:	3a30      	subs	r2, #48	@ 0x30
 800763c:	2a09      	cmp	r2, #9
 800763e:	d903      	bls.n	8007648 <_vfiprintf_r+0x1cc>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0c6      	beq.n	80075d2 <_vfiprintf_r+0x156>
 8007644:	9105      	str	r1, [sp, #20]
 8007646:	e7c4      	b.n	80075d2 <_vfiprintf_r+0x156>
 8007648:	fb0c 2101 	mla	r1, ip, r1, r2
 800764c:	4604      	mov	r4, r0
 800764e:	2301      	movs	r3, #1
 8007650:	e7f0      	b.n	8007634 <_vfiprintf_r+0x1b8>
 8007652:	ab03      	add	r3, sp, #12
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	462a      	mov	r2, r5
 8007658:	4b12      	ldr	r3, [pc, #72]	@ (80076a4 <_vfiprintf_r+0x228>)
 800765a:	a904      	add	r1, sp, #16
 800765c:	4630      	mov	r0, r6
 800765e:	f7fd fc57 	bl	8004f10 <_printf_float>
 8007662:	4607      	mov	r7, r0
 8007664:	1c78      	adds	r0, r7, #1
 8007666:	d1d6      	bne.n	8007616 <_vfiprintf_r+0x19a>
 8007668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d405      	bmi.n	800767a <_vfiprintf_r+0x1fe>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d402      	bmi.n	800767a <_vfiprintf_r+0x1fe>
 8007674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007676:	f7fe f997 	bl	80059a8 <__retarget_lock_release_recursive>
 800767a:	89ab      	ldrh	r3, [r5, #12]
 800767c:	065b      	lsls	r3, r3, #25
 800767e:	f53f af1f 	bmi.w	80074c0 <_vfiprintf_r+0x44>
 8007682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007684:	e71e      	b.n	80074c4 <_vfiprintf_r+0x48>
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	462a      	mov	r2, r5
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <_vfiprintf_r+0x228>)
 800768e:	a904      	add	r1, sp, #16
 8007690:	4630      	mov	r0, r6
 8007692:	f7fd fec5 	bl	8005420 <_printf_i>
 8007696:	e7e4      	b.n	8007662 <_vfiprintf_r+0x1e6>
 8007698:	08007ace 	.word	0x08007ace
 800769c:	08007ad8 	.word	0x08007ad8
 80076a0:	08004f11 	.word	0x08004f11
 80076a4:	08007459 	.word	0x08007459
 80076a8:	08007ad4 	.word	0x08007ad4

080076ac <__swbuf_r>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	4605      	mov	r5, r0
 80076b4:	b118      	cbz	r0, 80076be <__swbuf_r+0x12>
 80076b6:	6a03      	ldr	r3, [r0, #32]
 80076b8:	b90b      	cbnz	r3, 80076be <__swbuf_r+0x12>
 80076ba:	f7fe f85b 	bl	8005774 <__sinit>
 80076be:	69a3      	ldr	r3, [r4, #24]
 80076c0:	60a3      	str	r3, [r4, #8]
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	071a      	lsls	r2, r3, #28
 80076c6:	d501      	bpl.n	80076cc <__swbuf_r+0x20>
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	b943      	cbnz	r3, 80076de <__swbuf_r+0x32>
 80076cc:	4621      	mov	r1, r4
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 f82a 	bl	8007728 <__swsetup_r>
 80076d4:	b118      	cbz	r0, 80076de <__swbuf_r+0x32>
 80076d6:	f04f 37ff 	mov.w	r7, #4294967295
 80076da:	4638      	mov	r0, r7
 80076dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	1a98      	subs	r0, r3, r2
 80076e4:	6963      	ldr	r3, [r4, #20]
 80076e6:	b2f6      	uxtb	r6, r6
 80076e8:	4283      	cmp	r3, r0
 80076ea:	4637      	mov	r7, r6
 80076ec:	dc05      	bgt.n	80076fa <__swbuf_r+0x4e>
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f7ff fd99 	bl	8007228 <_fflush_r>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1ed      	bne.n	80076d6 <__swbuf_r+0x2a>
 80076fa:	68a3      	ldr	r3, [r4, #8]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	60a3      	str	r3, [r4, #8]
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	6022      	str	r2, [r4, #0]
 8007706:	701e      	strb	r6, [r3, #0]
 8007708:	6962      	ldr	r2, [r4, #20]
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	429a      	cmp	r2, r3
 800770e:	d004      	beq.n	800771a <__swbuf_r+0x6e>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	07db      	lsls	r3, r3, #31
 8007714:	d5e1      	bpl.n	80076da <__swbuf_r+0x2e>
 8007716:	2e0a      	cmp	r6, #10
 8007718:	d1df      	bne.n	80076da <__swbuf_r+0x2e>
 800771a:	4621      	mov	r1, r4
 800771c:	4628      	mov	r0, r5
 800771e:	f7ff fd83 	bl	8007228 <_fflush_r>
 8007722:	2800      	cmp	r0, #0
 8007724:	d0d9      	beq.n	80076da <__swbuf_r+0x2e>
 8007726:	e7d6      	b.n	80076d6 <__swbuf_r+0x2a>

08007728 <__swsetup_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <__swsetup_r+0xa8>)
 800772c:	4605      	mov	r5, r0
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	460c      	mov	r4, r1
 8007732:	b118      	cbz	r0, 800773c <__swsetup_r+0x14>
 8007734:	6a03      	ldr	r3, [r0, #32]
 8007736:	b90b      	cbnz	r3, 800773c <__swsetup_r+0x14>
 8007738:	f7fe f81c 	bl	8005774 <__sinit>
 800773c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007740:	0719      	lsls	r1, r3, #28
 8007742:	d422      	bmi.n	800778a <__swsetup_r+0x62>
 8007744:	06da      	lsls	r2, r3, #27
 8007746:	d407      	bmi.n	8007758 <__swsetup_r+0x30>
 8007748:	2209      	movs	r2, #9
 800774a:	602a      	str	r2, [r5, #0]
 800774c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	f04f 30ff 	mov.w	r0, #4294967295
 8007756:	e033      	b.n	80077c0 <__swsetup_r+0x98>
 8007758:	0758      	lsls	r0, r3, #29
 800775a:	d512      	bpl.n	8007782 <__swsetup_r+0x5a>
 800775c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800775e:	b141      	cbz	r1, 8007772 <__swsetup_r+0x4a>
 8007760:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <__swsetup_r+0x46>
 8007768:	4628      	mov	r0, r5
 800776a:	f7fe ff07 	bl	800657c <_free_r>
 800776e:	2300      	movs	r3, #0
 8007770:	6363      	str	r3, [r4, #52]	@ 0x34
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	2300      	movs	r3, #0
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	b94b      	cbnz	r3, 80077a2 <__swsetup_r+0x7a>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007798:	d003      	beq.n	80077a2 <__swsetup_r+0x7a>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f883 	bl	80078a8 <__smakebuf_r>
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	f013 0201 	ands.w	r2, r3, #1
 80077aa:	d00a      	beq.n	80077c2 <__swsetup_r+0x9a>
 80077ac:	2200      	movs	r2, #0
 80077ae:	60a2      	str	r2, [r4, #8]
 80077b0:	6962      	ldr	r2, [r4, #20]
 80077b2:	4252      	negs	r2, r2
 80077b4:	61a2      	str	r2, [r4, #24]
 80077b6:	6922      	ldr	r2, [r4, #16]
 80077b8:	b942      	cbnz	r2, 80077cc <__swsetup_r+0xa4>
 80077ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077be:	d1c5      	bne.n	800774c <__swsetup_r+0x24>
 80077c0:	bd38      	pop	{r3, r4, r5, pc}
 80077c2:	0799      	lsls	r1, r3, #30
 80077c4:	bf58      	it	pl
 80077c6:	6962      	ldrpl	r2, [r4, #20]
 80077c8:	60a2      	str	r2, [r4, #8]
 80077ca:	e7f4      	b.n	80077b6 <__swsetup_r+0x8e>
 80077cc:	2000      	movs	r0, #0
 80077ce:	e7f7      	b.n	80077c0 <__swsetup_r+0x98>
 80077d0:	20000018 	.word	0x20000018

080077d4 <_raise_r>:
 80077d4:	291f      	cmp	r1, #31
 80077d6:	b538      	push	{r3, r4, r5, lr}
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	d904      	bls.n	80077e8 <_raise_r+0x14>
 80077de:	2316      	movs	r3, #22
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077ea:	b112      	cbz	r2, 80077f2 <_raise_r+0x1e>
 80077ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077f0:	b94b      	cbnz	r3, 8007806 <_raise_r+0x32>
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f830 	bl	8007858 <_getpid_r>
 80077f8:	4622      	mov	r2, r4
 80077fa:	4601      	mov	r1, r0
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007802:	f000 b817 	b.w	8007834 <_kill_r>
 8007806:	2b01      	cmp	r3, #1
 8007808:	d00a      	beq.n	8007820 <_raise_r+0x4c>
 800780a:	1c59      	adds	r1, r3, #1
 800780c:	d103      	bne.n	8007816 <_raise_r+0x42>
 800780e:	2316      	movs	r3, #22
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	2001      	movs	r0, #1
 8007814:	e7e7      	b.n	80077e6 <_raise_r+0x12>
 8007816:	2100      	movs	r1, #0
 8007818:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800781c:	4620      	mov	r0, r4
 800781e:	4798      	blx	r3
 8007820:	2000      	movs	r0, #0
 8007822:	e7e0      	b.n	80077e6 <_raise_r+0x12>

08007824 <raise>:
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <raise+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f7ff bfd3 	b.w	80077d4 <_raise_r>
 800782e:	bf00      	nop
 8007830:	20000018 	.word	0x20000018

08007834 <_kill_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d07      	ldr	r5, [pc, #28]	@ (8007854 <_kill_r+0x20>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f7f9 fbcc 	bl	8000fde <_kill>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d102      	bne.n	8007850 <_kill_r+0x1c>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	b103      	cbz	r3, 8007850 <_kill_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	20000490 	.word	0x20000490

08007858 <_getpid_r>:
 8007858:	f7f9 bbb9 	b.w	8000fce <_getpid>

0800785c <__swhatbuf_r>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	2900      	cmp	r1, #0
 8007866:	b096      	sub	sp, #88	@ 0x58
 8007868:	4615      	mov	r5, r2
 800786a:	461e      	mov	r6, r3
 800786c:	da0d      	bge.n	800788a <__swhatbuf_r+0x2e>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	bf14      	ite	ne
 800787a:	2340      	movne	r3, #64	@ 0x40
 800787c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007880:	2000      	movs	r0, #0
 8007882:	6031      	str	r1, [r6, #0]
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	b016      	add	sp, #88	@ 0x58
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	466a      	mov	r2, sp
 800788c:	f000 f848 	bl	8007920 <_fstat_r>
 8007890:	2800      	cmp	r0, #0
 8007892:	dbec      	blt.n	800786e <__swhatbuf_r+0x12>
 8007894:	9901      	ldr	r1, [sp, #4]
 8007896:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800789a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800789e:	4259      	negs	r1, r3
 80078a0:	4159      	adcs	r1, r3
 80078a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078a6:	e7eb      	b.n	8007880 <__swhatbuf_r+0x24>

080078a8 <__smakebuf_r>:
 80078a8:	898b      	ldrh	r3, [r1, #12]
 80078aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ac:	079d      	lsls	r5, r3, #30
 80078ae:	4606      	mov	r6, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	d507      	bpl.n	80078c4 <__smakebuf_r+0x1c>
 80078b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2301      	movs	r3, #1
 80078be:	6163      	str	r3, [r4, #20]
 80078c0:	b003      	add	sp, #12
 80078c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c4:	ab01      	add	r3, sp, #4
 80078c6:	466a      	mov	r2, sp
 80078c8:	f7ff ffc8 	bl	800785c <__swhatbuf_r>
 80078cc:	9f00      	ldr	r7, [sp, #0]
 80078ce:	4605      	mov	r5, r0
 80078d0:	4639      	mov	r1, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7fe fec6 	bl	8006664 <_malloc_r>
 80078d8:	b948      	cbnz	r0, 80078ee <__smakebuf_r+0x46>
 80078da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078de:	059a      	lsls	r2, r3, #22
 80078e0:	d4ee      	bmi.n	80078c0 <__smakebuf_r+0x18>
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	f043 0302 	orr.w	r3, r3, #2
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	e7e2      	b.n	80078b4 <__smakebuf_r+0xc>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	6020      	str	r0, [r4, #0]
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078fe:	b15b      	cbz	r3, 8007918 <__smakebuf_r+0x70>
 8007900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f81d 	bl	8007944 <_isatty_r>
 800790a:	b128      	cbz	r0, 8007918 <__smakebuf_r+0x70>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	431d      	orrs	r5, r3
 800791c:	81a5      	strh	r5, [r4, #12]
 800791e:	e7cf      	b.n	80078c0 <__smakebuf_r+0x18>

08007920 <_fstat_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	@ (8007940 <_fstat_r+0x20>)
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7f9 fbb6 	bl	800109e <_fstat>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_fstat_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_fstat_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000490 	.word	0x20000490

08007944 <_isatty_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	@ (8007960 <_isatty_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7f9 fbb5 	bl	80010be <_isatty>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_isatty_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_isatty_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20000490 	.word	0x20000490

08007964 <_init>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	bf00      	nop
 8007968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796a:	bc08      	pop	{r3}
 800796c:	469e      	mov	lr, r3
 800796e:	4770      	bx	lr

08007970 <_fini>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr
