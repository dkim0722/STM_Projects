
motor_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005ed4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08005f30  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005f30  00007350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff9d  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002092  00000000  00000000  00017027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000190c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  00019e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d13  00000000  00000000  0001a92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111ec  00000000  00000000  00042640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb4cc  00000000  00000000  0005382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ecf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  0014ed3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00152890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d90 	.word	0x08005d90

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	08005d90 	.word	0x08005d90

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 ff35 	bl	80013d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f892 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fa7e 	bl	8000a70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000574:	f000 f9aa 	bl	80008cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000578:	f000 f9f6 	bl	8000968 <MX_TIM3_Init>
  MX_TIM1_Init();
 800057c:	f000 f8fa 	bl	8000774 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000580:	f000 fa46 	bl	8000a10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000584:	213c      	movs	r1, #60	@ 0x3c
 8000586:	4834      	ldr	r0, [pc, #208]	@ (8000658 <main+0xf4>)
 8000588:	f002 ff2c 	bl	80033e4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800058c:	4833      	ldr	r0, [pc, #204]	@ (800065c <main+0xf8>)
 800058e:	f002 fcaf 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4832      	ldr	r0, [pc, #200]	@ (8000660 <main+0xfc>)
 8000596:	f002 fd85 	bl	80030a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //htim1.Instance->CCR1 = 1000-1;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4831      	ldr	r0, [pc, #196]	@ (8000664 <main+0x100>)
 80005a0:	f001 faea 	bl	8001b78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	482f      	ldr	r0, [pc, #188]	@ (8000668 <main+0x104>)
 80005aa:	f001 fae5 	bl	8001b78 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_char, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	492e      	ldr	r1, [pc, #184]	@ (800066c <main+0x108>)
 80005b2:	482f      	ldr	r0, [pc, #188]	@ (8000670 <main+0x10c>)
 80005b4:	f004 f897 	bl	80046e6 <HAL_UART_Receive_IT>

  // setp_dc = setpoint CONSTANT
  // process = encoder reading

  htim1.Instance->CCR1 = pid_dc;
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <main+0xfc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000674 <main+0x110>)
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	pid_rpm = (uint32_t)PID_controller_1((float)setp_rpm, (float)proc_rpm, P, I, D, (float)max_rpm);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <main+0x114>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	ee07 3a90 	vmov	s15, r3
 80005ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <main+0x118>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	ee07 3a10 	vmov	s14, r3
 80005d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80005da:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8000680 <main+0x11c>
 80005de:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8000684 <main+0x120>
 80005e2:	ed9f 5a29 	vldr	s10, [pc, #164]	@ 8000688 <main+0x124>
 80005e6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800068c <main+0x128>
 80005ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80005ee:	eef0 2a66 	vmov.f32	s5, s13
 80005f2:	eeb0 2a45 	vmov.f32	s4, s10
 80005f6:	eef0 1a65 	vmov.f32	s3, s11
 80005fa:	eeb0 1a46 	vmov.f32	s2, s12
 80005fe:	eef0 0a47 	vmov.f32	s1, s14
 8000602:	eeb0 0a67 	vmov.f32	s0, s15
 8000606:	f000 fbe9 	bl	8000ddc <PID_controller_1>
 800060a:	eef0 7a40 	vmov.f32	s15, s0
 800060e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000612:	ee17 2a90 	vmov	r2, s15
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0x12c>)
 8000618:	601a      	str	r2, [r3, #0]
	pid_dc = (uint32_t)(((float)(pid_rpm)/1.5f)*10.0f);
 800061a:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <main+0x12c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000626:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800062a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800062e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063a:	ee17 2a90 	vmov	r2, s15
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <main+0x110>)
 8000640:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR1 = pid_dc;
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <main+0xfc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0b      	ldr	r2, [pc, #44]	@ (8000674 <main+0x110>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 ff1f 	bl	8001490 <HAL_Delay>
	pid_rpm = (uint32_t)PID_controller_1((float)setp_rpm, (float)proc_rpm, P, I, D, (float)max_rpm);
 8000652:	bf00      	nop
 8000654:	e7b5      	b.n	80005c2 <main+0x5e>
 8000656:	bf00      	nop
 8000658:	20000110 	.word	0x20000110
 800065c:	200000c4 	.word	0x200000c4
 8000660:	20000078 	.word	0x20000078
 8000664:	40020000 	.word	0x40020000
 8000668:	40021000 	.word	0x40021000
 800066c:	200001f8 	.word	0x200001f8
 8000670:	2000015c 	.word	0x2000015c
 8000674:	200001f0 	.word	0x200001f0
 8000678:	200001ec 	.word	0x200001ec
 800067c:	200001e8 	.word	0x200001e8
 8000680:	3f0ccccd 	.word	0x3f0ccccd
 8000684:	3f4ccccd 	.word	0x3f4ccccd
 8000688:	00000000 	.word	0x00000000
 800068c:	00000096 	.word	0x00000096
 8000690:	200001f4 	.word	0x200001f4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	@ 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fb42 	bl	8005d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <SystemClock_Config+0xd8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	@ (800076c <SystemClock_Config+0xd8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <SystemClock_Config+0xdc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d8:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <SystemClock_Config+0xdc>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000700:	2310      	movs	r3, #16
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000704:	23c0      	movs	r3, #192	@ 0xc0
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fa97 	bl	8001c4c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 fb54 	bl	8000dd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f001 fa40 	bl	8001bac <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000732:	f000 fb4d 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fd28 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800075e:	f000 fb37 	bl	8000dd0 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09a      	sub	sp, #104	@ 0x68
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000794:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	222c      	movs	r2, #44	@ 0x2c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 fabc 	bl	8005d2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007b6:	4a44      	ldr	r2, [pc, #272]	@ (80008c8 <MX_TIM1_Init+0x154>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80007ba:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007bc:	225f      	movs	r2, #95	@ 0x5f
 80007be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b40      	ldr	r3, [pc, #256]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007c6:	4b3f      	ldr	r3, [pc, #252]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b3d      	ldr	r3, [pc, #244]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d4:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b3a      	ldr	r3, [pc, #232]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e0:	4838      	ldr	r0, [pc, #224]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007e2:	f002 fb2d 	bl	8002e40 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 faf0 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007fa:	4619      	mov	r1, r3
 80007fc:	4831      	ldr	r0, [pc, #196]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80007fe:	f003 f8bb 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000808:	f000 fae2 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080c:	482d      	ldr	r0, [pc, #180]	@ (80008c4 <MX_TIM1_Init+0x150>)
 800080e:	f002 fbe7 	bl	8002fe0 <HAL_TIM_PWM_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000818:	f000 fada 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000828:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800082c:	4619      	mov	r1, r3
 800082e:	4825      	ldr	r0, [pc, #148]	@ (80008c4 <MX_TIM1_Init+0x150>)
 8000830:	f003 fd58 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800083a:	f000 fac9 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083e:	2360      	movs	r3, #96	@ 0x60
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <MX_TIM1_Init+0x150>)
 8000864:	f002 ff74 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800086e:	f000 faaf 	bl	8000dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000886:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80008a8:	f003 fdaa 	bl	8004400 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008b2:	f000 fa8d 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b6:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <MX_TIM1_Init+0x150>)
 80008b8:	f000 fc42 	bl	8001140 <HAL_TIM_MspPostInit>

}
 80008bc:	bf00      	nop
 80008be:	3768      	adds	r7, #104	@ 0x68
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000078 	.word	0x20000078
 80008c8:	40010000 	.word	0x40010000

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008f4:	f242 527f 	movw	r2, #9599	@ 0x257f
 80008f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000902:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_TIM2_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000916:	f002 fa93 	bl	8002e40 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 fa56 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_TIM2_Init+0x98>)
 8000932:	f003 f821 	bl	8003978 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800093c:	f000 fa48 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_TIM2_Init+0x98>)
 800094e:	f003 fcc9 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 fa3a 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000c4 	.word	0x200000c4

08000968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	@ 0x30
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2224      	movs	r2, #36	@ 0x24
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f005 f9d8 	bl	8005d2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 8000988:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <MX_TIM3_Init+0xa4>)
 800098a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 800098e:	225f      	movs	r2, #95	@ 0x5f
 8000990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1-1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c2:	2301      	movs	r3, #1
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 80009d6:	f002 fc5f 	bl	8003298 <HAL_TIM_Encoder_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 f9f6 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_TIM3_Init+0xa0>)
 80009f2:	f003 fc77 	bl	80042e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009fc:	f000 f9e8 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	@ 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000110 	.word	0x20000110
 8000a0c:	40000400 	.word	0x40000400

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	@ (8000a6c <MX_USART3_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a54:	f003 fd70 	bl	8004538 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f9b7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000015c 	.word	0x2000015c
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b90      	ldr	r3, [pc, #576]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a8f      	ldr	r2, [pc, #572]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b8d      	ldr	r3, [pc, #564]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	4b8a      	ldr	r3, [pc, #552]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a89      	ldr	r2, [pc, #548]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b87      	ldr	r3, [pc, #540]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b84      	ldr	r3, [pc, #528]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a83      	ldr	r2, [pc, #524]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b81      	ldr	r3, [pc, #516]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b7e      	ldr	r3, [pc, #504]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	4b78      	ldr	r3, [pc, #480]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a77      	ldr	r2, [pc, #476]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b75      	ldr	r3, [pc, #468]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b72      	ldr	r3, [pc, #456]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a71      	ldr	r2, [pc, #452]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a6b      	ldr	r2, [pc, #428]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b69      	ldr	r3, [pc, #420]	@ (8000cc8 <MX_GPIO_Init+0x258>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	4866      	ldr	r0, [pc, #408]	@ (8000ccc <MX_GPIO_Init+0x25c>)
 8000b34:	f001 f820 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b3e:	4864      	ldr	r0, [pc, #400]	@ (8000cd0 <MX_GPIO_Init+0x260>)
 8000b40:	f001 f81a 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	4862      	ldr	r0, [pc, #392]	@ (8000cd4 <MX_GPIO_Init+0x264>)
 8000b4a:	f001 f815 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2101      	movs	r1, #1
 8000b52:	4861      	ldr	r0, [pc, #388]	@ (8000cd8 <MX_GPIO_Init+0x268>)
 8000b54:	f001 f810 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	485b      	ldr	r0, [pc, #364]	@ (8000cdc <MX_GPIO_Init+0x26c>)
 8000b70:	f000 fe56 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b74:	2332      	movs	r3, #50	@ 0x32
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4853      	ldr	r0, [pc, #332]	@ (8000cdc <MX_GPIO_Init+0x26c>)
 8000b90:	f000 fe46 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4848      	ldr	r0, [pc, #288]	@ (8000ccc <MX_GPIO_Init+0x25c>)
 8000bac:	f000 fe38 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb0:	2386      	movs	r3, #134	@ 0x86
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4840      	ldr	r0, [pc, #256]	@ (8000ccc <MX_GPIO_Init+0x25c>)
 8000bcc:	f000 fe28 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4839      	ldr	r0, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x260>)
 8000bea:	f000 fe19 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4831      	ldr	r0, [pc, #196]	@ (8000cd0 <MX_GPIO_Init+0x260>)
 8000c0c:	f000 fe08 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	482b      	ldr	r0, [pc, #172]	@ (8000cd4 <MX_GPIO_Init+0x264>)
 8000c28:	f000 fdfa 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4825      	ldr	r0, [pc, #148]	@ (8000cd4 <MX_GPIO_Init+0x264>)
 8000c40:	f000 fdee 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c44:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c56:	230a      	movs	r3, #10
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481a      	ldr	r0, [pc, #104]	@ (8000ccc <MX_GPIO_Init+0x25c>)
 8000c62:	f000 fddd 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <MX_GPIO_Init+0x25c>)
 8000c7c:	f000 fdd0 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <MX_GPIO_Init+0x264>)
 8000c9e:	f000 fdbf 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_GPIO_Init+0x268>)
 8000cba:	f000 fdb1 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	@ 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d104      	bne.n	8000cfc <HAL_TIM_IC_CaptureCallback+0x1c>
		pulses_per_sec += 1;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000cfa:	6013      	str	r3, [r2, #0]
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	200001e4 	.word	0x200001e4

08000d10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    if(rx_char[0] != '\r' && rx_char[0] != '\n' && msg_pos+1 < sizeof(tx_msg)-2){
 8000d18:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xb0>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b0d      	cmp	r3, #13
 8000d1e:	d016      	beq.n	8000d4e <HAL_UART_RxCpltCallback+0x3e>
 8000d20:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xb0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b0a      	cmp	r3, #10
 8000d26:	d012      	beq.n	8000d4e <HAL_UART_RxCpltCallback+0x3e>
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	d80d      	bhi.n	8000d4e <HAL_UART_RxCpltCallback+0x3e>
    	tx_msg[msg_pos] = rx_char[0];
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xb0>)
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000d3e:	5499      	strb	r1, [r3, r2]
    	msg_pos++;
 8000d40:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e02e      	b.n	8000dac <HAL_UART_RxCpltCallback+0x9c>
    }
    else{
    	int conv_rpm = atoi(tx_msg);
 8000d4e:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000d50:	f004 ff64 	bl	8005c1c <atoi>
 8000d54:	60f8      	str	r0, [r7, #12]
    	if(conv_rpm > 150){
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b96      	cmp	r3, #150	@ 0x96
 8000d5a:	dd03      	ble.n	8000d64 <HAL_UART_RxCpltCallback+0x54>
    		setp_rpm = 150;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_UART_RxCpltCallback+0xbc>)
 8000d5e:	2296      	movs	r2, #150	@ 0x96
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e009      	b.n	8000d78 <HAL_UART_RxCpltCallback+0x68>
    	}
    	else if(conv_rpm < 0){
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da03      	bge.n	8000d72 <HAL_UART_RxCpltCallback+0x62>
    		setp_rpm = 0;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_UART_RxCpltCallback+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e002      	b.n	8000d78 <HAL_UART_RxCpltCallback+0x68>
    	}
    	else{
    		setp_rpm = conv_rpm;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <HAL_UART_RxCpltCallback+0xbc>)
 8000d76:	6013      	str	r3, [r2, #0]
    	}
    	tx_msg[msg_pos+1] = '\r';
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000d80:	210d      	movs	r1, #13
 8000d82:	54d1      	strb	r1, [r2, r3]
    	tx_msg[msg_pos+2] = '\n';
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000d8c:	210a      	movs	r1, #10
 8000d8e:	54d1      	strb	r1, [r2, r3]
    	HAL_UART_Transmit(huart, (uint8_t*)tx_msg, sizeof(tx_msg), 100);
 8000d90:	2364      	movs	r3, #100	@ 0x64
 8000d92:	220c      	movs	r2, #12
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f003 fc1c 	bl	80045d4 <HAL_UART_Transmit>
    	memset(tx_msg, '\0', sizeof(tx_msg));
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <HAL_UART_RxCpltCallback+0xb8>)
 8000da2:	f004 ffc3 	bl	8005d2c <memset>
    	msg_pos = 0;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <HAL_UART_RxCpltCallback+0xb4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(huart, (uint8_t*)rx_char, 1);		// reset interrupt
 8000dac:	2201      	movs	r2, #1
 8000dae:	4904      	ldr	r1, [pc, #16]	@ (8000dc0 <HAL_UART_RxCpltCallback+0xb0>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f003 fc98 	bl	80046e6 <HAL_UART_Receive_IT>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001f8 	.word	0x200001f8
 8000dc4:	20000208 	.word	0x20000208
 8000dc8:	200001fc 	.word	0x200001fc
 8000dcc:	200001ec 	.word	0x200001ec

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <PID_controller_1>:
/**
 * @brief Function to initialize a ugv_pid instance.
 */

float PID_controller_1(float set_value, float process_value, float Kp, float Ki, float Kd, float limit)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08d      	sub	sp, #52	@ 0x34
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000de6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000dea:	ed87 1a03 	vstr	s2, [r7, #12]
 8000dee:	edc7 1a02 	vstr	s3, [r7, #8]
 8000df2:	ed87 2a01 	vstr	s4, [r7, #4]
 8000df6:	edc7 2a00 	vstr	s5, [r7]
	float P_value;
	float I_value;
	float D_value;
	static float I_sum;
	float PID_value;
	float Time = 0.001;
 8000dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa8 <PID_controller_1+0x1cc>)
 8000dfc:	623b      	str	r3, [r7, #32]

	error = (set_value - process_value);
 8000dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0a:	edc7 7a07 	vstr	s15, [r7, #28]
	P_value = Kp * error;
 8000e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1a:	edc7 7a06 	vstr	s15, [r7, #24]
	if (Ki > 0)
 8000e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	dd2f      	ble.n	8000e8c <PID_controller_1+0xb0>
	{
		if((Ki * I_sum) < limit && (Ki * I_sum) > -limit)
 8000e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3a:	ed97 7a00 	vldr	s14, [r7]
 8000e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e46:	dd28      	ble.n	8000e9a <PID_controller_1+0xbe>
 8000e48:	4b58      	ldr	r3, [pc, #352]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e4a:	ed93 7a00 	vldr	s14, [r3]
 8000e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e56:	edd7 7a00 	vldr	s15, [r7]
 8000e5a:	eef1 7a67 	vneg.f32	s15, s15
 8000e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	dd18      	ble.n	8000e9a <PID_controller_1+0xbe>
		{
			I_value = I_sum += Time * error;
 8000e68:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e74:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e80:	edc3 7a00 	vstr	s15, [r3]
 8000e84:	4b49      	ldr	r3, [pc, #292]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e8a:	e006      	b.n	8000e9a <PID_controller_1+0xbe>
		}
	}
	else
	{
		I_value = 0;
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		I_sum = 0;
 8000e92:	4b46      	ldr	r3, [pc, #280]	@ (8000fac <PID_controller_1+0x1d0>)
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
	}
	if(Kd > 0)
 8000e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	dd33      	ble.n	8000f10 <PID_controller_1+0x134>
	{
		if((error - error_old)/ Time < limit && (error - error_old)/ Time > -limit)
 8000ea8:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <PID_controller_1+0x1d4>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ed97 7a07 	vldr	s14, [r7, #28]
 8000eb2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000eb6:	ed97 7a08 	vldr	s14, [r7, #32]
 8000eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ebe:	ed97 7a00 	vldr	s14, [r7]
 8000ec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dd24      	ble.n	8000f16 <PID_controller_1+0x13a>
 8000ecc:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <PID_controller_1+0x1d4>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ed6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000eda:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ee2:	edd7 7a00 	vldr	s15, [r7]
 8000ee6:	eef1 7a67 	vneg.f32	s15, s15
 8000eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	dd10      	ble.n	8000f16 <PID_controller_1+0x13a>
		{
			D_value = (error - error_old) / Time;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <PID_controller_1+0x1d4>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ed97 7a07 	vldr	s14, [r7, #28]
 8000efe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f02:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8000f0e:	e002      	b.n	8000f16 <PID_controller_1+0x13a>
		}
	}
	else
	{
		D_value = 0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	PID_value = P_value + Ki * I_value + Kd * D_value;
 8000f16:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f2e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	if (PID_value < -limit)
 8000f3e:	edd7 7a00 	vldr	s15, [r7]
 8000f42:	eef1 7a67 	vneg.f32	s15, s15
 8000f46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	d506      	bpl.n	8000f62 <PID_controller_1+0x186>
	{
		PID_value = -limit;
 8000f54:	edd7 7a00 	vldr	s15, [r7]
 8000f58:	eef1 7a67 	vneg.f32	s15, s15
 8000f5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000f60:	e00a      	b.n	8000f78 <PID_controller_1+0x19c>
	}
	else if (PID_value > limit)
 8000f62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000f66:	edd7 7a00 	vldr	s15, [r7]
 8000f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd01      	ble.n	8000f78 <PID_controller_1+0x19c>
	{
		PID_value = limit;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	error_old = error;
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <PID_controller_1+0x1d4>)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	6013      	str	r3, [r2, #0]

	if(set_value == 0)
 8000f7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d102      	bne.n	8000f92 <PID_controller_1+0x1b6>
		PID_value = 0;
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24

	return PID_value;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f94:	ee07 3a90 	vmov	s15, r3
}
 8000f98:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9c:	3734      	adds	r7, #52	@ 0x34
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	3a83126f 	.word	0x3a83126f
 8000fac:	2000020c 	.word	0x2000020c
 8000fb0:	20000210 	.word	0x20000210

08000fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10c      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001026:	e018      	b.n	800105a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 fb1d 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 fb36 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <HAL_TIM_Encoder_MspInit+0xc4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d14b      	bne.n	8001126 <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a22      	ldr	r2, [pc, #136]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_TIM_Encoder_MspInit+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d6:	2340      	movs	r3, #64	@ 0x40
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4811      	ldr	r0, [pc, #68]	@ (8001138 <HAL_TIM_Encoder_MspInit+0xcc>)
 80010f2:	f000 fb95 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001106:	2302      	movs	r3, #2
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	480a      	ldr	r0, [pc, #40]	@ (800113c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001112:	f000 fb85 	bl	8001820 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	201d      	movs	r0, #29
 800111c:	f000 fab7 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001120:	201d      	movs	r0, #29
 8001122:	f000 fad0 	bl	80016c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40000400 	.word	0x40000400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020800 	.word	0x40020800

08001140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_TIM_MspPostInit+0x64>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11c      	bne.n	800119c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_TIM_MspPostInit+0x68>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_TIM_MspPostInit+0x68>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_TIM_MspPostInit+0x68>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800117a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800117e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <HAL_TIM_MspPostInit+0x6c>)
 8001198:	f000 fb42 	bl	8001820 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010000 	.word	0x40010000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ae      	sub	sp, #184	@ 0xb8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2290      	movs	r2, #144	@ 0x90
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fdab 	bl	8005d2c <memset>
  if(huart->Instance==USART3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a26      	ldr	r2, [pc, #152]	@ (8001274 <HAL_UART_MspInit+0xc4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d144      	bne.n	800126a <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 f9fe 	bl	80025f0 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011fa:	f7ff fde9 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a1d      	ldr	r2, [pc, #116]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_UART_MspInit+0xc8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800122e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	@ (800127c <HAL_UART_MspInit+0xcc>)
 8001256:	f000 fae3 	bl	8001820 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2027      	movs	r0, #39	@ 0x27
 8001260:	f000 fa15 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001264:	2027      	movs	r0, #39	@ 0x27
 8001266:	f000 fa2e 	bl	80016c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800126a:	bf00      	nop
 800126c:	37b8      	adds	r7, #184	@ 0xb8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40004800 	.word	0x40004800
 8001278:	40023800 	.word	0x40023800
 800127c:	40020c00 	.word	0x40020c00

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f8bb 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <TIM2_IRQHandler+0x44>)
 80012e6:	f002 f92b 	bl	8003540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  proc_rpm = (uint32_t)((((float)pulses_per_sec / 2) / 408) * 60);
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <TIM2_IRQHandler+0x48>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012fe:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800132c <TIM2_IRQHandler+0x4c>
 8001302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001306:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001330 <TIM2_IRQHandler+0x50>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	ee17 2a90 	vmov	r2, s15
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <TIM2_IRQHandler+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  pulses_per_sec = 0;
 800131a:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <TIM2_IRQHandler+0x48>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000c4 	.word	0x200000c4
 8001328:	200001e4 	.word	0x200001e4
 800132c:	43cc0000 	.word	0x43cc0000
 8001330:	42700000 	.word	0x42700000
 8001334:	200001e8 	.word	0x200001e8

08001338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM3_IRQHandler+0x10>)
 800133e:	f002 f8ff 	bl	8003540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000110 	.word	0x20000110

0800134c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART3_IRQHandler+0x10>)
 8001352:	f003 fa0d 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000015c 	.word	0x2000015c

08001360 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001388:	f7ff ffea 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f004 fcc9 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff f8d5 	bl	8000564 <main>
  bx  lr    
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013c8:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 80013cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013d0:	20000350 	.word	0x20000350

080013d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>

080013d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f94c 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f805 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e6:	f7ff fde5 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f967 	bl	80016e2 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f92f 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	20000214 	.word	0x20000214

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000214 	.word	0x20000214

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	@ (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	@ (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff feb6 	bl	8001478 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d008      	beq.n	800172c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e052      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0216 	bic.w	r2, r2, #22
 800173a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800174a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <HAL_DMA_Abort+0x62>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0208 	bic.w	r2, r2, #8
 800176a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	e013      	b.n	80017a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177e:	f7ff fe7b 	bl	8001478 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b05      	cmp	r3, #5
 800178a:	d90c      	bls.n	80017a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e015      	b.n	80017d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e4      	bne.n	800177e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	223f      	movs	r2, #63	@ 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2280      	movs	r2, #128	@ 0x80
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e00c      	b.n	8001812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e175      	b.n	8001b2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8164 	bne.w	8001b26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x56>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80be 	beq.w	8001b26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b66      	ldr	r3, [pc, #408]	@ (8001b44 <HAL_GPIO_Init+0x324>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a65      	ldr	r2, [pc, #404]	@ (8001b44 <HAL_GPIO_Init+0x324>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <HAL_GPIO_Init+0x324>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019c2:	4a61      	ldr	r2, [pc, #388]	@ (8001b48 <HAL_GPIO_Init+0x328>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a58      	ldr	r2, [pc, #352]	@ (8001b4c <HAL_GPIO_Init+0x32c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d037      	beq.n	8001a5e <HAL_GPIO_Init+0x23e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a57      	ldr	r2, [pc, #348]	@ (8001b50 <HAL_GPIO_Init+0x330>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d031      	beq.n	8001a5a <HAL_GPIO_Init+0x23a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a56      	ldr	r2, [pc, #344]	@ (8001b54 <HAL_GPIO_Init+0x334>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_Init+0x236>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a55      	ldr	r2, [pc, #340]	@ (8001b58 <HAL_GPIO_Init+0x338>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x232>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a54      	ldr	r2, [pc, #336]	@ (8001b5c <HAL_GPIO_Init+0x33c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a53      	ldr	r2, [pc, #332]	@ (8001b60 <HAL_GPIO_Init+0x340>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x22a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <HAL_GPIO_Init+0x344>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a51      	ldr	r2, [pc, #324]	@ (8001b68 <HAL_GPIO_Init+0x348>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x222>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <HAL_GPIO_Init+0x34c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x21e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	@ (8001b70 <HAL_GPIO_Init+0x350>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x21a>
 8001a36:	2309      	movs	r3, #9
 8001a38:	e012      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	e010      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a3e:	2308      	movs	r3, #8
 8001a40:	e00e      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a42:	2307      	movs	r3, #7
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x240>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	@ (8001b48 <HAL_GPIO_Init+0x328>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a34      	ldr	r2, [pc, #208]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <HAL_GPIO_Init+0x354>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f ae86 	bls.w	8001840 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	@ 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021400 	.word	0x40021400
 8001b64:	40021800 	.word	0x40021800
 8001b68:	40021c00 	.word	0x40021c00
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40022400 	.word	0x40022400
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4a22      	ldr	r2, [pc, #136]	@ (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bda:	f7ff fc4d 	bl	8001478 <HAL_GetTick>
 8001bde:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001be0:	e009      	b.n	8001bf6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001be2:	f7ff fc49 	bl	8001478 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bf0:	d901      	bls.n	8001bf6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e022      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d1ee      	bne.n	8001be2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff fc32 	bl	8001478 <HAL_GetTick>
 8001c14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c16:	e009      	b.n	8001c2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c18:	f7ff fc2e 	bl	8001478 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c26:	d901      	bls.n	8001c2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e007      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c38:	d1ee      	bne.n	8001c18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e29b      	b.n	800219a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b96      	ldr	r3, [pc, #600]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d00c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7c:	4b93      	ldr	r3, [pc, #588]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d112      	bne.n	8001cae <HAL_RCC_OscConfig+0x62>
 8001c88:	4b90      	ldr	r3, [pc, #576]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c94:	d10b      	bne.n	8001cae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	4b8d      	ldr	r3, [pc, #564]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d06c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x130>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d168      	bne.n	8001d7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e275      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x7a>
 8001cb8:	4b84      	ldr	r3, [pc, #528]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a83      	ldr	r2, [pc, #524]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e02e      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x9c>
 8001cce:	4b7f      	ldr	r3, [pc, #508]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7b      	ldr	r2, [pc, #492]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e01d      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0xc0>
 8001cf2:	4b76      	ldr	r3, [pc, #472]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b73      	ldr	r3, [pc, #460]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a72      	ldr	r2, [pc, #456]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0xd8>
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b6c      	ldr	r3, [pc, #432]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fba4 	bl	8001478 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fba0 	bl	8001478 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	@ 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e229      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b61      	ldr	r3, [pc, #388]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe8>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb90 	bl	8001478 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fb8c 	bl	8001478 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e215      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x110>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d069      	beq.n	8001e5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d8a:	4b50      	ldr	r3, [pc, #320]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b4d      	ldr	r3, [pc, #308]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x190>
 8001da2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1e9      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	493d      	ldr	r1, [pc, #244]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e040      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a38      	ldr	r2, [pc, #224]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb42 	bl	8001478 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7ff fb3e 	bl	8001478 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1c7      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4929      	ldr	r1, [pc, #164]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a26      	ldr	r2, [pc, #152]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb1e 	bl	8001478 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff fb1a 	bl	8001478 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1a3      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d038      	beq.n	8001edc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e76:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fafb 	bl	8001478 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff faf7 	bl	8001478 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e180      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x23a>
 8001ea4:	e01a      	b.n	8001edc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eaa:	4a08      	ldr	r2, [pc, #32]	@ (8001ecc <HAL_RCC_OscConfig+0x280>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fae1 	bl	8001478 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff fadd 	bl	8001478 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d903      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e166      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
 8001ecc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b92      	ldr	r3, [pc, #584]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a4 	beq.w	8002032 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b8c      	ldr	r3, [pc, #560]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b89      	ldr	r3, [pc, #548]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a88      	ldr	r2, [pc, #544]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b86      	ldr	r3, [pc, #536]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	4b83      	ldr	r3, [pc, #524]	@ (8002120 <HAL_RCC_OscConfig+0x4d4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f1e:	4b80      	ldr	r3, [pc, #512]	@ (8002120 <HAL_RCC_OscConfig+0x4d4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7f      	ldr	r2, [pc, #508]	@ (8002120 <HAL_RCC_OscConfig+0x4d4>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff faa5 	bl	8001478 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff faa1 	bl	8001478 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	@ 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e12a      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b76      	ldr	r3, [pc, #472]	@ (8002120 <HAL_RCC_OscConfig+0x4d4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x31a>
 8001f58:	4b70      	ldr	r3, [pc, #448]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a6f      	ldr	r2, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f64:	e02d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x33c>
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	4a6a      	ldr	r2, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7a:	4b68      	ldr	r3, [pc, #416]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	4a67      	ldr	r2, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f86:	e01c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x35e>
 8001f90:	4b62      	ldr	r3, [pc, #392]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	4a61      	ldr	r2, [pc, #388]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x376>
 8001faa:	4b5c      	ldr	r3, [pc, #368]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fae:	4a5b      	ldr	r2, [pc, #364]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb6:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	4a58      	ldr	r2, [pc, #352]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa55 	bl	8001478 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa51 	bl	8001478 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0d8      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x386>
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fa3f 	bl	8001478 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff fa3b 	bl	8001478 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0c2      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80ae 	beq.w	8002198 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800203c:	4b37      	ldr	r3, [pc, #220]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d06d      	beq.n	8002124 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d14b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a31      	ldr	r2, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fa0c 	bl	8001478 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fa08 	bl	8001478 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e091      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	071b      	lsls	r3, r3, #28
 80020ae:	491b      	ldr	r1, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a18      	ldr	r2, [pc, #96]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f9da 	bl	8001478 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f9d6 	bl	8001478 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e05f      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x47c>
 80020e6:	e057      	b.n	8002198 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 80020ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f9c0 	bl	8001478 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f9bc 	bl	8001478 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e045      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_RCC_OscConfig+0x4d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x4b0>
 800211a:	e03d      	b.n	8002198 <HAL_RCC_OscConfig+0x54c>
 800211c:	40023800 	.word	0x40023800
 8002120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_RCC_OscConfig+0x558>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d030      	beq.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d129      	bne.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d122      	bne.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800215a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800215c:	4293      	cmp	r3, r2
 800215e:	d119      	bne.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d10f      	bne.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d0      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b6a      	ldr	r3, [pc, #424]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b67      	ldr	r3, [pc, #412]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	4965      	ldr	r1, [pc, #404]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800220e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e073      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4936      	ldr	r1, [pc, #216]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229c:	f7ff f8ec 	bl	8001478 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff f8e8 	bl	8001478 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e053      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d210      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	4922      	ldr	r1, [pc, #136]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	@ (8002374 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1d0>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f848 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	08005da8 	.word	0x08005da8
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b094      	sub	sp, #80	@ 0x50
 8002386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	@ 0x44
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002398:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x40>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	f200 80e1 	bhi.w	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x3a>
 80023b2:	e0db      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b73      	ldr	r3, [pc, #460]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023b8:	e0db      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b72      	ldr	r3, [pc, #456]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 80023bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023be:	e0d8      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	2200      	movs	r2, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6139      	str	r1, [r7, #16]
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002424:	4659      	mov	r1, fp
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4651      	mov	r1, sl
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4651      	mov	r1, sl
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4651      	mov	r1, sl
 8002434:	ebb2 0801 	subs.w	r8, r2, r1
 8002438:	4659      	mov	r1, fp
 800243a:	eb63 0901 	sbc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	462b      	mov	r3, r5
 8002460:	eb49 0303 	adc.w	r3, r9, r3
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002472:	4629      	mov	r1, r5
 8002474:	028b      	lsls	r3, r1, #10
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800247c:	4621      	mov	r1, r4
 800247e:	028a      	lsls	r2, r1, #10
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800248c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002490:	f7fd fed2 	bl	8000238 <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800249c:	e058      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4611      	mov	r1, r2
 80024aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4641      	mov	r1, r8
 80024d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f0:	ebb2 040a 	subs.w	r4, r2, sl
 80024f4:	eb63 050b 	sbc.w	r5, r3, fp
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	61fa      	str	r2, [r7, #28]
 8002540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002544:	f7fd fe78 	bl	8000238 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 800256e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002574:	4618      	mov	r0, r3
 8002576:	3750      	adds	r7, #80	@ 0x50
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	00f42400 	.word	0x00f42400

08002588 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08005db8 	.word	0x08005db8

080025c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025cc:	f7ff ffdc 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0b5b      	lsrs	r3, r3, #13
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	@ (80025ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08005db8 	.word	0x08005db8

080025f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002618:	4b69      	ldr	r3, [pc, #420]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a68      	ldr	r2, [pc, #416]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	4964      	ldr	r1, [pc, #400]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800264a:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002650:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	4959      	ldr	r1, [pc, #356]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002664:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002686:	4b4e      	ldr	r3, [pc, #312]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	494a      	ldr	r1, [pc, #296]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 808b 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	4a39      	ldr	r2, [pc, #228]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e0:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ec:	4b35      	ldr	r3, [pc, #212]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a34      	ldr	r2, [pc, #208]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe febe 	bl	8001478 <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe feba 	bl	8001478 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e38f      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800271e:	4b28      	ldr	r3, [pc, #160]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d035      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d02e      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800273c:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002746:	4b1e      	ldr	r3, [pc, #120]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	4a1a      	ldr	r2, [pc, #104]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800275e:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002764:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d114      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fe82 	bl	8001478 <HAL_GetTick>
 8002774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe fe7e 	bl	8001478 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e351      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ee      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027a6:	d111      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b4:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027b6:	400b      	ands	r3, r1
 80027b8:	4901      	ldr	r1, [pc, #4]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
 80027be:	e00b      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000
 80027c8:	0ffffcff 	.word	0x0ffffcff
 80027cc:	4bac      	ldr	r3, [pc, #688]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4aab      	ldr	r2, [pc, #684]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027d6:	6093      	str	r3, [r2, #8]
 80027d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	49a6      	ldr	r1, [pc, #664]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027fc:	4aa0      	ldr	r2, [pc, #640]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002802:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002806:	4b9e      	ldr	r3, [pc, #632]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002808:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	499b      	ldr	r1, [pc, #620]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002824:	4b96      	ldr	r3, [pc, #600]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002832:	4993      	ldr	r1, [pc, #588]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002846:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002854:	498a      	ldr	r1, [pc, #552]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002868:	4b85      	ldr	r3, [pc, #532]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002876:	4982      	ldr	r1, [pc, #520]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800288a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002890:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	4979      	ldr	r1, [pc, #484]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ac:	4b74      	ldr	r3, [pc, #464]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	4971      	ldr	r1, [pc, #452]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d4:	f023 020c 	bic.w	r2, r3, #12
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	4968      	ldr	r1, [pc, #416]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f0:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	4960      	ldr	r1, [pc, #384]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002912:	4b5b      	ldr	r3, [pc, #364]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002918:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002920:	4957      	ldr	r1, [pc, #348]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002934:	4b52      	ldr	r3, [pc, #328]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002942:	494f      	ldr	r1, [pc, #316]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	4946      	ldr	r1, [pc, #280]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002978:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	493e      	ldr	r1, [pc, #248]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a8:	4935      	ldr	r1, [pc, #212]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029bc:	4b30      	ldr	r3, [pc, #192]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ca:	492d      	ldr	r1, [pc, #180]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029de:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029ec:	4924      	ldr	r1, [pc, #144]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1e:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2c:	4914      	ldr	r1, [pc, #80]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a50:	490b      	ldr	r1, [pc, #44]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00f      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a74:	4902      	ldr	r1, [pc, #8]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a90:	4b8a      	ldr	r3, [pc, #552]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	4986      	ldr	r1, [pc, #536]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ab4:	4b81      	ldr	r3, [pc, #516]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac4:	497d      	ldr	r1, [pc, #500]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d006      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80d6 	beq.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ae0:	4b76      	ldr	r3, [pc, #472]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a75      	ldr	r2, [pc, #468]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fcc4 	bl	8001478 <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af4:	f7fe fcc0 	bl	8001478 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e195      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b06:	4b6d      	ldr	r3, [pc, #436]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d021      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11d      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b26:	4b65      	ldr	r3, [pc, #404]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b34:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b3a:	0e1b      	lsrs	r3, r3, #24
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4958      	ldr	r1, [pc, #352]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02e      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8c:	d129      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b9c:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba2:	0f1b      	lsrs	r3, r3, #28
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	019a      	lsls	r2, r3, #6
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	071b      	lsls	r3, r3, #28
 8002bc2:	493e      	ldr	r1, [pc, #248]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bca:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	f023 021f 	bic.w	r2, r3, #31
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	4938      	ldr	r1, [pc, #224]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01d      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bee:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf4:	0e1b      	lsrs	r3, r3, #24
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c02:	0f1b      	lsrs	r3, r3, #28
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	019a      	lsls	r2, r3, #6
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	431a      	orrs	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	071b      	lsls	r3, r3, #28
 8002c22:	4926      	ldr	r1, [pc, #152]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	019a      	lsls	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	071b      	lsls	r3, r3, #28
 8002c52:	491a      	ldr	r1, [pc, #104]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a17      	ldr	r2, [pc, #92]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c66:	f7fe fc07 	bl	8001478 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c6e:	f7fe fc03 	bl	8001478 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	@ 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0d8      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	f040 80ce 	bne.w	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fbea 	bl	8001478 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca8:	f7fe fbe6 	bl	8001478 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d904      	bls.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0bb      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ccc:	d0ec      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02e      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d12a      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d04:	4b4d      	ldr	r3, [pc, #308]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	0f1b      	lsrs	r3, r3, #28
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	019a      	lsls	r2, r3, #6
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	4944      	ldr	r1, [pc, #272]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d32:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	493d      	ldr	r1, [pc, #244]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d022      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d60:	d11d      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d62:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	0e1b      	lsrs	r3, r3, #24
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d70:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	0f1b      	lsrs	r3, r3, #28
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	019a      	lsls	r2, r3, #6
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	4929      	ldr	r1, [pc, #164]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	0e1b      	lsrs	r3, r3, #24
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db8:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	019a      	lsls	r2, r3, #6
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	071b      	lsls	r3, r3, #28
 8002dde:	4917      	ldr	r1, [pc, #92]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002de6:	4b15      	ldr	r3, [pc, #84]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	4911      	ldr	r1, [pc, #68]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0e      	ldr	r2, [pc, #56]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e08:	f7fe fb36 	bl	8001478 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e10:	f7fe fb32 	bl	8001478 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	@ 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e007      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e2e:	d1ef      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e049      	b.n	8002ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f8c8 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 fe6c 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e054      	b.n	8002fb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a26      	ldr	r2, [pc, #152]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d01d      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d018      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <HAL_TIM_Base_Start_IT+0xdc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d115      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xec>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d015      	beq.n	8002fae <HAL_TIM_Base_Start_IT+0xbe>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f88:	d011      	beq.n	8002fae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e008      	b.n	8002fae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e000      	b.n	8002fb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40010400 	.word	0x40010400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40001800 	.word	0x40001800
 8002fdc:	00010007 	.word	0x00010007

08002fe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e049      	b.n	8003086 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f841 	bl	800308e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 fd9c 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_PWM_Start+0x24>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e03c      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d109      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x3e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e02f      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_PWM_Start+0x58>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e022      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d109      	bne.n	8003116 <HAL_TIM_PWM_Start+0x72>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e015      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d109      	bne.n	8003130 <HAL_TIM_PWM_Start+0x8c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e008      	b.n	8003142 <HAL_TIM_PWM_Start+0x9e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e092      	b.n	8003270 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_TIM_PWM_Start+0xb6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003158:	e023      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d104      	bne.n	800316a <HAL_TIM_PWM_Start+0xc6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003168:	e01b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_TIM_PWM_Start+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003178:	e013      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0xe6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003188:	e00b      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0xf6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	e003      	b.n	80031a2 <HAL_TIM_PWM_Start+0xfe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 f874 	bl	8004298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a30      	ldr	r2, [pc, #192]	@ (8003278 <HAL_TIM_PWM_Start+0x1d4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x120>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2f      	ldr	r2, [pc, #188]	@ (800327c <HAL_TIM_PWM_Start+0x1d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_PWM_Start+0x124>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_TIM_PWM_Start+0x126>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a25      	ldr	r2, [pc, #148]	@ (8003278 <HAL_TIM_PWM_Start+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f0:	d01d      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <HAL_TIM_PWM_Start+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a20      	ldr	r2, [pc, #128]	@ (8003284 <HAL_TIM_PWM_Start+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <HAL_TIM_PWM_Start+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	@ (800327c <HAL_TIM_PWM_Start+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <HAL_TIM_PWM_Start+0x1e8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_PWM_Start+0x18a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <HAL_TIM_PWM_Start+0x1ec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <HAL_TIM_PWM_Start+0x1f0>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d015      	beq.n	800326c <HAL_TIM_PWM_Start+0x1c8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003246:	d011      	beq.n	800326c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e008      	b.n	800326c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e000      	b.n	800326e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000
 8003290:	40001800 	.word	0x40001800
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e08f      	b.n	80033cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fed3 	bl	800106c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b3e      	ldr	r3, [pc, #248]	@ (80033d4 <HAL_TIM_Encoder_Init+0x13c>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f000 fc37 	bl	8003b5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_TIM_Encoder_Init+0x140>)
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4313      	orrs	r3, r2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_TIM_Encoder_Init+0x144>)
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <HAL_TIM_Encoder_Init+0x148>)
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	4313      	orrs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	011a      	lsls	r2, r3, #4
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	031b      	lsls	r3, r3, #12
 8003358:	4313      	orrs	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4313      	orrs	r3, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	fffebff8 	.word	0xfffebff8
 80033d8:	fffffcfc 	.word	0xfffffcfc
 80033dc:	fffff3f3 	.word	0xfffff3f3
 80033e0:	ffff0f0f 	.word	0xffff0f0f

080033e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003404:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800340c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d110      	bne.n	8003436 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800341a:	7b7b      	ldrb	r3, [r7, #13]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e089      	b.n	8003538 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003434:	e031      	b.n	800349a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d110      	bne.n	800345e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003442:	7b3b      	ldrb	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e075      	b.n	8003538 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800345c:	e01d      	b.n	800349a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d108      	bne.n	8003476 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800346a:	7b7b      	ldrb	r3, [r7, #13]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d102      	bne.n	8003476 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003470:	7b3b      	ldrb	r3, [r7, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e05e      	b.n	8003538 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d010      	beq.n	80034c8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80034a6:	e01f      	b.n	80034e8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fef1 	bl	8004298 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0202 	orr.w	r2, r2, #2
 80034c4:	60da      	str	r2, [r3, #12]
      break;
 80034c6:	e02e      	b.n	8003526 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2201      	movs	r2, #1
 80034ce:	2104      	movs	r1, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fee1 	bl	8004298 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0204 	orr.w	r2, r2, #4
 80034e4:	60da      	str	r2, [r3, #12]
      break;
 80034e6:	e01e      	b.n	8003526 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fed1 	bl	8004298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	2104      	movs	r1, #4
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 feca 	bl	8004298 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0202 	orr.w	r2, r2, #2
 8003512:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	60da      	str	r2, [r3, #12]
      break;
 8003524:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d020      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fba8 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fac4 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 facb 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d020      	beq.n	80035f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01b      	beq.n	80035f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0204 	mvn.w	r2, #4
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fb82 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa9e 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 faa5 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fb5c 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa78 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa7f 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fb36 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa52 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fa59 	bl	8003b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0201 	mvn.w	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa30 	bl	8003b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 ff1b 	bl	8004510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 ff13 	bl	8004524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00c      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fa13 	bl	8003b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0220 	mvn.w	r2, #32
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fedb 	bl	80044fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0ff      	b.n	800396e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b14      	cmp	r3, #20
 800377a:	f200 80f0 	bhi.w	800395e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037d9 	.word	0x080037d9
 8003788:	0800395f 	.word	0x0800395f
 800378c:	0800395f 	.word	0x0800395f
 8003790:	0800395f 	.word	0x0800395f
 8003794:	08003819 	.word	0x08003819
 8003798:	0800395f 	.word	0x0800395f
 800379c:	0800395f 	.word	0x0800395f
 80037a0:	0800395f 	.word	0x0800395f
 80037a4:	0800385b 	.word	0x0800385b
 80037a8:	0800395f 	.word	0x0800395f
 80037ac:	0800395f 	.word	0x0800395f
 80037b0:	0800395f 	.word	0x0800395f
 80037b4:	0800389b 	.word	0x0800389b
 80037b8:	0800395f 	.word	0x0800395f
 80037bc:	0800395f 	.word	0x0800395f
 80037c0:	0800395f 	.word	0x0800395f
 80037c4:	080038dd 	.word	0x080038dd
 80037c8:	0800395f 	.word	0x0800395f
 80037cc:	0800395f 	.word	0x0800395f
 80037d0:	0800395f 	.word	0x0800395f
 80037d4:	0800391d 	.word	0x0800391d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fa62 	bl	8003ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0208 	orr.w	r2, r2, #8
 80037f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	619a      	str	r2, [r3, #24]
      break;
 8003816:	e0a5      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fab4 	bl	8003d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6999      	ldr	r1, [r3, #24]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	619a      	str	r2, [r3, #24]
      break;
 8003858:	e084      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb0b 	bl	8003e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0208 	orr.w	r2, r2, #8
 8003874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0204 	bic.w	r2, r2, #4
 8003884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69d9      	ldr	r1, [r3, #28]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
      break;
 8003898:	e064      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fb61 	bl	8003f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69d9      	ldr	r1, [r3, #28]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	021a      	lsls	r2, r3, #8
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	61da      	str	r2, [r3, #28]
      break;
 80038da:	e043      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb98 	bl	8004018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800391a:	e023      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fbca 	bl	80040bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800395c:	e002      	b.n	8003964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
      break;
 8003962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_ConfigClockSource+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b4      	b.n	8003afe <HAL_TIM_ConfigClockSource+0x186>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4b56      	ldr	r3, [pc, #344]	@ (8003b08 <HAL_TIM_ConfigClockSource+0x190>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039cc:	d03e      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0xd4>
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d2:	f200 8087 	bhi.w	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039da:	f000 8086 	beq.w	8003aea <HAL_TIM_ConfigClockSource+0x172>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e2:	d87f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b70      	cmp	r3, #112	@ 0x70
 80039e6:	d01a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xa6>
 80039e8:	2b70      	cmp	r3, #112	@ 0x70
 80039ea:	d87b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b60      	cmp	r3, #96	@ 0x60
 80039ee:	d050      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x11a>
 80039f0:	2b60      	cmp	r3, #96	@ 0x60
 80039f2:	d877      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b50      	cmp	r3, #80	@ 0x50
 80039f6:	d03c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xfa>
 80039f8:	2b50      	cmp	r3, #80	@ 0x50
 80039fa:	d873      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b40      	cmp	r3, #64	@ 0x40
 80039fe:	d058      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d86f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b30      	cmp	r3, #48	@ 0x30
 8003a06:	d064      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	2b30      	cmp	r3, #48	@ 0x30
 8003a0a:	d86b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d060      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d867      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d05a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a1c:	e062      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	f000 fc13 	bl	8004258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]
      break;
 8003a4a:	e04f      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	f000 fbfc 	bl	8004258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a6e:	609a      	str	r2, [r3, #8]
      break;
 8003a70:	e03c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 fb70 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2150      	movs	r1, #80	@ 0x50
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fbc9 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e02c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 fb8f 	bl	80041c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2160      	movs	r1, #96	@ 0x60
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fbb9 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e01c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 fb50 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2140      	movs	r1, #64	@ 0x40
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fba9 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 fba0 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003ae2:	e003      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e000      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	fffeff88 	.word	0xfffeff88

08003b0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a43      	ldr	r2, [pc, #268]	@ (8003c7c <TIM_Base_SetConfig+0x120>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b7a:	d00f      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a40      	ldr	r2, [pc, #256]	@ (8003c80 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3f      	ldr	r2, [pc, #252]	@ (8003c84 <TIM_Base_SetConfig+0x128>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c88 <TIM_Base_SetConfig+0x12c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a3d      	ldr	r2, [pc, #244]	@ (8003c8c <TIM_Base_SetConfig+0x130>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a32      	ldr	r2, [pc, #200]	@ (8003c7c <TIM_Base_SetConfig+0x120>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbc:	d027      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d023      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8003c84 <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01f      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d017      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00f      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a29      	ldr	r2, [pc, #164]	@ (8003c98 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <TIM_Base_SetConfig+0x140>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a27      	ldr	r2, [pc, #156]	@ (8003ca0 <TIM_Base_SetConfig+0x144>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d003      	beq.n	8003c0e <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a26      	ldr	r2, [pc, #152]	@ (8003ca4 <TIM_Base_SetConfig+0x148>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d108      	bne.n	8003c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a0e      	ldr	r2, [pc, #56]	@ (8003c7c <TIM_Base_SetConfig+0x120>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0xf2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a10      	ldr	r2, [pc, #64]	@ (8003c8c <TIM_Base_SetConfig+0x130>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d103      	bne.n	8003c56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f043 0204 	orr.w	r2, r3, #4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800
 8003c9c:	40001800 	.word	0x40001800
 8003ca0:	40001c00 	.word	0x40001c00
 8003ca4:	40002000 	.word	0x40002000

08003ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f023 0201 	bic.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <TIM_OC1_SetConfig+0xd8>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <TIM_OC1_SetConfig+0xdc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC1_SetConfig+0x64>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <TIM_OC1_SetConfig+0xe0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10c      	bne.n	8003d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0308 	bic.w	r3, r3, #8
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <TIM_OC1_SetConfig+0xdc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC1_SetConfig+0x8e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <TIM_OC1_SetConfig+0xe0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d111      	bne.n	8003d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	fffeff8f 	.word	0xfffeff8f
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010400 	.word	0x40010400

08003d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0210 	bic.w	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <TIM_OC2_SetConfig+0xe4>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0320 	bic.w	r3, r3, #32
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a23      	ldr	r2, [pc, #140]	@ (8003e74 <TIM_OC2_SetConfig+0xe8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_OC2_SetConfig+0x68>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <TIM_OC2_SetConfig+0xec>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10d      	bne.n	8003e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <TIM_OC2_SetConfig+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_OC2_SetConfig+0x94>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <TIM_OC2_SetConfig+0xec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d113      	bne.n	8003e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	feff8fff 	.word	0xfeff8fff
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010400 	.word	0x40010400

08003e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <TIM_OC3_SetConfig+0xe0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	@ (8003f60 <TIM_OC3_SetConfig+0xe4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC3_SetConfig+0x66>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <TIM_OC3_SetConfig+0xe8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10d      	bne.n	8003efe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <TIM_OC3_SetConfig+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_OC3_SetConfig+0x92>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <TIM_OC3_SetConfig+0xe8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d113      	bne.n	8003f36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	fffeff8f 	.word	0xfffeff8f
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40010400 	.word	0x40010400

08003f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <TIM_OC4_SetConfig+0xa4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <TIM_OC4_SetConfig+0xa8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC4_SetConfig+0x68>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a12      	ldr	r2, [pc, #72]	@ (8004014 <TIM_OC4_SetConfig+0xac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d109      	bne.n	8003fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	feff8fff 	.word	0xfeff8fff
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <TIM_OC5_SetConfig+0x98>)
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004058:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a12      	ldr	r2, [pc, #72]	@ (80040b4 <TIM_OC5_SetConfig+0x9c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC5_SetConfig+0x5e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <TIM_OC5_SetConfig+0xa0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d109      	bne.n	800408a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	fffeff8f 	.word	0xfffeff8f
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400

080040bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <TIM_OC6_SetConfig+0x9c>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	051b      	lsls	r3, r3, #20
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <TIM_OC6_SetConfig+0xa0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC6_SetConfig+0x60>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a12      	ldr	r2, [pc, #72]	@ (8004160 <TIM_OC6_SetConfig+0xa4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d109      	bne.n	8004130 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	feff8fff 	.word	0xfeff8fff
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f023 0210 	bic.w	r2, r3, #16
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2201      	movs	r2, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1a      	ldr	r2, [r3, #32]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e06d      	b.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a30      	ldr	r2, [pc, #192]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a20      	ldr	r2, [pc, #128]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d01d      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1a      	ldr	r2, [pc, #104]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a16      	ldr	r2, [pc, #88]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a15      	ldr	r2, [pc, #84]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10c      	bne.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40001800 	.word	0x40001800

08004400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004418:	2302      	movs	r3, #2
 800441a:	e065      	b.n	80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a16      	ldr	r2, [pc, #88]	@ (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d115      	bne.n	80044d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40010400 	.word	0x40010400

080044fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e040      	b.n	80045cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fe28 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	@ 0x24
 8004564:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fe86 	bl	8005290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fc1f 	bl	8004dc8 <UART_SetConfig>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e01b      	b.n	80045cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 ff05 	bl	80053d4 <UART_CheckIdleState>
 80045ca:	4603      	mov	r3, r0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d177      	bne.n	80046dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Transmit+0x24>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e070      	b.n	80046de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2221      	movs	r2, #33	@ 0x21
 8004608:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460a:	f7fc ff35 	bl	8001478 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004628:	d108      	bne.n	800463c <HAL_UART_Transmit+0x68>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e003      	b.n	8004644 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004644:	e02f      	b.n	80046a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2180      	movs	r1, #128	@ 0x80
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 ff67 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e03b      	b.n	80046de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	3302      	adds	r3, #2
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e007      	b.n	8004694 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1c9      	bne.n	8004646 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2140      	movs	r1, #64	@ 0x40
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 ff31 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e005      	b.n	80046de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08a      	sub	sp, #40	@ 0x28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	4613      	mov	r3, r2
 80046f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d132      	bne.n	8004764 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_UART_Receive_IT+0x24>
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e02b      	b.n	8004766 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d018      	beq.n	8004754 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	61bb      	str	r3, [r7, #24]
   return(result);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	461a      	mov	r2, r3
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 ff50 	bl	8005600 <UART_Start_Receive_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	e000      	b.n	8004766 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3728      	adds	r7, #40	@ 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0ba      	sub	sp, #232	@ 0xe8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800479a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800479e:	4013      	ands	r3, r2
 80047a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d115      	bne.n	80047d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00f      	beq.n	80047d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 82c6 	beq.w	8004d5a <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
      }
      return;
 80047d6:	e2c0      	b.n	8004d5a <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8117 	beq.w	8004a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047f2:	4b85      	ldr	r3, [pc, #532]	@ (8004a08 <HAL_UART_IRQHandler+0x298>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 810a 	beq.w	8004a10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_UART_IRQHandler+0xbc>
 8004808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
 8004838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2202      	movs	r2, #2
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_UART_IRQHandler+0x11c>
 8004868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2204      	movs	r2, #4
 800487a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004882:	f043 0202 	orr.w	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_UART_IRQHandler+0x18a>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 822c 	beq.w	8004d5e <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00d      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004934:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800494a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d04f      	beq.n	80049f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 ff1a 	bl	800578c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d141      	bne.n	80049ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3308      	adds	r3, #8
 800496c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800497c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800499e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1d9      	bne.n	8004966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d013      	beq.n	80049e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <HAL_UART_IRQHandler+0x29c>)
 80049c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc ff07 	bl	80017da <HAL_DMA_Abort_IT>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049dc:	4610      	mov	r0, r2
 80049de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	e00f      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9d0 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	e00b      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9cc 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e007      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9c8 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a00:	e1ad      	b.n	8004d5e <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a02:	bf00      	nop
    return;
 8004a04:	e1ab      	b.n	8004d5e <HAL_UART_IRQHandler+0x5ee>
 8004a06:	bf00      	nop
 8004a08:	04000120 	.word	0x04000120
 8004a0c:	08005855 	.word	0x08005855

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 8166 	bne.w	8004ce6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 815f 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8158 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b40      	cmp	r3, #64	@ 0x40
 8004a4a:	f040 80d0 	bne.w	8004bee <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80ab 	beq.w	8004bba <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	f080 80a3 	bcs.w	8004bba <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a88:	f000 8086 	beq.w	8004b98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1da      	bne.n	8004a8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004afa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e1      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e3      	bne.n	8004b12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e4      	bne.n	8004b58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fdb1 	bl	80016fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8f2 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bb8:	e0d3      	b.n	8004d62 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	f040 80cc 	bne.w	8004d62 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd4:	f040 80c5 	bne.w	8004d62 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8d8 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
      return;
 8004bec:	e0b9      	b.n	8004d62 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80ab 	beq.w	8004d66 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8004c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a6 	beq.w	8004d66 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e4      	bne.n	8004c1a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c74:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e3      	bne.n	8004c50 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	69b9      	ldr	r1, [r7, #24]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	617b      	str	r3, [r7, #20]
   return(result);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e4      	bne.n	8004c9c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f85c 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ce4:	e03f      	b.n	8004d66 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <HAL_UART_IRQHandler+0x5a0>
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f853 	bl	8004db4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d0e:	e02d      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00e      	beq.n	8004d3a <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
    }
    return;
 8004d38:	e017      	b.n	8004d6a <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
 8004d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fd90 	bl	8005878 <UART_EndTransmit_IT>
    return;
 8004d58:	e008      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
      return;
 8004d5a:	bf00      	nop
 8004d5c:	e006      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
    return;
 8004d5e:	bf00      	nop
 8004d60:	e004      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
      return;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
      return;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <HAL_UART_IRQHandler+0x5fc>
    return;
 8004d6a:	bf00      	nop
  }

}
 8004d6c:	37e8      	adds	r7, #232	@ 0xe8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop

08004d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4ba6      	ldr	r3, [pc, #664]	@ (800508c <UART_SetConfig+0x2c4>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a94      	ldr	r2, [pc, #592]	@ (8005090 <UART_SetConfig+0x2c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d120      	bne.n	8004e86 <UART_SetConfig+0xbe>
 8004e44:	4b93      	ldr	r3, [pc, #588]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d816      	bhi.n	8004e80 <UART_SetConfig+0xb8>
 8004e52:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <UART_SetConfig+0x90>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e75 	.word	0x08004e75
 8004e60:	08004e6f 	.word	0x08004e6f
 8004e64:	08004e7b 	.word	0x08004e7b
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e150      	b.n	8005110 <UART_SetConfig+0x348>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e14d      	b.n	8005110 <UART_SetConfig+0x348>
 8004e74:	2304      	movs	r3, #4
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e14a      	b.n	8005110 <UART_SetConfig+0x348>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e147      	b.n	8005110 <UART_SetConfig+0x348>
 8004e80:	2310      	movs	r3, #16
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e144      	b.n	8005110 <UART_SetConfig+0x348>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a83      	ldr	r2, [pc, #524]	@ (8005098 <UART_SetConfig+0x2d0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d132      	bne.n	8004ef6 <UART_SetConfig+0x12e>
 8004e90:	4b80      	ldr	r3, [pc, #512]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d828      	bhi.n	8004ef0 <UART_SetConfig+0x128>
 8004e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <UART_SetConfig+0xdc>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ef1 	.word	0x08004ef1
 8004eac:	08004ef1 	.word	0x08004ef1
 8004eb0:	08004ef1 	.word	0x08004ef1
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004ef1 	.word	0x08004ef1
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004ef1 	.word	0x08004ef1
 8004ec4:	08004edf 	.word	0x08004edf
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef1 	.word	0x08004ef1
 8004ed4:	08004eeb 	.word	0x08004eeb
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e118      	b.n	8005110 <UART_SetConfig+0x348>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e115      	b.n	8005110 <UART_SetConfig+0x348>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e112      	b.n	8005110 <UART_SetConfig+0x348>
 8004eea:	2308      	movs	r3, #8
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e10f      	b.n	8005110 <UART_SetConfig+0x348>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e10c      	b.n	8005110 <UART_SetConfig+0x348>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a68      	ldr	r2, [pc, #416]	@ (800509c <UART_SetConfig+0x2d4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d120      	bne.n	8004f42 <UART_SetConfig+0x17a>
 8004f00:	4b64      	ldr	r3, [pc, #400]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f0a:	2b30      	cmp	r3, #48	@ 0x30
 8004f0c:	d013      	beq.n	8004f36 <UART_SetConfig+0x16e>
 8004f0e:	2b30      	cmp	r3, #48	@ 0x30
 8004f10:	d814      	bhi.n	8004f3c <UART_SetConfig+0x174>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d009      	beq.n	8004f2a <UART_SetConfig+0x162>
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d810      	bhi.n	8004f3c <UART_SetConfig+0x174>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <UART_SetConfig+0x15c>
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d006      	beq.n	8004f30 <UART_SetConfig+0x168>
 8004f22:	e00b      	b.n	8004f3c <UART_SetConfig+0x174>
 8004f24:	2300      	movs	r3, #0
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e0f2      	b.n	8005110 <UART_SetConfig+0x348>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e0ef      	b.n	8005110 <UART_SetConfig+0x348>
 8004f30:	2304      	movs	r3, #4
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0ec      	b.n	8005110 <UART_SetConfig+0x348>
 8004f36:	2308      	movs	r3, #8
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0e9      	b.n	8005110 <UART_SetConfig+0x348>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0e6      	b.n	8005110 <UART_SetConfig+0x348>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a56      	ldr	r2, [pc, #344]	@ (80050a0 <UART_SetConfig+0x2d8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d120      	bne.n	8004f8e <UART_SetConfig+0x1c6>
 8004f4c:	4b51      	ldr	r3, [pc, #324]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f58:	d013      	beq.n	8004f82 <UART_SetConfig+0x1ba>
 8004f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f5c:	d814      	bhi.n	8004f88 <UART_SetConfig+0x1c0>
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d009      	beq.n	8004f76 <UART_SetConfig+0x1ae>
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d810      	bhi.n	8004f88 <UART_SetConfig+0x1c0>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <UART_SetConfig+0x1a8>
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d006      	beq.n	8004f7c <UART_SetConfig+0x1b4>
 8004f6e:	e00b      	b.n	8004f88 <UART_SetConfig+0x1c0>
 8004f70:	2300      	movs	r3, #0
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e0cc      	b.n	8005110 <UART_SetConfig+0x348>
 8004f76:	2302      	movs	r3, #2
 8004f78:	77fb      	strb	r3, [r7, #31]
 8004f7a:	e0c9      	b.n	8005110 <UART_SetConfig+0x348>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e0c6      	b.n	8005110 <UART_SetConfig+0x348>
 8004f82:	2308      	movs	r3, #8
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e0c3      	b.n	8005110 <UART_SetConfig+0x348>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e0c0      	b.n	8005110 <UART_SetConfig+0x348>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a44      	ldr	r2, [pc, #272]	@ (80050a4 <UART_SetConfig+0x2dc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d125      	bne.n	8004fe4 <UART_SetConfig+0x21c>
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa6:	d017      	beq.n	8004fd8 <UART_SetConfig+0x210>
 8004fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fac:	d817      	bhi.n	8004fde <UART_SetConfig+0x216>
 8004fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb2:	d00b      	beq.n	8004fcc <UART_SetConfig+0x204>
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb8:	d811      	bhi.n	8004fde <UART_SetConfig+0x216>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <UART_SetConfig+0x1fe>
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc2:	d006      	beq.n	8004fd2 <UART_SetConfig+0x20a>
 8004fc4:	e00b      	b.n	8004fde <UART_SetConfig+0x216>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e0a1      	b.n	8005110 <UART_SetConfig+0x348>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e09e      	b.n	8005110 <UART_SetConfig+0x348>
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e09b      	b.n	8005110 <UART_SetConfig+0x348>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e098      	b.n	8005110 <UART_SetConfig+0x348>
 8004fde:	2310      	movs	r3, #16
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e095      	b.n	8005110 <UART_SetConfig+0x348>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80050a8 <UART_SetConfig+0x2e0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d125      	bne.n	800503a <UART_SetConfig+0x272>
 8004fee:	4b29      	ldr	r3, [pc, #164]	@ (8005094 <UART_SetConfig+0x2cc>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ff8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ffc:	d017      	beq.n	800502e <UART_SetConfig+0x266>
 8004ffe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005002:	d817      	bhi.n	8005034 <UART_SetConfig+0x26c>
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005008:	d00b      	beq.n	8005022 <UART_SetConfig+0x25a>
 800500a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500e:	d811      	bhi.n	8005034 <UART_SetConfig+0x26c>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x254>
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x260>
 800501a:	e00b      	b.n	8005034 <UART_SetConfig+0x26c>
 800501c:	2301      	movs	r3, #1
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e076      	b.n	8005110 <UART_SetConfig+0x348>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e073      	b.n	8005110 <UART_SetConfig+0x348>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e070      	b.n	8005110 <UART_SetConfig+0x348>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e06d      	b.n	8005110 <UART_SetConfig+0x348>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e06a      	b.n	8005110 <UART_SetConfig+0x348>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <UART_SetConfig+0x2e4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d138      	bne.n	80050b6 <UART_SetConfig+0x2ee>
 8005044:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800504e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005052:	d017      	beq.n	8005084 <UART_SetConfig+0x2bc>
 8005054:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005058:	d82a      	bhi.n	80050b0 <UART_SetConfig+0x2e8>
 800505a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505e:	d00b      	beq.n	8005078 <UART_SetConfig+0x2b0>
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005064:	d824      	bhi.n	80050b0 <UART_SetConfig+0x2e8>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <UART_SetConfig+0x2aa>
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506e:	d006      	beq.n	800507e <UART_SetConfig+0x2b6>
 8005070:	e01e      	b.n	80050b0 <UART_SetConfig+0x2e8>
 8005072:	2300      	movs	r3, #0
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e04b      	b.n	8005110 <UART_SetConfig+0x348>
 8005078:	2302      	movs	r3, #2
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e048      	b.n	8005110 <UART_SetConfig+0x348>
 800507e:	2304      	movs	r3, #4
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e045      	b.n	8005110 <UART_SetConfig+0x348>
 8005084:	2308      	movs	r3, #8
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e042      	b.n	8005110 <UART_SetConfig+0x348>
 800508a:	bf00      	nop
 800508c:	efff69f3 	.word	0xefff69f3
 8005090:	40011000 	.word	0x40011000
 8005094:	40023800 	.word	0x40023800
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800
 80050a0:	40004c00 	.word	0x40004c00
 80050a4:	40005000 	.word	0x40005000
 80050a8:	40011400 	.word	0x40011400
 80050ac:	40007800 	.word	0x40007800
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e02c      	b.n	8005110 <UART_SetConfig+0x348>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a72      	ldr	r2, [pc, #456]	@ (8005284 <UART_SetConfig+0x4bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d125      	bne.n	800510c <UART_SetConfig+0x344>
 80050c0:	4b71      	ldr	r3, [pc, #452]	@ (8005288 <UART_SetConfig+0x4c0>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050ce:	d017      	beq.n	8005100 <UART_SetConfig+0x338>
 80050d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050d4:	d817      	bhi.n	8005106 <UART_SetConfig+0x33e>
 80050d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050da:	d00b      	beq.n	80050f4 <UART_SetConfig+0x32c>
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e0:	d811      	bhi.n	8005106 <UART_SetConfig+0x33e>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <UART_SetConfig+0x326>
 80050e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ea:	d006      	beq.n	80050fa <UART_SetConfig+0x332>
 80050ec:	e00b      	b.n	8005106 <UART_SetConfig+0x33e>
 80050ee:	2300      	movs	r3, #0
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e00d      	b.n	8005110 <UART_SetConfig+0x348>
 80050f4:	2302      	movs	r3, #2
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e00a      	b.n	8005110 <UART_SetConfig+0x348>
 80050fa:	2304      	movs	r3, #4
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e007      	b.n	8005110 <UART_SetConfig+0x348>
 8005100:	2308      	movs	r3, #8
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e004      	b.n	8005110 <UART_SetConfig+0x348>
 8005106:	2310      	movs	r3, #16
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e001      	b.n	8005110 <UART_SetConfig+0x348>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005118:	d15b      	bne.n	80051d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800511a:	7ffb      	ldrb	r3, [r7, #31]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d828      	bhi.n	8005172 <UART_SetConfig+0x3aa>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0x360>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005173 	.word	0x08005173
 8005138:	08005163 	.word	0x08005163
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
 8005148:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fd fa28 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8005150:	61b8      	str	r0, [r7, #24]
        break;
 8005152:	e013      	b.n	800517c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fd fa38 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b4b      	ldr	r3, [pc, #300]	@ (800528c <UART_SetConfig+0x4c4>)
 800515e:	61bb      	str	r3, [r7, #24]
        break;
 8005160:	e00c      	b.n	800517c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fd f90d 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8005166:	61b8      	str	r0, [r7, #24]
        break;
 8005168:	e008      	b.n	800517c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	61bb      	str	r3, [r7, #24]
        break;
 8005170:	e004      	b.n	800517c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	77bb      	strb	r3, [r7, #30]
        break;
 800517a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d074      	beq.n	800526c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	005a      	lsls	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b0f      	cmp	r3, #15
 800519c:	d916      	bls.n	80051cc <UART_SetConfig+0x404>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d212      	bcs.n	80051cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f023 030f 	bic.w	r3, r3, #15
 80051ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	4313      	orrs	r3, r2
 80051c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	89fa      	ldrh	r2, [r7, #14]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e04f      	b.n	800526c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	77bb      	strb	r3, [r7, #30]
 80051d0:	e04c      	b.n	800526c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d2:	7ffb      	ldrb	r3, [r7, #31]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d828      	bhi.n	800522a <UART_SetConfig+0x462>
 80051d8:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x418>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fd f9cc 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e013      	b.n	8005234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fd f9dc 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8005210:	61b8      	str	r0, [r7, #24]
        break;
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b1d      	ldr	r3, [pc, #116]	@ (800528c <UART_SetConfig+0x4c4>)
 8005216:	61bb      	str	r3, [r7, #24]
        break;
 8005218:	e00c      	b.n	8005234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fd f8b1 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800521e:	61b8      	str	r0, [r7, #24]
        break;
 8005220:	e008      	b.n	8005234 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e004      	b.n	8005234 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	77bb      	strb	r3, [r7, #30]
        break;
 8005232:	bf00      	nop
    }

    if (pclk != 0U)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085a      	lsrs	r2, r3, #1
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d909      	bls.n	8005268 <UART_SetConfig+0x4a0>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525a:	d205      	bcs.n	8005268 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e001      	b.n	800526c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005278:	7fbb      	ldrb	r3, [r7, #30]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40007c00 	.word	0x40007c00
 8005288:	40023800 	.word	0x40023800
 800528c:	00f42400 	.word	0x00f42400

08005290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800538e:	d10a      	bne.n	80053a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b098      	sub	sp, #96	@ 0x60
 80053d8:	af02      	add	r7, sp, #8
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e4:	f7fc f848 	bl	8001478 <HAL_GetTick>
 80053e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d12e      	bne.n	8005456 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005400:	2200      	movs	r2, #0
 8005402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f88c 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d021      	beq.n	8005456 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005426:	653b      	str	r3, [r7, #80]	@ 0x50
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005430:	647b      	str	r3, [r7, #68]	@ 0x44
 8005432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e6      	bne.n	8005412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e062      	b.n	800551c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b04      	cmp	r3, #4
 8005462:	d149      	bne.n	80054f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546c:	2200      	movs	r2, #0
 800546e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f856 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03c      	beq.n	80054f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	623b      	str	r3, [r7, #32]
   return(result);
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
 800549e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e011      	b.n	800551c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3758      	adds	r7, #88	@ 0x58
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	e04f      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d04b      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fb ff9b 	bl	8001478 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e04e      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d037      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d034      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d031      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d110      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f8ff 	bl	800578c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2208      	movs	r2, #8
 8005592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e029      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b0:	d111      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f8e5 	bl	800578c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d0a0      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005600:	b480      	push	{r7}
 8005602:	b097      	sub	sp, #92	@ 0x5c
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d10e      	bne.n	8005652 <UART_Start_Receive_IT+0x52>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <UART_Start_Receive_IT+0x48>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005642:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005646:	e02d      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005650:	e028      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <UART_Start_Receive_IT+0x76>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <UART_Start_Receive_IT+0x6c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	22ff      	movs	r2, #255	@ 0xff
 8005666:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800566a:	e01b      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	227f      	movs	r2, #127	@ 0x7f
 8005670:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005674:	e016      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800567e:	d10d      	bne.n	800569c <UART_Start_Receive_IT+0x9c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <UART_Start_Receive_IT+0x92>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	227f      	movs	r2, #127	@ 0x7f
 800568c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005690:	e008      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	223f      	movs	r2, #63	@ 0x3f
 8005696:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800569a:	e003      	b.n	80056a4 <UART_Start_Receive_IT+0xa4>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2222      	movs	r2, #34	@ 0x22
 80056b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80056d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f0:	d107      	bne.n	8005702 <UART_Start_Receive_IT+0x102>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a21      	ldr	r2, [pc, #132]	@ (8005784 <UART_Start_Receive_IT+0x184>)
 80056fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8005700:	e002      	b.n	8005708 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a20      	ldr	r2, [pc, #128]	@ (8005788 <UART_Start_Receive_IT+0x188>)
 8005706:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d019      	beq.n	8005744 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005730:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_Start_Receive_IT+0x110>
 8005742:	e018      	b.n	8005776 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	613b      	str	r3, [r7, #16]
   return(result);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f043 0320 	orr.w	r3, r3, #32
 8005758:	653b      	str	r3, [r7, #80]	@ 0x50
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	69f9      	ldr	r1, [r7, #28]
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	375c      	adds	r7, #92	@ 0x5c
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	08005a75 	.word	0x08005a75
 8005788:	080058cd 	.word	0x080058cd

0800578c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b095      	sub	sp, #84	@ 0x54
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3308      	adds	r3, #8
 80057e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d118      	bne.n	8005834 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	647b      	str	r3, [r7, #68]	@ 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6979      	ldr	r1, [r7, #20]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	613b      	str	r3, [r7, #16]
   return(result);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005848:	bf00      	nop
 800584a:	3754      	adds	r7, #84	@ 0x54
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff fa8c 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60bb      	str	r3, [r7, #8]
   return(result);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	613b      	str	r3, [r7, #16]
   return(result);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fa58 	bl	8004d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c4:	bf00      	nop
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b09c      	sub	sp, #112	@ 0x70
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	2b22      	cmp	r3, #34	@ 0x22
 80058e6:	f040 80b9 	bne.w	8005a5c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058f8:	b2d9      	uxtb	r1, r3
 80058fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	400a      	ands	r2, r1
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 809c 	bne.w	8005a6c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005954:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005958:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e6      	bne.n	8005934 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	667b      	str	r3, [r7, #100]	@ 0x64
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005986:	647a      	str	r2, [r7, #68]	@ 0x44
 8005988:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800598c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d018      	beq.n	80059ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059da:	633b      	str	r3, [r7, #48]	@ 0x30
 80059dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d12e      	bne.n	8005a54 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	617b      	str	r3, [r7, #20]
   return(result);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e6      	bne.n	80059fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d103      	bne.n	8005a44 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2210      	movs	r2, #16
 8005a42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff f9a5 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a52:	e00b      	b.n	8005a6c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fb f95b 	bl	8000d10 <HAL_UART_RxCpltCallback>
}
 8005a5a:	e007      	b.n	8005a6c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]
}
 8005a6c:	bf00      	nop
 8005a6e:	3770      	adds	r7, #112	@ 0x70
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b09c      	sub	sp, #112	@ 0x70
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8c:	2b22      	cmp	r3, #34	@ 0x22
 8005a8e:	f040 80b9 	bne.w	8005c04 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005aa2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005aa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ab0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 809c 	bne.w	8005c14 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005afc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e6      	bne.n	8005adc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d018      	beq.n	8005b96 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d12e      	bne.n	8005bfc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0310 	bic.w	r3, r3, #16
 8005bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d103      	bne.n	8005bec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2210      	movs	r2, #16
 8005bea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff f8d1 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bfa:	e00b      	b.n	8005c14 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fb f887 	bl	8000d10 <HAL_UART_RxCpltCallback>
}
 8005c02:	e007      	b.n	8005c14 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	619a      	str	r2, [r3, #24]
}
 8005c14:	bf00      	nop
 8005c16:	3770      	adds	r7, #112	@ 0x70
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <atoi>:
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f000 b87a 	b.w	8005d18 <strtol>

08005c24 <_strtol_l.isra.0>:
 8005c24:	2b24      	cmp	r3, #36	@ 0x24
 8005c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2a:	4686      	mov	lr, r0
 8005c2c:	4690      	mov	r8, r2
 8005c2e:	d801      	bhi.n	8005c34 <_strtol_l.isra.0+0x10>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d106      	bne.n	8005c42 <_strtol_l.isra.0+0x1e>
 8005c34:	f000 f882 	bl	8005d3c <__errno>
 8005c38:	2316      	movs	r3, #22
 8005c3a:	6003      	str	r3, [r0, #0]
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c42:	4834      	ldr	r0, [pc, #208]	@ (8005d14 <_strtol_l.isra.0+0xf0>)
 8005c44:	460d      	mov	r5, r1
 8005c46:	462a      	mov	r2, r5
 8005c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c4c:	5d06      	ldrb	r6, [r0, r4]
 8005c4e:	f016 0608 	ands.w	r6, r6, #8
 8005c52:	d1f8      	bne.n	8005c46 <_strtol_l.isra.0+0x22>
 8005c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c56:	d110      	bne.n	8005c7a <_strtol_l.isra.0+0x56>
 8005c58:	782c      	ldrb	r4, [r5, #0]
 8005c5a:	2601      	movs	r6, #1
 8005c5c:	1c95      	adds	r5, r2, #2
 8005c5e:	f033 0210 	bics.w	r2, r3, #16
 8005c62:	d115      	bne.n	8005c90 <_strtol_l.isra.0+0x6c>
 8005c64:	2c30      	cmp	r4, #48	@ 0x30
 8005c66:	d10d      	bne.n	8005c84 <_strtol_l.isra.0+0x60>
 8005c68:	782a      	ldrb	r2, [r5, #0]
 8005c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c6e:	2a58      	cmp	r2, #88	@ 0x58
 8005c70:	d108      	bne.n	8005c84 <_strtol_l.isra.0+0x60>
 8005c72:	786c      	ldrb	r4, [r5, #1]
 8005c74:	3502      	adds	r5, #2
 8005c76:	2310      	movs	r3, #16
 8005c78:	e00a      	b.n	8005c90 <_strtol_l.isra.0+0x6c>
 8005c7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c7c:	bf04      	itt	eq
 8005c7e:	782c      	ldrbeq	r4, [r5, #0]
 8005c80:	1c95      	addeq	r5, r2, #2
 8005c82:	e7ec      	b.n	8005c5e <_strtol_l.isra.0+0x3a>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f6      	bne.n	8005c76 <_strtol_l.isra.0+0x52>
 8005c88:	2c30      	cmp	r4, #48	@ 0x30
 8005c8a:	bf14      	ite	ne
 8005c8c:	230a      	movne	r3, #10
 8005c8e:	2308      	moveq	r3, #8
 8005c90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005c94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c98:	2200      	movs	r2, #0
 8005c9a:	fbbc f9f3 	udiv	r9, ip, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ca4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ca8:	2f09      	cmp	r7, #9
 8005caa:	d80f      	bhi.n	8005ccc <_strtol_l.isra.0+0xa8>
 8005cac:	463c      	mov	r4, r7
 8005cae:	42a3      	cmp	r3, r4
 8005cb0:	dd1b      	ble.n	8005cea <_strtol_l.isra.0+0xc6>
 8005cb2:	1c57      	adds	r7, r2, #1
 8005cb4:	d007      	beq.n	8005cc6 <_strtol_l.isra.0+0xa2>
 8005cb6:	4581      	cmp	r9, r0
 8005cb8:	d314      	bcc.n	8005ce4 <_strtol_l.isra.0+0xc0>
 8005cba:	d101      	bne.n	8005cc0 <_strtol_l.isra.0+0x9c>
 8005cbc:	45a2      	cmp	sl, r4
 8005cbe:	db11      	blt.n	8005ce4 <_strtol_l.isra.0+0xc0>
 8005cc0:	fb00 4003 	mla	r0, r0, r3, r4
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cca:	e7eb      	b.n	8005ca4 <_strtol_l.isra.0+0x80>
 8005ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005cd0:	2f19      	cmp	r7, #25
 8005cd2:	d801      	bhi.n	8005cd8 <_strtol_l.isra.0+0xb4>
 8005cd4:	3c37      	subs	r4, #55	@ 0x37
 8005cd6:	e7ea      	b.n	8005cae <_strtol_l.isra.0+0x8a>
 8005cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005cdc:	2f19      	cmp	r7, #25
 8005cde:	d804      	bhi.n	8005cea <_strtol_l.isra.0+0xc6>
 8005ce0:	3c57      	subs	r4, #87	@ 0x57
 8005ce2:	e7e4      	b.n	8005cae <_strtol_l.isra.0+0x8a>
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	e7ed      	b.n	8005cc6 <_strtol_l.isra.0+0xa2>
 8005cea:	1c53      	adds	r3, r2, #1
 8005cec:	d108      	bne.n	8005d00 <_strtol_l.isra.0+0xdc>
 8005cee:	2322      	movs	r3, #34	@ 0x22
 8005cf0:	f8ce 3000 	str.w	r3, [lr]
 8005cf4:	4660      	mov	r0, ip
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	d0a0      	beq.n	8005c3e <_strtol_l.isra.0+0x1a>
 8005cfc:	1e69      	subs	r1, r5, #1
 8005cfe:	e006      	b.n	8005d0e <_strtol_l.isra.0+0xea>
 8005d00:	b106      	cbz	r6, 8005d04 <_strtol_l.isra.0+0xe0>
 8005d02:	4240      	negs	r0, r0
 8005d04:	f1b8 0f00 	cmp.w	r8, #0
 8005d08:	d099      	beq.n	8005c3e <_strtol_l.isra.0+0x1a>
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d1f6      	bne.n	8005cfc <_strtol_l.isra.0+0xd8>
 8005d0e:	f8c8 1000 	str.w	r1, [r8]
 8005d12:	e794      	b.n	8005c3e <_strtol_l.isra.0+0x1a>
 8005d14:	08005dc1 	.word	0x08005dc1

08005d18 <strtol>:
 8005d18:	4613      	mov	r3, r2
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	4802      	ldr	r0, [pc, #8]	@ (8005d28 <strtol+0x10>)
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	f7ff bf7f 	b.w	8005c24 <_strtol_l.isra.0>
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c

08005d2c <memset>:
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d100      	bne.n	8005d36 <memset+0xa>
 8005d34:	4770      	bx	lr
 8005d36:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3a:	e7f9      	b.n	8005d30 <memset+0x4>

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	@ (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d80 <__libc_init_array+0x38>)
 8005d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d84 <__libc_init_array+0x3c>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	2600      	movs	r6, #0
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	4d0b      	ldr	r5, [pc, #44]	@ (8005d88 <__libc_init_array+0x40>)
 8005d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d8c <__libc_init_array+0x44>)
 8005d5c:	f000 f818 	bl	8005d90 <_init>
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	2600      	movs	r6, #0
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08005ecc 	.word	0x08005ecc
 8005d84:	08005ecc 	.word	0x08005ecc
 8005d88:	08005ecc 	.word	0x08005ecc
 8005d8c:	08005ed0 	.word	0x08005ed0

08005d90 <_init>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr

08005d9c <_fini>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr
