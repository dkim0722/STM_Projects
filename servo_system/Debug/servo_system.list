
servo_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003948  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b58  08003b58  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003b6c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003b6c  00005118  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3e8  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001824  00000000  00000000  0000f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f7  00000000  00000000  00011698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026df7  00000000  00000000  00011e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b949  00000000  00000000  00038c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f58a4  00000000  00000000  000445cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae8  00000000  00000000  00139eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003b28 	.word	0x08003b28

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003b28 	.word	0x08003b28

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fcb3 	bl	8000ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f822 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f9d4 	bl	800091c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000574:	f000 f88e 	bl	8000694 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000578:	f000 f95e 	bl	8000838 <MX_TIM4_Init>
  MX_TIM3_Init();
 800057c:	f000 f8e4 	bl	8000748 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000580:	213c      	movs	r1, #60	@ 0x3c
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <main+0x44>)
 8000584:	f002 f8d2 	bl	800272c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000588:	2100      	movs	r1, #0
 800058a:	4808      	ldr	r0, [pc, #32]	@ (80005ac <main+0x48>)
 800058c:	f001 fd7c 	bl	8002088 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000590:	2100      	movs	r1, #0
 8000592:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <main+0x4c>)
 8000594:	f001 fed4 	bl	8002340 <HAL_TIM_IC_Start_IT>

  (&htim3)->Instance->CCR1 = 5000;
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <main+0x48>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005a0:	635a      	str	r2, [r3, #52]	@ 0x34

  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x3e>
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000074 	.word	0x20000074
 80005b0:	200000c0 	.word	0x200000c0

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	@ 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fa84 	bl	8003ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <SystemClock_Config+0xd8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a2b      	ldr	r2, [pc, #172]	@ (800068c <SystemClock_Config+0xd8>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b29      	ldr	r3, [pc, #164]	@ (800068c <SystemClock_Config+0xd8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <SystemClock_Config+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f8:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <SystemClock_Config+0xdc>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <SystemClock_Config+0xdc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000624:	23c0      	movs	r3, #192	@ 0xc0
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ffcf 	bl	80015dc <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 faca 	bl	8000bdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000648:	f000 ff78 	bl	800153c <HAL_PWREx_EnableOverDrive>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000652:	f000 fac3 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2103      	movs	r1, #3
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa60 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800067e:	f000 faad 	bl	8000bdc <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2224      	movs	r2, #36	@ 0x24
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fa14 	bl	8003ad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006b4:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_TIM1_Init+0xb0>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <MX_TIM1_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006de:	2301      	movs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f6:	2301      	movs	r3, #1
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4619      	mov	r1, r3
 8000708:	480d      	ldr	r0, [pc, #52]	@ (8000740 <MX_TIM1_Init+0xac>)
 800070a:	f001 ff69 	bl	80025e0 <HAL_TIM_Encoder_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000714:	f000 fa62 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_TIM1_Init+0xac>)
 800072a:	f003 f925 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000734:	f000 fa52 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000028 	.word	0x20000028
 8000744:	40010000 	.word	0x40010000

08000748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	@ 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077a:	4b2d      	ldr	r3, [pc, #180]	@ (8000830 <MX_TIM3_Init+0xe8>)
 800077c:	4a2d      	ldr	r2, [pc, #180]	@ (8000834 <MX_TIM3_Init+0xec>)
 800077e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8000780:	4b2b      	ldr	r3, [pc, #172]	@ (8000830 <MX_TIM3_Init+0xe8>)
 8000782:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000786:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <MX_TIM3_Init+0xe8>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <MX_TIM3_Init+0xe8>)
 8000790:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <MX_TIM3_Init+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <MX_TIM3_Init+0xe8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a2:	4823      	ldr	r0, [pc, #140]	@ (8000830 <MX_TIM3_Init+0xe8>)
 80007a4:	f001 fbb8 	bl	8001f18 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 fa15 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007bc:	4619      	mov	r1, r3
 80007be:	481c      	ldr	r0, [pc, #112]	@ (8000830 <MX_TIM3_Init+0xe8>)
 80007c0:	f002 fafa 	bl	8002db8 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f000 fa07 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ce:	4818      	ldr	r0, [pc, #96]	@ (8000830 <MX_TIM3_Init+0xe8>)
 80007d0:	f001 fbf9 	bl	8001fc6 <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007da:	f000 f9ff 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4810      	ldr	r0, [pc, #64]	@ (8000830 <MX_TIM3_Init+0xe8>)
 80007ee:	f003 f8c3 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80007f8:	f000 f9f0 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4807      	ldr	r0, [pc, #28]	@ (8000830 <MX_TIM3_Init+0xe8>)
 8000814:	f002 f9bc 	bl	8002b90 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800081e:	f000 f9dd 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000822:	4803      	ldr	r0, [pc, #12]	@ (8000830 <MX_TIM3_Init+0xe8>)
 8000824:	f000 faa8 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	@ 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000074 	.word	0x20000074
 8000834:	40000400 	.word	0x40000400

08000838 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	@ 0x30
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000864:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <MX_TIM4_Init+0xdc>)
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <MX_TIM4_Init+0xe0>)
 8000868:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_TIM4_Init+0xdc>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <MX_TIM4_Init+0xdc>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <MX_TIM4_Init+0xdc>)
 8000878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800087c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <MX_TIM4_Init+0xdc>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_TIM4_Init+0xdc>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800088a:	4822      	ldr	r0, [pc, #136]	@ (8000914 <MX_TIM4_Init+0xdc>)
 800088c:	f001 fb44 	bl	8001f18 <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000896:	f000 f9a1 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	@ (8000914 <MX_TIM4_Init+0xdc>)
 80008a8:	f002 fa86 	bl	8002db8 <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80008b2:	f000 f993 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80008b6:	4817      	ldr	r0, [pc, #92]	@ (8000914 <MX_TIM4_Init+0xdc>)
 80008b8:	f001 fce0 	bl	800227c <HAL_TIM_IC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80008c2:	f000 f98b 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	@ (8000914 <MX_TIM4_Init+0xdc>)
 80008d6:	f003 f84f 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80008e0:	f000 f97c 	bl	8000bdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <MX_TIM4_Init+0xdc>)
 80008fc:	f002 f8ab 	bl	8002a56 <HAL_TIM_IC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000906:	f000 f969 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	@ 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c0 	.word	0x200000c0
 8000918:	40000800 	.word	0x40000800

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b85      	ldr	r3, [pc, #532]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a84      	ldr	r2, [pc, #528]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b82      	ldr	r3, [pc, #520]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a7e      	ldr	r2, [pc, #504]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b7c      	ldr	r3, [pc, #496]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b79      	ldr	r3, [pc, #484]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a78      	ldr	r2, [pc, #480]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b76      	ldr	r3, [pc, #472]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b73      	ldr	r3, [pc, #460]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a72      	ldr	r2, [pc, #456]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b70      	ldr	r3, [pc, #448]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	4b6d      	ldr	r3, [pc, #436]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a6c      	ldr	r2, [pc, #432]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4b67      	ldr	r3, [pc, #412]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a66      	ldr	r2, [pc, #408]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b64      	ldr	r3, [pc, #400]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	4b61      	ldr	r3, [pc, #388]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a60      	ldr	r2, [pc, #384]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000b48 <MX_GPIO_Init+0x22c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009e0:	485a      	ldr	r0, [pc, #360]	@ (8000b4c <MX_GPIO_Init+0x230>)
 80009e2:	f000 fd91 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	@ 0x40
 80009ea:	4859      	ldr	r0, [pc, #356]	@ (8000b50 <MX_GPIO_Init+0x234>)
 80009ec:	f000 fd8c 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4853      	ldr	r0, [pc, #332]	@ (8000b54 <MX_GPIO_Init+0x238>)
 8000a08:	f000 fbd2 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a0c:	2332      	movs	r3, #50	@ 0x32
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	484b      	ldr	r0, [pc, #300]	@ (8000b54 <MX_GPIO_Init+0x238>)
 8000a28:	f000 fbc2 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a2c:	2386      	movs	r3, #134	@ 0x86
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3c:	230b      	movs	r3, #11
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4844      	ldr	r0, [pc, #272]	@ (8000b58 <MX_GPIO_Init+0x23c>)
 8000a48:	f000 fbb2 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a4c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4839      	ldr	r0, [pc, #228]	@ (8000b4c <MX_GPIO_Init+0x230>)
 8000a66:	f000 fba3 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4831      	ldr	r0, [pc, #196]	@ (8000b4c <MX_GPIO_Init+0x230>)
 8000a88:	f000 fb92 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482c      	ldr	r0, [pc, #176]	@ (8000b5c <MX_GPIO_Init+0x240>)
 8000aaa:	f000 fb81 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aae:	2340      	movs	r3, #64	@ 0x40
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4822      	ldr	r0, [pc, #136]	@ (8000b50 <MX_GPIO_Init+0x234>)
 8000ac6:	f000 fb73 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	481c      	ldr	r0, [pc, #112]	@ (8000b50 <MX_GPIO_Init+0x234>)
 8000ade:	f000 fb67 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af4:	230a      	movs	r3, #10
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4816      	ldr	r0, [pc, #88]	@ (8000b58 <MX_GPIO_Init+0x23c>)
 8000b00:	f000 fb56 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x23c>)
 8000b1a:	f000 fb49 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_GPIO_Init+0x234>)
 8000b3c:	f000 fb38 	bl	80011b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	@ 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(htim->Instance = TIM4){		// 1 Hz interrupt
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000b6c:	601a      	str	r2, [r3, #0]
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);   // 1 -> CCW, 0 -> CW
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b10      	cmp	r3, #16
 8000b7a:	bf0c      	ite	eq
 8000b7c:	2301      	moveq	r3, #1
 8000b7e:	2300      	movne	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b86:	701a      	strb	r2, [r3, #0]
		uint32_t count = __HAL_TIM_GET_COUNTER(&htim1); // each rising edge increments CNT by 1
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8e:	60fb      	str	r3, [r7, #12]
		int16_t adjusted_count = (int16_t)count;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	817b      	strh	r3, [r7, #10]
		adjusted_count /= 2;						   // revolutions in one second
 8000b94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da00      	bge.n	8000b9e <HAL_TIM_IC_CaptureCallback+0x3e>
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	105b      	asrs	r3, r3, #1
 8000ba0:	817b      	strh	r3, [r7, #10]
		uint16_t rps = abs(adjusted_count);
 8000ba2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	813b      	strh	r3, [r7, #8]
		rpm = 60 * rps;
 8000bae:	893a      	ldrh	r2, [r7, #8]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	20000028 	.word	0x20000028
 8000bd4:	20000110 	.word	0x20000110
 8000bd8:	2000010c 	.word	0x2000010c

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d128      	bne.n	8000ca4 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000c82:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ca0:	f000 fa86 	bl	80011b0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	@ 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a24      	ldr	r2, [pc, #144]	@ (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cf2:	e035      	b.n	8000d60 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM4)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <HAL_TIM_Base_MspInit+0xb8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d130      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d40:	2302      	movs	r3, #2
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <HAL_TIM_Base_MspInit+0xbc>)
 8000d4c:	f000 fa30 	bl	80011b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	201e      	movs	r0, #30
 8000d56:	f000 f9f4 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d5a:	201e      	movs	r0, #30
 8000d5c:	f000 fa0d 	bl	800117a <HAL_NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40000800 	.word	0x40000800
 8000d74:	40020c00 	.word	0x40020c00

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d11b      	bne.n	8000dd2 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db2:	2340      	movs	r3, #64	@ 0x40
 8000db4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_TIM_MspPostInit+0x6c>)
 8000dce:	f000 f9ef 	bl	80011b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f885 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM4_IRQHandler+0x10>)
 8000e4e:	f001 fcfb 	bl	8002848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000c0 	.word	0x200000c0

08000e5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 fe17 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb57 	bl	8000564 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec4:	08003b60 	.word	0x08003b60
  ldr r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ecc:	20000118 	.word	0x20000118

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>

08000ed2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f928 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f805 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f7ff fe81 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f943 	bl	8001196 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f90b 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000114 	.word	0x20000114

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000114 	.word	0x20000114

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	05fa0000 	.word	0x05fa0000

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	@ (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e175      	b.n	80014bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8164 	bne.w	80014b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x56>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80be 	beq.w	80014b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <HAL_GPIO_Init+0x324>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a65      	ldr	r2, [pc, #404]	@ (80014d4 <HAL_GPIO_Init+0x324>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b63      	ldr	r3, [pc, #396]	@ (80014d4 <HAL_GPIO_Init+0x324>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001352:	4a61      	ldr	r2, [pc, #388]	@ (80014d8 <HAL_GPIO_Init+0x328>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <HAL_GPIO_Init+0x32c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d037      	beq.n	80013ee <HAL_GPIO_Init+0x23e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a57      	ldr	r2, [pc, #348]	@ (80014e0 <HAL_GPIO_Init+0x330>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_GPIO_Init+0x23a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a56      	ldr	r2, [pc, #344]	@ (80014e4 <HAL_GPIO_Init+0x334>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x236>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a55      	ldr	r2, [pc, #340]	@ (80014e8 <HAL_GPIO_Init+0x338>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x232>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a54      	ldr	r2, [pc, #336]	@ (80014ec <HAL_GPIO_Init+0x33c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x22e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a53      	ldr	r2, [pc, #332]	@ (80014f0 <HAL_GPIO_Init+0x340>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x22a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	@ (80014f4 <HAL_GPIO_Init+0x344>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a51      	ldr	r2, [pc, #324]	@ (80014f8 <HAL_GPIO_Init+0x348>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x222>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a50      	ldr	r2, [pc, #320]	@ (80014fc <HAL_GPIO_Init+0x34c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x21e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001500 <HAL_GPIO_Init+0x350>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x21a>
 80013c6:	2309      	movs	r3, #9
 80013c8:	e012      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ca:	230a      	movs	r3, #10
 80013cc:	e010      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ce:	2308      	movs	r3, #8
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x240>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_GPIO_Init+0x328>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <HAL_GPIO_Init+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a34      	ldr	r2, [pc, #208]	@ (8001504 <HAL_GPIO_Init+0x354>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <HAL_GPIO_Init+0x354>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a29      	ldr	r2, [pc, #164]	@ (8001504 <HAL_GPIO_Init+0x354>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <HAL_GPIO_Init+0x354>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <HAL_GPIO_Init+0x354>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_GPIO_Init+0x354>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <HAL_GPIO_Init+0x354>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae86 	bls.w	80011d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40022000 	.word	0x40022000
 8001500:	40022400 	.word	0x40022400
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156a:	f7ff fd03 	bl	8000f74 <HAL_GetTick>
 800156e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001570:	e009      	b.n	8001586 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001572:	f7ff fcff 	bl	8000f74 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001580:	d901      	bls.n	8001586 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e022      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001592:	d1ee      	bne.n	8001572 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fce8 	bl	8000f74 <HAL_GetTick>
 80015a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a6:	e009      	b.n	80015bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015a8:	f7ff fce4 	bl	8000f74 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b6:	d901      	bls.n	80015bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e007      	b.n	80015cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015c8:	d1ee      	bne.n	80015a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e29b      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001600:	4b96      	ldr	r3, [pc, #600]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00c      	beq.n	8001626 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160c:	4b93      	ldr	r3, [pc, #588]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d112      	bne.n	800163e <HAL_RCC_OscConfig+0x62>
 8001618:	4b90      	ldr	r3, [pc, #576]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b8d      	ldr	r3, [pc, #564]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06c      	beq.n	800170c <HAL_RCC_OscConfig+0x130>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d168      	bne.n	800170c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e275      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x7a>
 8001648:	4b84      	ldr	r3, [pc, #528]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a83      	ldr	r2, [pc, #524]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x9c>
 800165e:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7e      	ldr	r2, [pc, #504]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b7c      	ldr	r3, [pc, #496]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7b      	ldr	r2, [pc, #492]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xc0>
 8001682:	4b76      	ldr	r3, [pc, #472]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a72      	ldr	r2, [pc, #456]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xd8>
 800169c:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6e      	ldr	r2, [pc, #440]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc5a 	bl	8000f74 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc56 	bl	8000f74 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e229      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b61      	ldr	r3, [pc, #388]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe8>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc46 	bl	8000f74 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc42 	bl	8000f74 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e215      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b57      	ldr	r3, [pc, #348]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x110>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d069      	beq.n	80017ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	4b50      	ldr	r3, [pc, #320]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x190>
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x17a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1e9      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	493d      	ldr	r1, [pc, #244]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e040      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b39      	ldr	r3, [pc, #228]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a38      	ldr	r2, [pc, #224]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fbf8 	bl	8000f74 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fbf4 	bl	8000f74 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1c7      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b30      	ldr	r3, [pc, #192]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4929      	ldr	r1, [pc, #164]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a26      	ldr	r2, [pc, #152]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fbd4 	bl	8000f74 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fbd0 	bl	8000f74 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1a3      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d038      	beq.n	800186c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d019      	beq.n	8001836 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fbb1 	bl	8000f74 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fbad 	bl	8000f74 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e180      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x23a>
 8001834:	e01a      	b.n	800186c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 8001838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_RCC_OscConfig+0x280>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fb97 	bl	8000f74 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff fb93 	bl	8000f74 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d903      	bls.n	8001860 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e166      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
 800185c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a4 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b8c      	ldr	r3, [pc, #560]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b89      	ldr	r3, [pc, #548]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a88      	ldr	r2, [pc, #544]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b86      	ldr	r3, [pc, #536]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	4b83      	ldr	r3, [pc, #524]	@ (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018ae:	4b80      	ldr	r3, [pc, #512]	@ (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7f      	ldr	r2, [pc, #508]	@ (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb5b 	bl	8000f74 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fb57 	bl	8000f74 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	@ 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e12a      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	4b76      	ldr	r3, [pc, #472]	@ (8001ab0 <HAL_RCC_OscConfig+0x4d4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x31a>
 80018e8:	4b70      	ldr	r3, [pc, #448]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ec:	4a6f      	ldr	r2, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x33c>
 80018fe:	4b6b      	ldr	r3, [pc, #428]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001902:	4a6a      	ldr	r2, [pc, #424]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	@ 0x70
 800190a:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190e:	4a67      	ldr	r2, [pc, #412]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6713      	str	r3, [r2, #112]	@ 0x70
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x35e>
 8001920:	4b62      	ldr	r3, [pc, #392]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a61      	ldr	r2, [pc, #388]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
 800192c:	4b5f      	ldr	r3, [pc, #380]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a5e      	ldr	r2, [pc, #376]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x376>
 800193a:	4b5c      	ldr	r3, [pc, #368]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193e:	4a5b      	ldr	r2, [pc, #364]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6713      	str	r3, [r2, #112]	@ 0x70
 8001946:	4b59      	ldr	r3, [pc, #356]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	4a58      	ldr	r2, [pc, #352]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fb0b 	bl	8000f74 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fb07 	bl	8000f74 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0d8      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b4c      	ldr	r3, [pc, #304]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x386>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff faf5 	bl	8000f74 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff faf1 	bl	8000f74 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0c2      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a3c      	ldr	r2, [pc, #240]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80ae 	beq.w	8001b28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d06d      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d14b      	bne.n	8001a78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fac2 	bl	8000f74 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fabe 	bl	8000f74 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e091      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	071b      	lsls	r3, r3, #28
 8001a3e:	491b      	ldr	r1, [pc, #108]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fa90 	bl	8000f74 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fa8c 	bl	8000f74 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e05f      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x47c>
 8001a76:	e057      	b.n	8001b28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa76 	bl	8000f74 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fa72 	bl	8000f74 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e045      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4b0>
 8001aaa:	e03d      	b.n	8001b28 <HAL_RCC_OscConfig+0x54c>
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_RCC_OscConfig+0x558>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d030      	beq.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d129      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d122      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d119      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	3b01      	subs	r3, #1
 8001afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10f      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d0      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b6a      	ldr	r3, [pc, #424]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b67      	ldr	r3, [pc, #412]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	4965      	ldr	r1, [pc, #404]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d040      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e073      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06b      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4936      	ldr	r1, [pc, #216]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c2c:	f7ff f9a2 	bl	8000f74 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f99e 	bl	8000f74 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e053      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d210      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	4922      	ldr	r1, [pc, #136]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	@ (8001d04 <HAL_RCC_ClockConfig+0x1cc>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_ClockConfig+0x1d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f8fe 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	08003b40 	.word	0x08003b40
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b094      	sub	sp, #80	@ 0x50
 8001d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b79      	ldr	r3, [pc, #484]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f200 80e1 	bhi.w	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e0db      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d48:	e0db      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b72      	ldr	r3, [pc, #456]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4e:	e0d8      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b6f      	ldr	r3, [pc, #444]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b6a      	ldr	r3, [pc, #424]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	0159      	lsls	r1, r3, #5
 8001d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d94:	0150      	lsls	r0, r2, #5
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	6139      	str	r1, [r7, #16]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db4:	4659      	mov	r1, fp
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	4651      	mov	r1, sl
 8001dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	018a      	lsls	r2, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc8:	4659      	mov	r1, fp
 8001dca:	eb63 0901 	sbc.w	r9, r3, r1
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de2:	4690      	mov	r8, r2
 8001de4:	4699      	mov	r9, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	eb18 0303 	adds.w	r3, r8, r3
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	462b      	mov	r3, r5
 8001df0:	eb49 0303 	adc.w	r3, r9, r3
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e02:	4629      	mov	r1, r5
 8001e04:	028b      	lsls	r3, r1, #10
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	028a      	lsls	r2, r1, #10
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e16:	2200      	movs	r2, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e20:	f7fe fa0a 	bl	8000238 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	4611      	mov	r1, r2
 8001e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e48:	4642      	mov	r2, r8
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0159      	lsls	r1, r3, #5
 8001e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5a:	0150      	lsls	r0, r2, #5
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4641      	mov	r1, r8
 8001e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e66:	4649      	mov	r1, r9
 8001e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e80:	ebb2 040a 	subs.w	r4, r2, sl
 8001e84:	eb63 050b 	sbc.w	r5, r3, fp
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	00eb      	lsls	r3, r5, #3
 8001e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e96:	00e2      	lsls	r2, r4, #3
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	18e3      	adds	r3, r4, r3
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb45 0303 	adc.w	r3, r5, r3
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	028b      	lsls	r3, r1, #10
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	028a      	lsls	r2, r1, #10
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	61fa      	str	r2, [r7, #28]
 8001ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed4:	f7fe f9b0 	bl	8000238 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3750      	adds	r7, #80	@ 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400

08001f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e049      	b.n	8001fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe feba 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f001 f820 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e049      	b.n	800206c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f841 	bl	8002074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f000 ffc9 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_TIM_PWM_Start+0x24>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e03c      	b.n	8002126 <HAL_TIM_PWM_Start+0x9e>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d109      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x3e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e02f      	b.n	8002126 <HAL_TIM_PWM_Start+0x9e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d109      	bne.n	80020e0 <HAL_TIM_PWM_Start+0x58>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e022      	b.n	8002126 <HAL_TIM_PWM_Start+0x9e>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d109      	bne.n	80020fa <HAL_TIM_PWM_Start+0x72>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e015      	b.n	8002126 <HAL_TIM_PWM_Start+0x9e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d109      	bne.n	8002114 <HAL_TIM_PWM_Start+0x8c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e008      	b.n	8002126 <HAL_TIM_PWM_Start+0x9e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e092      	b.n	8002254 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_TIM_PWM_Start+0xb6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800213c:	e023      	b.n	8002186 <HAL_TIM_PWM_Start+0xfe>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d104      	bne.n	800214e <HAL_TIM_PWM_Start+0xc6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800214c:	e01b      	b.n	8002186 <HAL_TIM_PWM_Start+0xfe>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d104      	bne.n	800215e <HAL_TIM_PWM_Start+0xd6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800215c:	e013      	b.n	8002186 <HAL_TIM_PWM_Start+0xfe>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d104      	bne.n	800216e <HAL_TIM_PWM_Start+0xe6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800216c:	e00b      	b.n	8002186 <HAL_TIM_PWM_Start+0xfe>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Start+0xf6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217c:	e003      	b.n	8002186 <HAL_TIM_PWM_Start+0xfe>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2201      	movs	r2, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f001 fbcc 	bl	800392c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <HAL_TIM_PWM_Start+0x1d4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_TIM_PWM_Start+0x120>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <HAL_TIM_PWM_Start+0x1d8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_PWM_Start+0x124>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_TIM_PWM_Start+0x126>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a25      	ldr	r2, [pc, #148]	@ (800225c <HAL_TIM_PWM_Start+0x1d4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d01d      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a22      	ldr	r2, [pc, #136]	@ (8002264 <HAL_TIM_PWM_Start+0x1dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <HAL_TIM_PWM_Start+0x1e0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	@ (800226c <HAL_TIM_PWM_Start+0x1e4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <HAL_TIM_PWM_Start+0x1d8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_TIM_PWM_Start+0x1e8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_TIM_PWM_Start+0x18a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_TIM_PWM_Start+0x1ec>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_TIM_PWM_Start+0x1f0>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d015      	beq.n	8002250 <HAL_TIM_PWM_Start+0x1c8>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222a:	d011      	beq.n	8002250 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	e008      	b.n	8002250 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e000      	b.n	8002252 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010000 	.word	0x40010000
 8002260:	40010400 	.word	0x40010400
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40014000 	.word	0x40014000
 8002274:	40001800 	.word	0x40001800
 8002278:	00010007 	.word	0x00010007

0800227c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e049      	b.n	8002322 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f841 	bl	800232a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f000 fe6e 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <HAL_TIM_IC_Start_IT+0x1e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800235a:	b2db      	uxtb	r3, r3
 800235c:	e023      	b.n	80023a6 <HAL_TIM_IC_Start_IT+0x66>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d104      	bne.n	800236e <HAL_TIM_IC_Start_IT+0x2e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800236a:	b2db      	uxtb	r3, r3
 800236c:	e01b      	b.n	80023a6 <HAL_TIM_IC_Start_IT+0x66>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d104      	bne.n	800237e <HAL_TIM_IC_Start_IT+0x3e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e013      	b.n	80023a6 <HAL_TIM_IC_Start_IT+0x66>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d104      	bne.n	800238e <HAL_TIM_IC_Start_IT+0x4e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_IC_Start_IT+0x66>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d104      	bne.n	800239e <HAL_TIM_IC_Start_IT+0x5e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800239a:	b2db      	uxtb	r3, r3
 800239c:	e003      	b.n	80023a6 <HAL_TIM_IC_Start_IT+0x66>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_TIM_IC_Start_IT+0x78>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e013      	b.n	80023e0 <HAL_TIM_IC_Start_IT+0xa0>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d104      	bne.n	80023c8 <HAL_TIM_IC_Start_IT+0x88>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e00b      	b.n	80023e0 <HAL_TIM_IC_Start_IT+0xa0>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d104      	bne.n	80023d8 <HAL_TIM_IC_Start_IT+0x98>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e003      	b.n	80023e0 <HAL_TIM_IC_Start_IT+0xa0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023e2:	7bbb      	ldrb	r3, [r7, #14]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023e8:	7b7b      	ldrb	r3, [r7, #13]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0e2      	b.n	80025b8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_IC_Start_IT+0xc2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002400:	e023      	b.n	800244a <HAL_TIM_IC_Start_IT+0x10a>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d104      	bne.n	8002412 <HAL_TIM_IC_Start_IT+0xd2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002410:	e01b      	b.n	800244a <HAL_TIM_IC_Start_IT+0x10a>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d104      	bne.n	8002422 <HAL_TIM_IC_Start_IT+0xe2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002420:	e013      	b.n	800244a <HAL_TIM_IC_Start_IT+0x10a>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d104      	bne.n	8002432 <HAL_TIM_IC_Start_IT+0xf2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002430:	e00b      	b.n	800244a <HAL_TIM_IC_Start_IT+0x10a>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b10      	cmp	r3, #16
 8002436:	d104      	bne.n	8002442 <HAL_TIM_IC_Start_IT+0x102>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002440:	e003      	b.n	800244a <HAL_TIM_IC_Start_IT+0x10a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <HAL_TIM_IC_Start_IT+0x11a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	e013      	b.n	8002482 <HAL_TIM_IC_Start_IT+0x142>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d104      	bne.n	800246a <HAL_TIM_IC_Start_IT+0x12a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002468:	e00b      	b.n	8002482 <HAL_TIM_IC_Start_IT+0x142>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d104      	bne.n	800247a <HAL_TIM_IC_Start_IT+0x13a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002478:	e003      	b.n	8002482 <HAL_TIM_IC_Start_IT+0x142>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d841      	bhi.n	800250c <HAL_TIM_IC_Start_IT+0x1cc>
 8002488:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <HAL_TIM_IC_Start_IT+0x150>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024c5 	.word	0x080024c5
 8002494:	0800250d 	.word	0x0800250d
 8002498:	0800250d 	.word	0x0800250d
 800249c:	0800250d 	.word	0x0800250d
 80024a0:	080024d7 	.word	0x080024d7
 80024a4:	0800250d 	.word	0x0800250d
 80024a8:	0800250d 	.word	0x0800250d
 80024ac:	0800250d 	.word	0x0800250d
 80024b0:	080024e9 	.word	0x080024e9
 80024b4:	0800250d 	.word	0x0800250d
 80024b8:	0800250d 	.word	0x0800250d
 80024bc:	0800250d 	.word	0x0800250d
 80024c0:	080024fb 	.word	0x080024fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0202 	orr.w	r2, r2, #2
 80024d2:	60da      	str	r2, [r3, #12]
      break;
 80024d4:	e01d      	b.n	8002512 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	60da      	str	r2, [r3, #12]
      break;
 80024e6:	e014      	b.n	8002512 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	60da      	str	r2, [r3, #12]
      break;
 80024f8:	e00b      	b.n	8002512 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0210 	orr.w	r2, r2, #16
 8002508:	60da      	str	r2, [r3, #12]
      break;
 800250a:	e002      	b.n	8002512 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	bf00      	nop
  }

  if (status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d14e      	bne.n	80025b6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f001 fa03 	bl	800392c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <HAL_TIM_IC_Start_IT+0x280>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002538:	d01d      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <HAL_TIM_IC_Start_IT+0x284>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d018      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_TIM_IC_Start_IT+0x288>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <HAL_TIM_IC_Start_IT+0x28c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00e      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_TIM_IC_Start_IT+0x290>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <HAL_TIM_IC_Start_IT+0x294>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_TIM_IC_Start_IT+0x236>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	@ (80025d8 <HAL_TIM_IC_Start_IT+0x298>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <HAL_TIM_IC_Start_IT+0x29c>)
 800257e:	4013      	ands	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b06      	cmp	r3, #6
 8002586:	d015      	beq.n	80025b4 <HAL_TIM_IC_Start_IT+0x274>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258e:	d011      	beq.n	80025b4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	e008      	b.n	80025b4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e000      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40010400 	.word	0x40010400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40001800 	.word	0x40001800
 80025dc:	00010007 	.word	0x00010007

080025e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e08f      	b.n	8002714 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe fb11 	bl	8000c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <HAL_TIM_Encoder_Init+0x13c>)
 8002622:	400b      	ands	r3, r1
 8002624:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 fcb3 	bl	8002f9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_TIM_Encoder_Init+0x140>)
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	4313      	orrs	r3, r2
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_TIM_Encoder_Init+0x144>)
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <HAL_TIM_Encoder_Init+0x148>)
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4313      	orrs	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	011a      	lsls	r2, r3, #4
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	031b      	lsls	r3, r3, #12
 80026a0:	4313      	orrs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4313      	orrs	r3, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	fffebff8 	.word	0xfffebff8
 8002720:	fffffcfc 	.word	0xfffffcfc
 8002724:	fffff3f3 	.word	0xfffff3f3
 8002728:	ffff0f0f 	.word	0xffff0f0f

0800272c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800273c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002744:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800274c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002754:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e069      	b.n	8002840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800277c:	e031      	b.n	80027e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d110      	bne.n	80027a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800278a:	7b3b      	ldrb	r3, [r7, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e055      	b.n	8002840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027a4:	e01d      	b.n	80027e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027b2:	7b7b      	ldrb	r3, [r7, #13]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027b8:	7b3b      	ldrb	r3, [r7, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03e      	b.n	8002840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_TIM_Encoder_Start+0xc4>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d008      	beq.n	8002800 <HAL_TIM_Encoder_Start+0xd4>
 80027ee:	e00f      	b.n	8002810 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 f897 	bl	800392c <TIM_CCxChannelCmd>
      break;
 80027fe:	e016      	b.n	800282e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	2104      	movs	r1, #4
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f88f 	bl	800392c <TIM_CCxChannelCmd>
      break;
 800280e:	e00e      	b.n	800282e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f887 	bl	800392c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2201      	movs	r2, #1
 8002824:	2104      	movs	r1, #4
 8002826:	4618      	mov	r0, r3
 8002828:	f001 f880 	bl	800392c <TIM_CCxChannelCmd>
      break;
 800282c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0202 	mvn.w	r2, #2
 800287c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe f964 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fb60 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb67 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d020      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0204 	mvn.w	r2, #4
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f93e 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fb3a 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb41 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe f918 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fb14 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fb1b 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d020      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0210 	mvn.w	r2, #16
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2208      	movs	r2, #8
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe f8f2 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 faee 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 faf5 	bl	8002f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 facc 	bl	8002f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f001 f863 	bl	8003aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f001 f85b 	bl	8003abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 faaf 	bl	8002f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0220 	mvn.w	r2, #32
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 f823 	bl	8003a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e088      	b.n	8002b86 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11b      	bne.n	8002aba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a92:	f000 fd87 	bl	80035a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020c 	bic.w	r2, r2, #12
 8002aa4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	e060      	b.n	8002b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d11c      	bne.n	8002afa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002ad0:	f000 fe0b 	bl	80036ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ae2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6999      	ldr	r1, [r3, #24]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	021a      	lsls	r2, r3, #8
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	619a      	str	r2, [r3, #24]
 8002af8:	e040      	b.n	8002b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b10:	f000 fe58 	bl	80037c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020c 	bic.w	r2, r2, #12
 8002b22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69d9      	ldr	r1, [r3, #28]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	e021      	b.n	8002b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d11c      	bne.n	8002b78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b4e:	f000 fe75 	bl	800383c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69d9      	ldr	r1, [r3, #28]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	021a      	lsls	r2, r3, #8
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
 8002b76:	e001      	b.n	8002b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0ff      	b.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b14      	cmp	r3, #20
 8002bba:	f200 80f0 	bhi.w	8002d9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002c19 	.word	0x08002c19
 8002bc8:	08002d9f 	.word	0x08002d9f
 8002bcc:	08002d9f 	.word	0x08002d9f
 8002bd0:	08002d9f 	.word	0x08002d9f
 8002bd4:	08002c59 	.word	0x08002c59
 8002bd8:	08002d9f 	.word	0x08002d9f
 8002bdc:	08002d9f 	.word	0x08002d9f
 8002be0:	08002d9f 	.word	0x08002d9f
 8002be4:	08002c9b 	.word	0x08002c9b
 8002be8:	08002d9f 	.word	0x08002d9f
 8002bec:	08002d9f 	.word	0x08002d9f
 8002bf0:	08002d9f 	.word	0x08002d9f
 8002bf4:	08002cdb 	.word	0x08002cdb
 8002bf8:	08002d9f 	.word	0x08002d9f
 8002bfc:	08002d9f 	.word	0x08002d9f
 8002c00:	08002d9f 	.word	0x08002d9f
 8002c04:	08002d1d 	.word	0x08002d1d
 8002c08:	08002d9f 	.word	0x08002d9f
 8002c0c:	08002d9f 	.word	0x08002d9f
 8002c10:	08002d9f 	.word	0x08002d9f
 8002c14:	08002d5d 	.word	0x08002d5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa62 	bl	80030e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	619a      	str	r2, [r3, #24]
      break;
 8002c56:	e0a5      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fab4 	bl	80031cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	021a      	lsls	r2, r3, #8
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
      break;
 8002c98:	e084      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fb0b 	bl	80032bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0208 	orr.w	r2, r2, #8
 8002cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69d9      	ldr	r1, [r3, #28]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	61da      	str	r2, [r3, #28]
      break;
 8002cd8:	e064      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fb61 	bl	80033a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69d9      	ldr	r1, [r3, #28]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	021a      	lsls	r2, r3, #8
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	61da      	str	r2, [r3, #28]
      break;
 8002d1a:	e043      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fb98 	bl	8003458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0208 	orr.w	r2, r2, #8
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d5a:	e023      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fbca 	bl	80034fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d9c:	e002      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
      break;
 8002da2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0b4      	b.n	8002f3e <HAL_TIM_ConfigClockSource+0x186>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4b56      	ldr	r3, [pc, #344]	@ (8002f48 <HAL_TIM_ConfigClockSource+0x190>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0c:	d03e      	beq.n	8002e8c <HAL_TIM_ConfigClockSource+0xd4>
 8002e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e12:	f200 8087 	bhi.w	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1a:	f000 8086 	beq.w	8002f2a <HAL_TIM_ConfigClockSource+0x172>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	d87f      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b70      	cmp	r3, #112	@ 0x70
 8002e26:	d01a      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xa6>
 8002e28:	2b70      	cmp	r3, #112	@ 0x70
 8002e2a:	d87b      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b60      	cmp	r3, #96	@ 0x60
 8002e2e:	d050      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e30:	2b60      	cmp	r3, #96	@ 0x60
 8002e32:	d877      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b50      	cmp	r3, #80	@ 0x50
 8002e36:	d03c      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e38:	2b50      	cmp	r3, #80	@ 0x50
 8002e3a:	d873      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b40      	cmp	r3, #64	@ 0x40
 8002e3e:	d058      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d86f      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b30      	cmp	r3, #48	@ 0x30
 8002e46:	d064      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b30      	cmp	r3, #48	@ 0x30
 8002e4a:	d86b      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d060      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d867      	bhi.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d05c      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d05a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	e062      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	f000 fd3d 	bl	80038ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	609a      	str	r2, [r3, #8]
      break;
 8002e8a:	e04f      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e9c:	f000 fd26 	bl	80038ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e03c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f000 fbe4 	bl	800368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2150      	movs	r1, #80	@ 0x50
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fcf3 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e02c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f000 fc40 	bl	8003764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2160      	movs	r1, #96	@ 0x60
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fce3 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e01c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 fbc4 	bl	800368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2140      	movs	r1, #64	@ 0x40
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fcd3 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8002f10:	e00c      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fcca 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8002f22:	e003      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	fffeff88 	.word	0xfffeff88

08002f4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a43      	ldr	r2, [pc, #268]	@ (80030bc <TIM_Base_SetConfig+0x120>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a40      	ldr	r2, [pc, #256]	@ (80030c0 <TIM_Base_SetConfig+0x124>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80030c4 <TIM_Base_SetConfig+0x128>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3e      	ldr	r2, [pc, #248]	@ (80030c8 <TIM_Base_SetConfig+0x12c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80030cc <TIM_Base_SetConfig+0x130>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a32      	ldr	r2, [pc, #200]	@ (80030bc <TIM_Base_SetConfig+0x120>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02b      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d027      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2f      	ldr	r2, [pc, #188]	@ (80030c0 <TIM_Base_SetConfig+0x124>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d023      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2e      	ldr	r2, [pc, #184]	@ (80030c4 <TIM_Base_SetConfig+0x128>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01f      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2d      	ldr	r2, [pc, #180]	@ (80030c8 <TIM_Base_SetConfig+0x12c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01b      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2c      	ldr	r2, [pc, #176]	@ (80030cc <TIM_Base_SetConfig+0x130>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d017      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a2b      	ldr	r2, [pc, #172]	@ (80030d0 <TIM_Base_SetConfig+0x134>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <TIM_Base_SetConfig+0x138>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00f      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a29      	ldr	r2, [pc, #164]	@ (80030d8 <TIM_Base_SetConfig+0x13c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00b      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a28      	ldr	r2, [pc, #160]	@ (80030dc <TIM_Base_SetConfig+0x140>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a27      	ldr	r2, [pc, #156]	@ (80030e0 <TIM_Base_SetConfig+0x144>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a26      	ldr	r2, [pc, #152]	@ (80030e4 <TIM_Base_SetConfig+0x148>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <TIM_Base_SetConfig+0x120>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_Base_SetConfig+0xf2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a10      	ldr	r2, [pc, #64]	@ (80030cc <TIM_Base_SetConfig+0x130>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d103      	bne.n	8003096 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40010400 	.word	0x40010400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800
 80030dc:	40001800 	.word	0x40001800
 80030e0:	40001c00 	.word	0x40001c00
 80030e4:	40002000 	.word	0x40002000

080030e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 0201 	bic.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <TIM_OC1_SetConfig+0xd8>)
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f023 0302 	bic.w	r3, r3, #2
 8003130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a21      	ldr	r2, [pc, #132]	@ (80031c4 <TIM_OC1_SetConfig+0xdc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_OC1_SetConfig+0x64>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a20      	ldr	r2, [pc, #128]	@ (80031c8 <TIM_OC1_SetConfig+0xe0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d10c      	bne.n	8003166 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0308 	bic.w	r3, r3, #8
 8003152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a16      	ldr	r2, [pc, #88]	@ (80031c4 <TIM_OC1_SetConfig+0xdc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC1_SetConfig+0x8e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <TIM_OC1_SetConfig+0xe0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d111      	bne.n	800319a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	621a      	str	r2, [r3, #32]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	fffeff8f 	.word	0xfffeff8f
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40010400 	.word	0x40010400

080031cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 0210 	bic.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4b2e      	ldr	r3, [pc, #184]	@ (80032b0 <TIM_OC2_SetConfig+0xe4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0320 	bic.w	r3, r3, #32
 8003216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a23      	ldr	r2, [pc, #140]	@ (80032b4 <TIM_OC2_SetConfig+0xe8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC2_SetConfig+0x68>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <TIM_OC2_SetConfig+0xec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10d      	bne.n	8003250 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800324e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a18      	ldr	r2, [pc, #96]	@ (80032b4 <TIM_OC2_SetConfig+0xe8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_OC2_SetConfig+0x94>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <TIM_OC2_SetConfig+0xec>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d113      	bne.n	8003288 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	feff8fff 	.word	0xfeff8fff
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40010400 	.word	0x40010400

080032bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4b2d      	ldr	r3, [pc, #180]	@ (800339c <TIM_OC3_SetConfig+0xe0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <TIM_OC3_SetConfig+0xe4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC3_SetConfig+0x66>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a21      	ldr	r2, [pc, #132]	@ (80033a4 <TIM_OC3_SetConfig+0xe8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10d      	bne.n	800333e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800333c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <TIM_OC3_SetConfig+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_OC3_SetConfig+0x92>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <TIM_OC3_SetConfig+0xe8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d113      	bne.n	8003376 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	fffeff8f 	.word	0xfffeff8f
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40010400 	.word	0x40010400

080033a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <TIM_OC4_SetConfig+0xa4>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	031b      	lsls	r3, r3, #12
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <TIM_OC4_SetConfig+0xa8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_OC4_SetConfig+0x68>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <TIM_OC4_SetConfig+0xac>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	feff8fff 	.word	0xfeff8fff
 8003450:	40010000 	.word	0x40010000
 8003454:	40010400 	.word	0x40010400

08003458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <TIM_OC5_SetConfig+0x98>)
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <TIM_OC5_SetConfig+0x9c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC5_SetConfig+0x5e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a11      	ldr	r2, [pc, #68]	@ (80034f8 <TIM_OC5_SetConfig+0xa0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d109      	bne.n	80034ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	fffeff8f 	.word	0xfffeff8f
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010400 	.word	0x40010400

080034fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4b1c      	ldr	r3, [pc, #112]	@ (8003598 <TIM_OC6_SetConfig+0x9c>)
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800353e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	051b      	lsls	r3, r3, #20
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a13      	ldr	r2, [pc, #76]	@ (800359c <TIM_OC6_SetConfig+0xa0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_OC6_SetConfig+0x60>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <TIM_OC6_SetConfig+0xa4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d109      	bne.n	8003570 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	029b      	lsls	r3, r3, #10
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	feff8fff 	.word	0xfeff8fff
 800359c:	40010000 	.word	0x40010000
 80035a0:	40010400 	.word	0x40010400

080035a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0201 	bic.w	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a28      	ldr	r2, [pc, #160]	@ (8003670 <TIM_TI1_SetConfig+0xcc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01b      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d8:	d017      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <TIM_TI1_SetConfig+0xd0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a24      	ldr	r2, [pc, #144]	@ (8003678 <TIM_TI1_SetConfig+0xd4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a23      	ldr	r2, [pc, #140]	@ (800367c <TIM_TI1_SetConfig+0xd8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <TIM_TI1_SetConfig+0xdc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a21      	ldr	r2, [pc, #132]	@ (8003684 <TIM_TI1_SetConfig+0xe0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_TI1_SetConfig+0x66>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <TIM_TI1_SetConfig+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <TIM_TI1_SetConfig+0x6a>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <TIM_TI1_SetConfig+0x6c>
 800360e:	2300      	movs	r3, #0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e003      	b.n	800362e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	b2db      	uxtb	r3, r3
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f023 030a 	bic.w	r3, r3, #10
 8003648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f003 030a 	and.w	r3, r3, #10
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 030a 	bic.w	r3, r3, #10
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	b29b      	uxth	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0210 	bic.w	r2, r3, #16
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800378e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	031b      	lsls	r3, r3, #12
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003800:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	b2db      	uxtb	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	031b      	lsls	r3, r3, #12
 8003880:	b29b      	uxth	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800388e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	031b      	lsls	r3, r3, #12
 8003894:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f043 0307 	orr.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	021a      	lsls	r2, r3, #8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	431a      	orrs	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2201      	movs	r2, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	43db      	mvns	r3, r3
 800394e:	401a      	ands	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	fa01 f303 	lsl.w	r3, r1, r3
 8003964:	431a      	orrs	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e06d      	b.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2f      	ldr	r2, [pc, #188]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a20      	ldr	r2, [pc, #128]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a02:	d01d      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a15      	ldr	r2, [pc, #84]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10c      	bne.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40001800 	.word	0x40001800

08003a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <memset>:
 8003ad0:	4402      	add	r2, r0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d100      	bne.n	8003ada <memset+0xa>
 8003ad8:	4770      	bx	lr
 8003ada:	f803 1b01 	strb.w	r1, [r3], #1
 8003ade:	e7f9      	b.n	8003ad4 <memset+0x4>

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8003b18 <__libc_init_array+0x38>)
 8003ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8003b1c <__libc_init_array+0x3c>)
 8003ae6:	1b64      	subs	r4, r4, r5
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	2600      	movs	r6, #0
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	4d0b      	ldr	r5, [pc, #44]	@ (8003b20 <__libc_init_array+0x40>)
 8003af2:	4c0c      	ldr	r4, [pc, #48]	@ (8003b24 <__libc_init_array+0x44>)
 8003af4:	f000 f818 	bl	8003b28 <_init>
 8003af8:	1b64      	subs	r4, r4, r5
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	2600      	movs	r6, #0
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003b58 	.word	0x08003b58
 8003b1c:	08003b58 	.word	0x08003b58
 8003b20:	08003b58 	.word	0x08003b58
 8003b24:	08003b5c 	.word	0x08003b5c

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
