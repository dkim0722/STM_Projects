
uart_interrupt_rtos_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005594  08005594  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800559c  0800559c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055a0  080055a0  000065a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080055a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000441c  20000060  08005604  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000447c  08005604  0000747c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137a0  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b70  00000000  00000000  0001a82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d60  00000000  00000000  0001e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297c5  00000000  00000000  0001f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001480b  00000000  00000000  000489f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104122  00000000  00000000  0005d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  00161368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00166004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080054d0 	.word	0x080054d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080054d0 	.word	0x080054d0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <vApplicationGetIdleTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <vApplicationGetIdleTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800062a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	2000007c 	.word	0x2000007c
 800063c:	200000d0 	.word	0x200000d0

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b08e      	sub	sp, #56	@ 0x38
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fbf2 	bl	8000e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f83d 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8c7 	bl	80007e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000652:	f000 f895 	bl	8000780 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf((char*)message, "Hello, World!\r\n");
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <main+0x70>)
 8000658:	4816      	ldr	r0, [pc, #88]	@ (80006b4 <main+0x74>)
 800065a:	f004 fa99 	bl	8004b90 <siprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink0 */
  osThreadDef(blink0, StartDefaultTask, osPriorityAboveNormal, 0, 256);
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <main+0x78>)
 8000660:	f107 041c 	add.w	r4, r7, #28
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink0Handle = osThreadCreate(osThread(blink0), NULL);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f84f 	bl	800371c <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <main+0x7c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of blink1 */
  osThreadDef(blink1, StartTask01, osPriorityNormal, 0, 256);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <main+0x80>)
 8000686:	463c      	mov	r4, r7
 8000688:	461d      	mov	r5, r3
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink1Handle = osThreadCreate(osThread(blink1), NULL);
 8000696:	463b      	mov	r3, r7
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f83e 	bl	800371c <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <main+0x84>)
 80006a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a6:	f003 f832 	bl	800370e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0x6a>
 80006ae:	bf00      	nop
 80006b0:	080054e8 	.word	0x080054e8
 80006b4:	20000560 	.word	0x20000560
 80006b8:	08005500 	.word	0x08005500
 80006bc:	20000558 	.word	0x20000558
 80006c0:	08005524 	.word	0x08005524
 80006c4:	2000055c 	.word	0x2000055c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	@ 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fa7c 	bl	8004bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SystemClock_Config+0xb0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SystemClock_Config+0xb0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SystemClock_Config+0xb0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <SystemClock_Config+0xb4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <SystemClock_Config+0xb4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b19      	ldr	r3, [pc, #100]	@ (800077c <SystemClock_Config+0xb4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fe81 	bl	800143c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000740:	f000 f9d8 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f919 	bl	8001998 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800076c:	f000 f9c2 	bl	8000af4 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	@ 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <MX_USART3_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USART3_UART_Init+0x58>)
 80007c4:	f002 fa34 	bl	8002c30 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f991 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200004d0 	.word	0x200004d0
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b94      	ldr	r3, [pc, #592]	@ (8000a48 <MX_GPIO_Init+0x268>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a93      	ldr	r2, [pc, #588]	@ (8000a48 <MX_GPIO_Init+0x268>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b91      	ldr	r3, [pc, #580]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b8e      	ldr	r3, [pc, #568]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a8d      	ldr	r2, [pc, #564]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b8b      	ldr	r3, [pc, #556]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b88      	ldr	r3, [pc, #544]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a87      	ldr	r2, [pc, #540]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b85      	ldr	r3, [pc, #532]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b82      	ldr	r3, [pc, #520]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a81      	ldr	r2, [pc, #516]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b7c      	ldr	r3, [pc, #496]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a7b      	ldr	r2, [pc, #492]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b79      	ldr	r3, [pc, #484]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b76      	ldr	r3, [pc, #472]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a75      	ldr	r2, [pc, #468]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b73      	ldr	r3, [pc, #460]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	4b70      	ldr	r3, [pc, #448]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a6f      	ldr	r2, [pc, #444]	@ (8000a48 <MX_GPIO_Init+0x268>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b6d      	ldr	r3, [pc, #436]	@ (8000a48 <MX_GPIO_Init+0x268>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	486a      	ldr	r0, [pc, #424]	@ (8000a4c <MX_GPIO_Init+0x26c>)
 80008a4:	f000 fd7e 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008ae:	4868      	ldr	r0, [pc, #416]	@ (8000a50 <MX_GPIO_Init+0x270>)
 80008b0:	f000 fd78 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	4866      	ldr	r0, [pc, #408]	@ (8000a54 <MX_GPIO_Init+0x274>)
 80008ba:	f000 fd73 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	4865      	ldr	r0, [pc, #404]	@ (8000a58 <MX_GPIO_Init+0x278>)
 80008c4:	f000 fd6e 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d4:	2302      	movs	r3, #2
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	485f      	ldr	r0, [pc, #380]	@ (8000a5c <MX_GPIO_Init+0x27c>)
 80008e0:	f000 fbb4 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008e4:	2332      	movs	r3, #50	@ 0x32
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f4:	230b      	movs	r3, #11
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4857      	ldr	r0, [pc, #348]	@ (8000a5c <MX_GPIO_Init+0x27c>)
 8000900:	f000 fba4 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	484c      	ldr	r0, [pc, #304]	@ (8000a4c <MX_GPIO_Init+0x26c>)
 800091c:	f000 fb96 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000920:	2386      	movs	r3, #134	@ 0x86
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000930:	230b      	movs	r3, #11
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4844      	ldr	r0, [pc, #272]	@ (8000a4c <MX_GPIO_Init+0x26c>)
 800093c:	f000 fb86 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000940:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483d      	ldr	r0, [pc, #244]	@ (8000a50 <MX_GPIO_Init+0x270>)
 800095a:	f000 fb77 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4835      	ldr	r0, [pc, #212]	@ (8000a50 <MX_GPIO_Init+0x270>)
 800097c:	f000 fb66 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000980:	2340      	movs	r3, #64	@ 0x40
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	482f      	ldr	r0, [pc, #188]	@ (8000a54 <MX_GPIO_Init+0x274>)
 8000998:	f000 fb58 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0x274>)
 80009b0:	f000 fb4c 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009b4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c6:	230a      	movs	r3, #10
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_GPIO_Init+0x26c>)
 80009d2:	f000 fb3b 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <MX_GPIO_Init+0x26c>)
 80009ec:	f000 fb2e 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a02:	230b      	movs	r3, #11
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_GPIO_Init+0x274>)
 8000a0e:	f000 fb1d 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <MX_GPIO_Init+0x278>)
 8000a2a:	f000 fb0f 	bl	800104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2105      	movs	r1, #5
 8000a32:	2028      	movs	r0, #40	@ 0x28
 8000a34:	f000 fae0 	bl	8000ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a38:	2028      	movs	r0, #40	@ 0x28
 8000a3a:	f000 faf9 	bl	8001030 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	@ 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40021800 	.word	0x40021800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40020800 	.word	0x40020800

08000a60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d105      	bne.n	8000a7e <HAL_GPIO_EXTI_Callback+0x1e>
		HAL_UART_Transmit(&huart3, message, sizeof(message), 10);
 8000a72:	230a      	movs	r3, #10
 8000a74:	2232      	movs	r2, #50	@ 0x32
 8000a76:	4904      	ldr	r1, [pc, #16]	@ (8000a88 <HAL_GPIO_EXTI_Callback+0x28>)
 8000a78:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a7a:	f002 f927 	bl	8002ccc <HAL_UART_Transmit>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000560 	.word	0x20000560
 8000a8c:	200004d0 	.word	0x200004d0

08000a90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); //
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <StartDefaultTask+0x1c>)
 8000a9c:	f000 fc9b 	bl	80013d6 <HAL_GPIO_TogglePin>
    osDelay(499);
 8000aa0:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8000aa4:	f002 fe86 	bl	80037b4 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0); //
 8000aa8:	bf00      	nop
 8000aaa:	e7f5      	b.n	8000a98 <StartDefaultTask+0x8>
 8000aac:	40020000 	.word	0x40020000

08000ab0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);	// RED LED
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <StartTask01+0x1c>)
 8000abc:	f000 fc8b 	bl	80013d6 <HAL_GPIO_TogglePin>
    osDelay(999);
 8000ac0:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8000ac4:	f002 fe76 	bl	80037b4 <osDelay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);	// RED LED
 8000ac8:	bf00      	nop
 8000aca:	e7f5      	b.n	8000ab8 <StartTask01+0x8>
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ae2:	f000 f9b1 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010000 	.word	0x40010000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	f06f 0001 	mvn.w	r0, #1
 8000b3e:	f000 fa5b 	bl	8000ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ae      	sub	sp, #184	@ 0xb8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2290      	movs	r2, #144	@ 0x90
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 f82f 	bl	8004bd4 <memset>
  if(huart->Instance==USART3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_UART_MspInit+0xb4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d13c      	bne.n	8000bfa <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f958 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9a:	f7ff ffab 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_UART_MspInit+0xbc>)
 8000bf6:	f000 fa29 	bl	800104c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bfa:	bf00      	nop
 8000bfc:	37b8      	adds	r7, #184	@ 0xb8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004800 	.word	0x40004800
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020c00 	.word	0x40020c00

08000c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	@ 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c20:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <HAL_InitTick+0xcc>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c24:	4a2d      	ldr	r2, [pc, #180]	@ (8000cdc <HAL_InitTick+0xcc>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <HAL_InitTick+0xcc>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f8cc 	bl	8001de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c48:	f001 f8b6 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8000c4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c50:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <HAL_InitTick+0xd0>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <HAL_InitTick+0xd8>)
 8000c60:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c82:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c84:	f001 fd06 	bl	8002694 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d11b      	bne.n	8000cce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c96:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <HAL_InitTick+0xd4>)
 8000c98:	f001 fd5e 	bl	8002758 <HAL_TIM_Base_Start_IT>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 f9c0 	bl	8001030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d808      	bhi.n	8000cc8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f000 f99c 	bl	8000ff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_InitTick+0xdc>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e002      	b.n	8000cce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3730      	adds	r7, #48	@ 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20000594 	.word	0x20000594
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d2e:	f001 fd8b 	bl	8002848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000594 	.word	0x20000594

08000d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000d40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d44:	f000 fb62 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f003 ff32 	bl	8004be4 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20080000 	.word	0x20080000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200005e0 	.word	0x200005e0
 8000db4:	20004480 	.word	0x20004480

08000db8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fef1 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fc17 	bl	8000640 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e20:	080055a4 	.word	0x080055a4
  ldr r2, =_sbss
 8000e24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e28:	2000447c 	.word	0x2000447c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>

08000e2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
 8000e34:	f000 f8d5 	bl	8000fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f7ff fee9 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3e:	f7ff fe5f 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	200005e4 	.word	0x200005e4

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200005e4 	.word	0x200005e4

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	05fa0000 	.word	0x05fa0000

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff4c 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100a:	f7ff ff61 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 800100e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff ffb1 	bl	8000f7c <NVIC_EncodePriority>
 800101a:	4602      	mov	r2, r0
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff80 	bl	8000f28 <__NVIC_SetPriority>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff54 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e175      	b.n	8001358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8164 	bne.w	8001352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x56>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80be 	beq.w	8001352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a65      	ldr	r2, [pc, #404]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011ee:	4a61      	ldr	r2, [pc, #388]	@ (8001374 <HAL_GPIO_Init+0x328>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a58      	ldr	r2, [pc, #352]	@ (8001378 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d037      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a57      	ldr	r2, [pc, #348]	@ (800137c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d031      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a56      	ldr	r2, [pc, #344]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a55      	ldr	r2, [pc, #340]	@ (8001384 <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a54      	ldr	r2, [pc, #336]	@ (8001388 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a53      	ldr	r2, [pc, #332]	@ (800138c <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	@ (8001394 <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	@ (8001398 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	@ (800139c <HAL_GPIO_Init+0x350>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x21a>
 8001262:	2309      	movs	r3, #9
 8001264:	e012      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001266:	230a      	movs	r3, #10
 8001268:	e010      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126a:	2308      	movs	r3, #8
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126e:	2307      	movs	r3, #7
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x240>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <HAL_GPIO_Init+0x328>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a34      	ldr	r2, [pc, #208]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_GPIO_Init+0x354>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae86 	bls.w	800106c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40022000 	.word	0x40022000
 800139c:	40022400 	.word	0x40022400
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb18 	bl	8000a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e29b      	b.n	800198a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001460:	4b96      	ldr	r3, [pc, #600]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146c:	4b93      	ldr	r3, [pc, #588]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
 8001478:	4b90      	ldr	r3, [pc, #576]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	4b8d      	ldr	r3, [pc, #564]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06c      	beq.n	800156c <HAL_RCC_OscConfig+0x130>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d168      	bne.n	800156c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e275      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x7a>
 80014a8:	4b84      	ldr	r3, [pc, #528]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a83      	ldr	r2, [pc, #524]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x9c>
 80014be:	4b7f      	ldr	r3, [pc, #508]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7e      	ldr	r2, [pc, #504]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b7c      	ldr	r3, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7b      	ldr	r2, [pc, #492]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xc0>
 80014e2:	4b76      	ldr	r3, [pc, #472]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a75      	ldr	r2, [pc, #468]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b73      	ldr	r3, [pc, #460]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a72      	ldr	r2, [pc, #456]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014fc:	4b6f      	ldr	r3, [pc, #444]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a6e      	ldr	r2, [pc, #440]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6c      	ldr	r3, [pc, #432]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fca8 	bl	8000e70 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fca4 	bl	8000e70 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e229      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc94 	bl	8000e70 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc90 	bl	8000e70 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e215      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x110>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d069      	beq.n	800164e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157a:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x190>
 8001592:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1e9      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	493d      	ldr	r1, [pc, #244]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e040      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc46 	bl	8000e70 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc42 	bl	8000e70 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1c7      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4929      	ldr	r1, [pc, #164]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc22 	bl	8000e70 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc1e 	bl	8000e70 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1a3      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d038      	beq.n	80016cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d019      	beq.n	8001696 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fbff 	bl	8000e70 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fbfb 	bl	8000e70 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e180      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800168a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x23a>
 8001694:	e01a      	b.n	80016cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169a:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <HAL_RCC_OscConfig+0x280>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff fbe5 	bl	8000e70 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff fbe1 	bl	8000e70 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d903      	bls.n	80016c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e166      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
 80016bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b92      	ldr	r3, [pc, #584]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a4 	beq.w	8001822 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b8c      	ldr	r3, [pc, #560]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b89      	ldr	r3, [pc, #548]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a88      	ldr	r2, [pc, #544]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b86      	ldr	r3, [pc, #536]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b83      	ldr	r3, [pc, #524]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800170e:	4b80      	ldr	r3, [pc, #512]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7f      	ldr	r2, [pc, #508]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fba9 	bl	8000e70 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fba5 	bl	8000e70 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	@ 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e12a      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b76      	ldr	r3, [pc, #472]	@ (8001910 <HAL_RCC_OscConfig+0x4d4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x31a>
 8001748:	4b70      	ldr	r3, [pc, #448]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a6f      	ldr	r2, [pc, #444]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x33c>
 800175e:	4b6b      	ldr	r3, [pc, #428]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a6a      	ldr	r2, [pc, #424]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	4b68      	ldr	r3, [pc, #416]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a67      	ldr	r2, [pc, #412]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x35e>
 8001780:	4b62      	ldr	r3, [pc, #392]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001784:	4a61      	ldr	r2, [pc, #388]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6713      	str	r3, [r2, #112]	@ 0x70
 800178c:	4b5f      	ldr	r3, [pc, #380]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	4a5e      	ldr	r2, [pc, #376]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	@ 0x70
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
 800179a:	4b5c      	ldr	r3, [pc, #368]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a5b      	ldr	r2, [pc, #364]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a58      	ldr	r2, [pc, #352]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb59 	bl	8000e70 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fb55 	bl	8000e70 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0d8      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b4c      	ldr	r3, [pc, #304]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x386>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb43 	bl	8000e70 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb3f 	bl	8000e70 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0c2      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a3c      	ldr	r2, [pc, #240]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80ae 	beq.w	8001988 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b37      	ldr	r3, [pc, #220]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d06d      	beq.n	8001914 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d14b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b32      	ldr	r3, [pc, #200]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a31      	ldr	r2, [pc, #196]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fb10 	bl	8000e70 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fb0c 	bl	8000e70 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e091      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b29      	ldr	r3, [pc, #164]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	071b      	lsls	r3, r3, #28
 800189e:	491b      	ldr	r1, [pc, #108]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a18      	ldr	r2, [pc, #96]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fade 	bl	8000e70 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fada 	bl	8000e70 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e05f      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x47c>
 80018d6:	e057      	b.n	8001988 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fac4 	bl	8000e70 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fac0 	bl	8000e70 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_RCC_OscConfig+0x4d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x4b0>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x54c>
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <HAL_RCC_OscConfig+0x558>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d030      	beq.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d129      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d122      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800194a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800194c:	4293      	cmp	r3, r2
 800194e:	d119      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d10f      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 020f 	bic.w	r2, r3, #15
 80019c6:	4965      	ldr	r1, [pc, #404]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f9f0 	bl	8000e70 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f9ec 	bl	8000e70 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 020f 	bic.w	r2, r3, #15
 8001ad2:	4922      	ldr	r1, [pc, #136]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	@ (8001b64 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <HAL_RCC_ClockConfig+0x1d0>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_ClockConfig+0x1d4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f860 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005548 	.word	0x08005548
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b094      	sub	sp, #80	@ 0x50
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b79      	ldr	r3, [pc, #484]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80e1 	bhi.w	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0db      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b72      	ldr	r3, [pc, #456]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bae:	e0d8      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6139      	str	r1, [r7, #16]
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c14:	4659      	mov	r1, fp
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4651      	mov	r1, sl
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4651      	mov	r1, sl
 8001c24:	ebb2 0801 	subs.w	r8, r2, r1
 8001c28:	4659      	mov	r1, fp
 8001c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c80:	f7fe fb2e 	bl	80002e0 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b38      	ldr	r3, [pc, #224]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0159      	lsls	r1, r3, #5
 8001cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cba:	0150      	lsls	r0, r2, #5
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	464b      	mov	r3, r9
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	61fa      	str	r2, [r7, #28]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	f7fe fad4 	bl	80002e0 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3750      	adds	r7, #80	@ 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400

08001d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08005558 	.word	0x08005558

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08005558 	.word	0x08005558

08001de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_RCC_GetClockConfig+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e6c:	4b69      	ldr	r3, [pc, #420]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a68      	ldr	r2, [pc, #416]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	4b66      	ldr	r3, [pc, #408]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e80:	4964      	ldr	r1, [pc, #400]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	4959      	ldr	r1, [pc, #356]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eda:	4b4e      	ldr	r3, [pc, #312]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	494a      	ldr	r1, [pc, #296]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef8:	d101      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808b 	beq.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	4a39      	ldr	r2, [pc, #228]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f40:	4b35      	ldr	r3, [pc, #212]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a34      	ldr	r2, [pc, #208]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7fe ff90 	bl	8000e70 <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe ff8c 	bl	8000e70 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e38f      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f66:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d035      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d02e      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f90:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001faa:	4a1a      	ldr	r2, [pc, #104]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fb2:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d114      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ff54 	bl	8000e70 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe ff50 	bl	8000e70 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e351      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ee      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ffa:	d111      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800200a:	400b      	ands	r3, r1
 800200c:	4901      	ldr	r1, [pc, #4]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
 8002012:	e00b      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000
 800201c:	0ffffcff 	.word	0x0ffffcff
 8002020:	4bac      	ldr	r3, [pc, #688]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4aab      	ldr	r2, [pc, #684]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800202a:	6093      	str	r3, [r2, #8]
 800202c:	4ba9      	ldr	r3, [pc, #676]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	49a6      	ldr	r1, [pc, #664]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	4313      	orrs	r3, r2
 800203c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800204a:	4ba2      	ldr	r3, [pc, #648]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002050:	4aa0      	ldr	r2, [pc, #640]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002056:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800205a:	4b9e      	ldr	r3, [pc, #632]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002064:	499b      	ldr	r1, [pc, #620]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002078:	4b96      	ldr	r3, [pc, #600]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002086:	4993      	ldr	r1, [pc, #588]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209a:	4b8e      	ldr	r3, [pc, #568]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020a8:	498a      	ldr	r1, [pc, #552]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020bc:	4b85      	ldr	r3, [pc, #532]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ca:	4982      	ldr	r1, [pc, #520]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020de:	4b7d      	ldr	r3, [pc, #500]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4979      	ldr	r1, [pc, #484]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002100:	4b74      	ldr	r3, [pc, #464]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4971      	ldr	r1, [pc, #452]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002122:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002128:	f023 020c 	bic.w	r2, r3, #12
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002130:	4968      	ldr	r1, [pc, #416]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002144:	4b63      	ldr	r3, [pc, #396]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4960      	ldr	r1, [pc, #384]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002166:	4b5b      	ldr	r3, [pc, #364]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002174:	4957      	ldr	r1, [pc, #348]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002188:	4b52      	ldr	r3, [pc, #328]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002196:	494f      	ldr	r1, [pc, #316]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021aa:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4946      	ldr	r1, [pc, #280]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	493e      	ldr	r1, [pc, #248]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fc:	4935      	ldr	r1, [pc, #212]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800221e:	492d      	ldr	r1, [pc, #180]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002232:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002238:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002240:	4924      	ldr	r1, [pc, #144]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800224c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002278:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002280:	4914      	ldr	r1, [pc, #80]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022a4:	490b      	ldr	r1, [pc, #44]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c8:	4902      	ldr	r1, [pc, #8]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022d0:	e002      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f4:	4986      	ldr	r1, [pc, #536]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002308:	4b81      	ldr	r3, [pc, #516]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002318:	497d      	ldr	r1, [pc, #500]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d006      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80d6 	beq.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002334:	4b76      	ldr	r3, [pc, #472]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a75      	ldr	r2, [pc, #468]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fd96 	bl	8000e70 <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002348:	f7fe fd92 	bl	8000e70 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e195      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800235a:	4b6d      	ldr	r3, [pc, #436]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d021      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11d      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800237a:	4b65      	ldr	r3, [pc, #404]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002388:	4b61      	ldr	r3, [pc, #388]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	019a      	lsls	r2, r3, #6
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	4958      	ldr	r1, [pc, #352]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02e      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e0:	d129      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023f0:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f6:	0f1b      	lsrs	r3, r3, #28
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	019a      	lsls	r2, r3, #6
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	493e      	ldr	r1, [pc, #248]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800241e:	4b3c      	ldr	r3, [pc, #240]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002424:	f023 021f 	bic.w	r2, r3, #31
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	3b01      	subs	r3, #1
 800242e:	4938      	ldr	r1, [pc, #224]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01d      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002442:	4b33      	ldr	r3, [pc, #204]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002448:	0e1b      	lsrs	r3, r3, #24
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002450:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002456:	0f1b      	lsrs	r3, r3, #28
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	071b      	lsls	r3, r3, #28
 8002476:	4926      	ldr	r1, [pc, #152]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	071b      	lsls	r3, r3, #28
 80024a6:	491a      	ldr	r1, [pc, #104]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ba:	f7fe fcd9 	bl	8000e70 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024c2:	f7fe fcd5 	bl	8000e70 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	@ 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0d8      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 80ce 	bne.w	8002684 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fcbc 	bl	8000e70 <HAL_GetTick>
 80024f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024fa:	e00b      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024fc:	f7fe fcb8 	bl	8000e70 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d904      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0bb      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002514:	4b5e      	ldr	r3, [pc, #376]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800251c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002520:	d0ec      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02e      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d12a      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002558:	4b4d      	ldr	r3, [pc, #308]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	0f1b      	lsrs	r3, r3, #28
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	019a      	lsls	r2, r3, #6
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	061b      	lsls	r3, r3, #24
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	071b      	lsls	r3, r3, #28
 800257e:	4944      	ldr	r1, [pc, #272]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002586:	4b42      	ldr	r3, [pc, #264]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	493d      	ldr	r1, [pc, #244]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d022      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025b4:	d11d      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025bc:	0e1b      	lsrs	r3, r3, #24
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025c4:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	0f1b      	lsrs	r3, r3, #28
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	4929      	ldr	r1, [pc, #164]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	019a      	lsls	r2, r3, #6
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	4917      	ldr	r1, [pc, #92]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002640:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	4911      	ldr	r1, [pc, #68]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0e      	ldr	r2, [pc, #56]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fc08 	bl	8000e70 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002664:	f7fe fc04 	bl	8000e70 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800267e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002682:	d1ef      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e049      	b.n	800273a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f841 	bl	8002742 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f000 f9e8 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d001      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e054      	b.n	800281a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a26      	ldr	r2, [pc, #152]	@ (8002828 <HAL_TIM_Base_Start_IT+0xd0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279a:	d01d      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a22      	ldr	r2, [pc, #136]	@ (800282c <HAL_TIM_Base_Start_IT+0xd4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a21      	ldr	r2, [pc, #132]	@ (8002830 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d013      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_TIM_Base_Start_IT+0xdc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1e      	ldr	r2, [pc, #120]	@ (8002838 <HAL_TIM_Base_Start_IT+0xe0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <HAL_TIM_Base_Start_IT+0xe4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x80>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <HAL_TIM_Base_Start_IT+0xe8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d115      	bne.n	8002804 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_TIM_Base_Start_IT+0xec>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d015      	beq.n	8002816 <HAL_TIM_Base_Start_IT+0xbe>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f0:	d011      	beq.n	8002816 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	e008      	b.n	8002816 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e000      	b.n	8002818 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40010000 	.word	0x40010000
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800
 8002834:	40000c00 	.word	0x40000c00
 8002838:	40010400 	.word	0x40010400
 800283c:	40014000 	.word	0x40014000
 8002840:	40001800 	.word	0x40001800
 8002844:	00010007 	.word	0x00010007

08002848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0202 	mvn.w	r2, #2
 800287c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8e9 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8db 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8ec 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d020      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0204 	mvn.w	r2, #4
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8c3 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8b5 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f8c6 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f89d 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f88f 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8a0 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d020      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0210 	mvn.w	r2, #16
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2208      	movs	r2, #8
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f877 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f869 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f87a 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe f88e 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f913 	bl	8002c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f90b 	bl	8002c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f834 	bl	8002a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00c      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0220 	mvn.w	r2, #32
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8d3 	bl	8002bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a43      	ldr	r2, [pc, #268]	@ (8002bc8 <TIM_Base_SetConfig+0x120>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d013      	beq.n	8002ae8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac6:	d00f      	beq.n	8002ae8 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a40      	ldr	r2, [pc, #256]	@ (8002bcc <TIM_Base_SetConfig+0x124>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd0 <TIM_Base_SetConfig+0x128>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <TIM_Base_SetConfig+0x40>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3e      	ldr	r2, [pc, #248]	@ (8002bd4 <TIM_Base_SetConfig+0x12c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_Base_SetConfig+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd8 <TIM_Base_SetConfig+0x130>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d108      	bne.n	8002afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a32      	ldr	r2, [pc, #200]	@ (8002bc8 <TIM_Base_SetConfig+0x120>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02b      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b08:	d027      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <TIM_Base_SetConfig+0x124>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d023      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd0 <TIM_Base_SetConfig+0x128>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd4 <TIM_Base_SetConfig+0x12c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01b      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <TIM_Base_SetConfig+0x130>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d017      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <TIM_Base_SetConfig+0x134>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2a      	ldr	r2, [pc, #168]	@ (8002be0 <TIM_Base_SetConfig+0x138>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00f      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a29      	ldr	r2, [pc, #164]	@ (8002be4 <TIM_Base_SetConfig+0x13c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00b      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a28      	ldr	r2, [pc, #160]	@ (8002be8 <TIM_Base_SetConfig+0x140>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a27      	ldr	r2, [pc, #156]	@ (8002bec <TIM_Base_SetConfig+0x144>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <TIM_Base_SetConfig+0x148>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bc8 <TIM_Base_SetConfig+0x120>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0xf2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <TIM_Base_SetConfig+0x130>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d103      	bne.n	8002ba2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40010400 	.word	0x40010400
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800
 8002be8:	40001800 	.word	0x40001800
 8002bec:	40001c00 	.word	0x40001c00
 8002bf0:	40002000 	.word	0x40002000

08002bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e040      	b.n	8002cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ff7c 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	@ 0x24
 8002c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb16 	bl	80032a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f8af 	bl	8002de0 <UART_SetConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01b      	b.n	8002cc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb95 	bl	80033ec <UART_CheckIdleState>
 8002cc2:	4603      	mov	r3, r0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d177      	bne.n	8002dd4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_UART_Transmit+0x24>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e070      	b.n	8002dd6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2221      	movs	r2, #33	@ 0x21
 8002d00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d02:	f7fe f8b5 	bl	8000e70 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d108      	bne.n	8002d34 <HAL_UART_Transmit+0x68>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e003      	b.n	8002d3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d3c:	e02f      	b.n	8002d9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	@ 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fbf7 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e03b      	b.n	8002dd6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	3302      	adds	r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	e007      	b.n	8002d8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1c9      	bne.n	8002d3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	@ 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fbc1 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e005      	b.n	8002dd6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4ba6      	ldr	r3, [pc, #664]	@ (80030a4 <UART_SetConfig+0x2c4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6979      	ldr	r1, [r7, #20]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a94      	ldr	r2, [pc, #592]	@ (80030a8 <UART_SetConfig+0x2c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d120      	bne.n	8002e9e <UART_SetConfig+0xbe>
 8002e5c:	4b93      	ldr	r3, [pc, #588]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d816      	bhi.n	8002e98 <UART_SetConfig+0xb8>
 8002e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <UART_SetConfig+0x90>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e87 	.word	0x08002e87
 8002e7c:	08002e93 	.word	0x08002e93
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e150      	b.n	8003128 <UART_SetConfig+0x348>
 8002e86:	2302      	movs	r3, #2
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e14d      	b.n	8003128 <UART_SetConfig+0x348>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e14a      	b.n	8003128 <UART_SetConfig+0x348>
 8002e92:	2308      	movs	r3, #8
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e147      	b.n	8003128 <UART_SetConfig+0x348>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e144      	b.n	8003128 <UART_SetConfig+0x348>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a83      	ldr	r2, [pc, #524]	@ (80030b0 <UART_SetConfig+0x2d0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d132      	bne.n	8002f0e <UART_SetConfig+0x12e>
 8002ea8:	4b80      	ldr	r3, [pc, #512]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d828      	bhi.n	8002f08 <UART_SetConfig+0x128>
 8002eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ebc <UART_SetConfig+0xdc>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002f09 	.word	0x08002f09
 8002ec4:	08002f09 	.word	0x08002f09
 8002ec8:	08002f09 	.word	0x08002f09
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002f09 	.word	0x08002f09
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	08002f09 	.word	0x08002f09
 8002edc:	08002ef7 	.word	0x08002ef7
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f03 	.word	0x08002f03
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e118      	b.n	8003128 <UART_SetConfig+0x348>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e115      	b.n	8003128 <UART_SetConfig+0x348>
 8002efc:	2304      	movs	r3, #4
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e112      	b.n	8003128 <UART_SetConfig+0x348>
 8002f02:	2308      	movs	r3, #8
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e10f      	b.n	8003128 <UART_SetConfig+0x348>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e10c      	b.n	8003128 <UART_SetConfig+0x348>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a68      	ldr	r2, [pc, #416]	@ (80030b4 <UART_SetConfig+0x2d4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d120      	bne.n	8002f5a <UART_SetConfig+0x17a>
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f22:	2b30      	cmp	r3, #48	@ 0x30
 8002f24:	d013      	beq.n	8002f4e <UART_SetConfig+0x16e>
 8002f26:	2b30      	cmp	r3, #48	@ 0x30
 8002f28:	d814      	bhi.n	8002f54 <UART_SetConfig+0x174>
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x162>
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d810      	bhi.n	8002f54 <UART_SetConfig+0x174>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <UART_SetConfig+0x15c>
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d006      	beq.n	8002f48 <UART_SetConfig+0x168>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x174>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0f2      	b.n	8003128 <UART_SetConfig+0x348>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0ef      	b.n	8003128 <UART_SetConfig+0x348>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0ec      	b.n	8003128 <UART_SetConfig+0x348>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e0e9      	b.n	8003128 <UART_SetConfig+0x348>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0e6      	b.n	8003128 <UART_SetConfig+0x348>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <UART_SetConfig+0x2d8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d120      	bne.n	8002fa6 <UART_SetConfig+0x1c6>
 8002f64:	4b51      	ldr	r3, [pc, #324]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f70:	d013      	beq.n	8002f9a <UART_SetConfig+0x1ba>
 8002f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f74:	d814      	bhi.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f76:	2b80      	cmp	r3, #128	@ 0x80
 8002f78:	d009      	beq.n	8002f8e <UART_SetConfig+0x1ae>
 8002f7a:	2b80      	cmp	r3, #128	@ 0x80
 8002f7c:	d810      	bhi.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <UART_SetConfig+0x1a8>
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d006      	beq.n	8002f94 <UART_SetConfig+0x1b4>
 8002f86:	e00b      	b.n	8002fa0 <UART_SetConfig+0x1c0>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e0cc      	b.n	8003128 <UART_SetConfig+0x348>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e0c9      	b.n	8003128 <UART_SetConfig+0x348>
 8002f94:	2304      	movs	r3, #4
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e0c6      	b.n	8003128 <UART_SetConfig+0x348>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e0c3      	b.n	8003128 <UART_SetConfig+0x348>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e0c0      	b.n	8003128 <UART_SetConfig+0x348>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a44      	ldr	r2, [pc, #272]	@ (80030bc <UART_SetConfig+0x2dc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d125      	bne.n	8002ffc <UART_SetConfig+0x21c>
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ac <UART_SetConfig+0x2cc>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fbe:	d017      	beq.n	8002ff0 <UART_SetConfig+0x210>
 8002fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc4:	d817      	bhi.n	8002ff6 <UART_SetConfig+0x216>
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fca:	d00b      	beq.n	8002fe4 <UART_SetConfig+0x204>
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd0:	d811      	bhi.n	8002ff6 <UART_SetConfig+0x216>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <UART_SetConfig+0x1fe>
 8002fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fda:	d006      	beq.n	8002fea <UART_SetConfig+0x20a>
 8002fdc:	e00b      	b.n	8002ff6 <UART_SetConfig+0x216>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e0a1      	b.n	8003128 <UART_SetConfig+0x348>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e09e      	b.n	8003128 <UART_SetConfig+0x348>
 8002fea:	2304      	movs	r3, #4
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e09b      	b.n	8003128 <UART_SetConfig+0x348>
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e098      	b.n	8003128 <UART_SetConfig+0x348>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e095      	b.n	8003128 <UART_SetConfig+0x348>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2f      	ldr	r2, [pc, #188]	@ (80030c0 <UART_SetConfig+0x2e0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d125      	bne.n	8003052 <UART_SetConfig+0x272>
 8003006:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <UART_SetConfig+0x2cc>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003010:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003014:	d017      	beq.n	8003046 <UART_SetConfig+0x266>
 8003016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800301a:	d817      	bhi.n	800304c <UART_SetConfig+0x26c>
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003020:	d00b      	beq.n	800303a <UART_SetConfig+0x25a>
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003026:	d811      	bhi.n	800304c <UART_SetConfig+0x26c>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <UART_SetConfig+0x254>
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d006      	beq.n	8003040 <UART_SetConfig+0x260>
 8003032:	e00b      	b.n	800304c <UART_SetConfig+0x26c>
 8003034:	2301      	movs	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e076      	b.n	8003128 <UART_SetConfig+0x348>
 800303a:	2302      	movs	r3, #2
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e073      	b.n	8003128 <UART_SetConfig+0x348>
 8003040:	2304      	movs	r3, #4
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e070      	b.n	8003128 <UART_SetConfig+0x348>
 8003046:	2308      	movs	r3, #8
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e06d      	b.n	8003128 <UART_SetConfig+0x348>
 800304c:	2310      	movs	r3, #16
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e06a      	b.n	8003128 <UART_SetConfig+0x348>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <UART_SetConfig+0x2e4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d138      	bne.n	80030ce <UART_SetConfig+0x2ee>
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <UART_SetConfig+0x2cc>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003062:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003066:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800306a:	d017      	beq.n	800309c <UART_SetConfig+0x2bc>
 800306c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003070:	d82a      	bhi.n	80030c8 <UART_SetConfig+0x2e8>
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003076:	d00b      	beq.n	8003090 <UART_SetConfig+0x2b0>
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307c:	d824      	bhi.n	80030c8 <UART_SetConfig+0x2e8>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <UART_SetConfig+0x2aa>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003086:	d006      	beq.n	8003096 <UART_SetConfig+0x2b6>
 8003088:	e01e      	b.n	80030c8 <UART_SetConfig+0x2e8>
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e04b      	b.n	8003128 <UART_SetConfig+0x348>
 8003090:	2302      	movs	r3, #2
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e048      	b.n	8003128 <UART_SetConfig+0x348>
 8003096:	2304      	movs	r3, #4
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e045      	b.n	8003128 <UART_SetConfig+0x348>
 800309c:	2308      	movs	r3, #8
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e042      	b.n	8003128 <UART_SetConfig+0x348>
 80030a2:	bf00      	nop
 80030a4:	efff69f3 	.word	0xefff69f3
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40004400 	.word	0x40004400
 80030b4:	40004800 	.word	0x40004800
 80030b8:	40004c00 	.word	0x40004c00
 80030bc:	40005000 	.word	0x40005000
 80030c0:	40011400 	.word	0x40011400
 80030c4:	40007800 	.word	0x40007800
 80030c8:	2310      	movs	r3, #16
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e02c      	b.n	8003128 <UART_SetConfig+0x348>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	@ (800329c <UART_SetConfig+0x4bc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d125      	bne.n	8003124 <UART_SetConfig+0x344>
 80030d8:	4b71      	ldr	r3, [pc, #452]	@ (80032a0 <UART_SetConfig+0x4c0>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030e6:	d017      	beq.n	8003118 <UART_SetConfig+0x338>
 80030e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030ec:	d817      	bhi.n	800311e <UART_SetConfig+0x33e>
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f2:	d00b      	beq.n	800310c <UART_SetConfig+0x32c>
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f8:	d811      	bhi.n	800311e <UART_SetConfig+0x33e>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <UART_SetConfig+0x326>
 80030fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003102:	d006      	beq.n	8003112 <UART_SetConfig+0x332>
 8003104:	e00b      	b.n	800311e <UART_SetConfig+0x33e>
 8003106:	2300      	movs	r3, #0
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e00d      	b.n	8003128 <UART_SetConfig+0x348>
 800310c:	2302      	movs	r3, #2
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e00a      	b.n	8003128 <UART_SetConfig+0x348>
 8003112:	2304      	movs	r3, #4
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e007      	b.n	8003128 <UART_SetConfig+0x348>
 8003118:	2308      	movs	r3, #8
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e004      	b.n	8003128 <UART_SetConfig+0x348>
 800311e:	2310      	movs	r3, #16
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e001      	b.n	8003128 <UART_SetConfig+0x348>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003130:	d15b      	bne.n	80031ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d828      	bhi.n	800318a <UART_SetConfig+0x3aa>
 8003138:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <UART_SetConfig+0x360>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003165 	.word	0x08003165
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003175 	.word	0x08003175
 800314c:	0800318b 	.word	0x0800318b
 8003150:	0800317b 	.word	0x0800317b
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7fe fe14 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003168:	61b8      	str	r0, [r7, #24]
        break;
 800316a:	e013      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7fe fe24 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e00f      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <UART_SetConfig+0x4c4>)
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e00c      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7fe fcf9 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 800317e:	61b8      	str	r0, [r7, #24]
        break;
 8003180:	e008      	b.n	8003194 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e004      	b.n	8003194 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	77bb      	strb	r3, [r7, #30]
        break;
 8003192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d074      	beq.n	8003284 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	005a      	lsls	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d916      	bls.n	80031e4 <UART_SetConfig+0x404>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d212      	bcs.n	80031e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	89fb      	ldrh	r3, [r7, #14]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	89fa      	ldrh	r2, [r7, #14]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e04f      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	77bb      	strb	r3, [r7, #30]
 80031e8:	e04c      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d828      	bhi.n	8003242 <UART_SetConfig+0x462>
 80031f0:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <UART_SetConfig+0x418>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	08003225 	.word	0x08003225
 8003200:	0800322d 	.word	0x0800322d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003233 	.word	0x08003233
 800320c:	08003243 	.word	0x08003243
 8003210:	08003243 	.word	0x08003243
 8003214:	08003243 	.word	0x08003243
 8003218:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe fdb8 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e013      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fdc8 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <UART_SetConfig+0x4c4>)
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e00c      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003232:	f7fe fc9d 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8003236:	61b8      	str	r0, [r7, #24]
        break;
 8003238:	e008      	b.n	800324c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800323a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e004      	b.n	800324c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77bb      	strb	r3, [r7, #30]
        break;
 800324a:	bf00      	nop
    }

    if (pclk != 0U)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085a      	lsrs	r2, r3, #1
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d909      	bls.n	8003280 <UART_SetConfig+0x4a0>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003272:	d205      	bcs.n	8003280 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e001      	b.n	8003284 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003290:	7fbb      	ldrb	r3, [r7, #30]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40007c00 	.word	0x40007c00
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033a6:	d10a      	bne.n	80033be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b098      	sub	sp, #96	@ 0x60
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033fc:	f7fd fd38 	bl	8000e70 <HAL_GetTick>
 8003400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d12e      	bne.n	800346e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f88c 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800344e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e062      	b.n	8003534 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d149      	bne.n	8003510 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f856 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d03c      	beq.n	8003510 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	623b      	str	r3, [r7, #32]
   return(result);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e6      	bne.n	8003496 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3308      	adds	r3, #8
 80034ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3308      	adds	r3, #8
 80034e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	617b      	str	r3, [r7, #20]
   return(result);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e5      	bne.n	80034c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e011      	b.n	8003534 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3758      	adds	r7, #88	@ 0x58
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	e04f      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d04b      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fd fc8b 	bl	8000e70 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <UART_WaitOnFlagUntilTimeout+0x30>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e04e      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d037      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	d034      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d031      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d110      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2208      	movs	r2, #8
 800359e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f838 	bl	8003616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2208      	movs	r2, #8
 80035aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e029      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c8:	d111      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f81e 	bl	8003616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d0a0      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003616:	b480      	push	{r7}
 8003618:	b095      	sub	sp, #84	@ 0x54
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800363c:	643b      	str	r3, [r7, #64]	@ 0x40
 800363e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e6      	bne.n	800361e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	2b01      	cmp	r3, #1
 800368a:	d118      	bne.n	80036be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	60bb      	str	r3, [r7, #8]
   return(result);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f023 0310 	bic.w	r3, r3, #16
 80036a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6979      	ldr	r1, [r7, #20]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	613b      	str	r3, [r7, #16]
   return(result);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e6      	bne.n	800368c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036d2:	bf00      	nop
 80036d4:	3754      	adds	r7, #84	@ 0x54
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f0:	2b84      	cmp	r3, #132	@ 0x84
 80036f2:	d005      	beq.n	8003700 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	3303      	adds	r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003712:	f000 faef 	bl	8003cf4 <vTaskStartScheduler>
  
  return osOK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}

0800371c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371e:	b089      	sub	sp, #36	@ 0x24
 8003720:	af04      	add	r7, sp, #16
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <osThreadCreate+0x54>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01c      	beq.n	8003770 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685c      	ldr	r4, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691e      	ldr	r6, [r3, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ffc8 	bl	80036de <makeFreeRtosPriority>
 800374e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003758:	9202      	str	r2, [sp, #8]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	9100      	str	r1, [sp, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	4632      	mov	r2, r6
 8003762:	4629      	mov	r1, r5
 8003764:	4620      	mov	r0, r4
 8003766:	f000 f8ed 	bl	8003944 <xTaskCreateStatic>
 800376a:	4603      	mov	r3, r0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e01c      	b.n	80037aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685c      	ldr	r4, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800377c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ffaa 	bl	80036de <makeFreeRtosPriority>
 800378a:	4602      	mov	r2, r0
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	9200      	str	r2, [sp, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4632      	mov	r2, r6
 8003798:	4629      	mov	r1, r5
 800379a:	4620      	mov	r0, r4
 800379c:	f000 f938 	bl	8003a10 <xTaskCreate>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d001      	beq.n	80037aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <osDelay+0x16>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	e000      	b.n	80037cc <osDelay+0x18>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fa59 	bl	8003c84 <vTaskDelay>
  
  return osOK;
 80037d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0208 	add.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 0208 	add.w	r2, r3, #8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 0208 	add.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d103      	bne.n	800389e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e00c      	b.n	80038b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3308      	adds	r3, #8
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e002      	b.n	80038ac <vListInsert+0x2e>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d2f6      	bcs.n	80038a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6852      	ldr	r2, [r2, #4]
 8003910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d103      	bne.n	8003924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	b672      	cpsid	i
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	b662      	cpsie	i
 800396c:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <xTaskCreateStatic+0x52>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	b672      	cpsid	i
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	b662      	cpsie	i
 800398e:	61fb      	str	r3, [r7, #28]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003996:	2354      	movs	r3, #84	@ 0x54
 8003998:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b54      	cmp	r3, #84	@ 0x54
 800399e:	d00d      	beq.n	80039bc <xTaskCreateStatic+0x78>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	b672      	cpsid	i
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	b662      	cpsie	i
 80039b4:	61bb      	str	r3, [r7, #24]
}
 80039b6:	bf00      	nop
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01e      	beq.n	8003a02 <xTaskCreateStatic+0xbe>
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01b      	beq.n	8003a02 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039dc:	2300      	movs	r3, #0
 80039de:	9303      	str	r3, [sp, #12]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f850 	bl	8003a9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039fc:	f000 f8d8 	bl	8003bb0 <prvAddNewTaskToReadyList>
 8003a00:	e001      	b.n	8003a06 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a06:	697b      	ldr	r3, [r7, #20]
	}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3728      	adds	r7, #40	@ 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	@ 0x30
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fec9 	bl	80047bc <pvPortMalloc>
 8003a2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a32:	2054      	movs	r0, #84	@ 0x54
 8003a34:	f000 fec2 	bl	80047bc <pvPortMalloc>
 8003a38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a46:	e005      	b.n	8003a54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f000 ff85 	bl	8004958 <vPortFree>
 8003a4e:	e001      	b.n	8003a54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	2300      	movs	r3, #0
 8003a66:	9303      	str	r3, [sp, #12]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f80e 	bl	8003a9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a7e:	69f8      	ldr	r0, [r7, #28]
 8003a80:	f000 f896 	bl	8003bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a84:	2301      	movs	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e002      	b.n	8003a90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a90:	69bb      	ldr	r3, [r7, #24]
	}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b088      	sub	sp, #32
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003ab2:	440b      	add	r3, r1
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	b672      	cpsid	i
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	b662      	cpsie	i
 8003ae0:	617b      	str	r3, [r7, #20]
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01f      	beq.n	8003b2e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e012      	b.n	8003b1a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	7819      	ldrb	r1, [r3, #0]
 8003afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	3334      	adds	r3, #52	@ 0x34
 8003b04:	460a      	mov	r2, r1
 8003b06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d006      	beq.n	8003b22 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d9e9      	bls.n	8003af4 <prvInitialiseNewTask+0x5a>
 8003b20:	e000      	b.n	8003b24 <prvInitialiseNewTask+0x8a>
			{
				break;
 8003b22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2c:	e003      	b.n	8003b36 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d901      	bls.n	8003b40 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	2200      	movs	r2, #0
 8003b50:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	3304      	adds	r3, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fe60 	bl	800381c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fe5b 	bl	800381c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	f1c3 0207 	rsb	r2, r3, #7
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	69b8      	ldr	r0, [r7, #24]
 8003b90:	f000 fc1c 	bl	80043cc <pxPortInitialiseStack>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bb8:	f000 fd18 	bl	80045ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a29      	ldr	r2, [pc, #164]	@ (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bc6:	4b29      	ldr	r3, [pc, #164]	@ (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bce:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd4:	4b24      	ldr	r3, [pc, #144]	@ (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d110      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bdc:	f000 fad0 	bl	8004180 <prvInitialiseTaskLists>
 8003be0:	e00d      	b.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003be2:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <prvAddNewTaskToReadyList+0xc0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bea:	4b20      	ldr	r3, [pc, #128]	@ (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	4a1b      	ldr	r2, [pc, #108]	@ (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003c06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7ff fe00 	bl	8003836 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c36:	f000 fd0f 	bl	8004658 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <prvAddNewTaskToReadyList+0xc0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d207      	bcs.n	8003c60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200006e8 	.word	0x200006e8
 8003c6c:	200005e8 	.word	0x200005e8
 8003c70:	200006f4 	.word	0x200006f4
 8003c74:	20000704 	.word	0x20000704
 8003c78:	200006f0 	.word	0x200006f0
 8003c7c:	200005ec 	.word	0x200005ec
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01a      	beq.n	8003ccc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <vTaskDelay+0x68>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <vTaskDelay+0x36>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	b672      	cpsid	i
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	b662      	cpsie	i
 8003cb2:	60bb      	str	r3, [r7, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003cba:	f000 f881 	bl	8003dc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fb1d 	bl	8004300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cc6:	f000 f889 	bl	8003ddc <xTaskResumeAll>
 8003cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <vTaskDelay+0x6c>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000710 	.word	0x20000710
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d02:	463a      	mov	r2, r7
 8003d04:	1d39      	adds	r1, r7, #4
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc7e 	bl	800060c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	9202      	str	r2, [sp, #8]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	460a      	mov	r2, r1
 8003d22:	4921      	ldr	r1, [pc, #132]	@ (8003da8 <vTaskStartScheduler+0xb4>)
 8003d24:	4821      	ldr	r0, [pc, #132]	@ (8003dac <vTaskStartScheduler+0xb8>)
 8003d26:	f7ff fe0d 	bl	8003944 <xTaskCreateStatic>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <vTaskStartScheduler+0xbc>)
 8003d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d30:	4b1f      	ldr	r3, [pc, #124]	@ (8003db0 <vTaskStartScheduler+0xbc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e001      	b.n	8003d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d118      	bne.n	8003d7a <vTaskStartScheduler+0x86>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	b662      	cpsie	i
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <vTaskStartScheduler+0xc0>)
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295
 8003d66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d68:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <vTaskStartScheduler+0xc4>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <vTaskStartScheduler+0xc8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d74:	f000 fbbc 	bl	80044f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d78:	e011      	b.n	8003d9e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d10d      	bne.n	8003d9e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	b672      	cpsid	i
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	b662      	cpsie	i
 8003d96:	60fb      	str	r3, [r7, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <vTaskStartScheduler+0xa6>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	08005540 	.word	0x08005540
 8003dac:	08004151 	.word	0x08004151
 8003db0:	2000070c 	.word	0x2000070c
 8003db4:	20000708 	.word	0x20000708
 8003db8:	200006f4 	.word	0x200006f4
 8003dbc:	200006ec 	.word	0x200006ec

08003dc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <vTaskSuspendAll+0x18>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4a03      	ldr	r2, [pc, #12]	@ (8003dd8 <vTaskSuspendAll+0x18>)
 8003dcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	20000710 	.word	0x20000710

08003ddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <xTaskResumeAll+0x11c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <xTaskResumeAll+0x32>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	b672      	cpsid	i
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	b662      	cpsie	i
 8003e06:	603b      	str	r3, [r7, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e0e:	f000 fbed 	bl	80045ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e12:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <xTaskResumeAll+0x11c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	4a37      	ldr	r2, [pc, #220]	@ (8003ef8 <xTaskResumeAll+0x11c>)
 8003e1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e1c:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <xTaskResumeAll+0x11c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d161      	bne.n	8003ee8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e24:	4b35      	ldr	r3, [pc, #212]	@ (8003efc <xTaskResumeAll+0x120>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05d      	beq.n	8003ee8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e2c:	e02e      	b.n	8003e8c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2e:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <xTaskResumeAll+0x124>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3318      	adds	r3, #24
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fd58 	bl	80038f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fd53 	bl	80038f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	2201      	movs	r2, #1
 8003e50:	409a      	lsls	r2, r3
 8003e52:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <xTaskResumeAll+0x128>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <xTaskResumeAll+0x128>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a27      	ldr	r2, [pc, #156]	@ (8003f08 <xTaskResumeAll+0x12c>)
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7ff fcdf 	bl	8003836 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7c:	4b23      	ldr	r3, [pc, #140]	@ (8003f0c <xTaskResumeAll+0x130>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <xTaskResumeAll+0x134>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <xTaskResumeAll+0x124>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1cc      	bne.n	8003e2e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e9a:	f000 fa11 	bl	80042c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <xTaskResumeAll+0x138>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eaa:	f000 f837 	bl	8003f1c <xTaskIncrementTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <xTaskResumeAll+0x134>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f1      	bne.n	8003eaa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	@ (8003f14 <xTaskResumeAll+0x138>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ecc:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <xTaskResumeAll+0x134>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f18 <xTaskResumeAll+0x13c>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee8:	f000 fbb6 	bl	8004658 <vPortExitCritical>

	return xAlreadyYielded;
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000710 	.word	0x20000710
 8003efc:	200006e8 	.word	0x200006e8
 8003f00:	200006a8 	.word	0x200006a8
 8003f04:	200006f0 	.word	0x200006f0
 8003f08:	200005ec 	.word	0x200005ec
 8003f0c:	200005e8 	.word	0x200005e8
 8003f10:	200006fc 	.word	0x200006fc
 8003f14:	200006f8 	.word	0x200006f8
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f26:	4b50      	ldr	r3, [pc, #320]	@ (8004068 <xTaskIncrementTick+0x14c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 808b 	bne.w	8004046 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f30:	4b4e      	ldr	r3, [pc, #312]	@ (800406c <xTaskIncrementTick+0x150>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f38:	4a4c      	ldr	r2, [pc, #304]	@ (800406c <xTaskIncrementTick+0x150>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d123      	bne.n	8003f8c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f44:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <xTaskIncrementTick+0x154>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <xTaskIncrementTick+0x4e>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	b672      	cpsid	i
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	b662      	cpsie	i
 8003f62:	603b      	str	r3, [r7, #0]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xTaskIncrementTick+0x4a>
 8003f6a:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <xTaskIncrementTick+0x154>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <xTaskIncrementTick+0x158>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3e      	ldr	r2, [pc, #248]	@ (8004070 <xTaskIncrementTick+0x154>)
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <xTaskIncrementTick+0x158>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004078 <xTaskIncrementTick+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a3c      	ldr	r2, [pc, #240]	@ (8004078 <xTaskIncrementTick+0x15c>)
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	f000 f99a 	bl	80042c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <xTaskIncrementTick+0x160>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d348      	bcc.n	8004028 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <xTaskIncrementTick+0x154>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <xTaskIncrementTick+0x160>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
					break;
 8003fa8:	e03e      	b.n	8004028 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <xTaskIncrementTick+0x154>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d203      	bcs.n	8003fca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800407c <xTaskIncrementTick+0x160>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fc8:	e02e      	b.n	8004028 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fc8e 	bl	80038f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fc85 	bl	80038f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	2201      	movs	r2, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <xTaskIncrementTick+0x164>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <xTaskIncrementTick+0x164>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4a1f      	ldr	r2, [pc, #124]	@ (8004084 <xTaskIncrementTick+0x168>)
 8004006:	441a      	add	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f7ff fc11 	bl	8003836 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <xTaskIncrementTick+0x16c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	429a      	cmp	r2, r3
 8004020:	d3b9      	bcc.n	8003f96 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004026:	e7b6      	b.n	8003f96 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <xTaskIncrementTick+0x16c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402e:	4915      	ldr	r1, [pc, #84]	@ (8004084 <xTaskIncrementTick+0x168>)
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d907      	bls.n	8004050 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e004      	b.n	8004050 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <xTaskIncrementTick+0x170>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	4a0f      	ldr	r2, [pc, #60]	@ (800408c <xTaskIncrementTick+0x170>)
 800404e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004050:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <xTaskIncrementTick+0x174>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800405c:	697b      	ldr	r3, [r7, #20]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000710 	.word	0x20000710
 800406c:	200006ec 	.word	0x200006ec
 8004070:	200006a0 	.word	0x200006a0
 8004074:	200006a4 	.word	0x200006a4
 8004078:	20000700 	.word	0x20000700
 800407c:	20000708 	.word	0x20000708
 8004080:	200006f0 	.word	0x200006f0
 8004084:	200005ec 	.word	0x200005ec
 8004088:	200005e8 	.word	0x200005e8
 800408c:	200006f8 	.word	0x200006f8
 8004090:	200006fc 	.word	0x200006fc

08004094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800409a:	4b28      	ldr	r3, [pc, #160]	@ (800413c <vTaskSwitchContext+0xa8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040a2:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <vTaskSwitchContext+0xac>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040a8:	e042      	b.n	8004130 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <vTaskSwitchContext+0xac>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <vTaskSwitchContext+0xb0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	f1c3 031f 	rsb	r3, r3, #31
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	4920      	ldr	r1, [pc, #128]	@ (8004148 <vTaskSwitchContext+0xb4>)
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <vTaskSwitchContext+0x62>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	b672      	cpsid	i
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	b662      	cpsie	i
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <vTaskSwitchContext+0x5e>
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <vTaskSwitchContext+0xb4>)
 8004102:	4413      	add	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3308      	adds	r3, #8
 8004118:	429a      	cmp	r2, r3
 800411a:	d104      	bne.n	8004126 <vTaskSwitchContext+0x92>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a07      	ldr	r2, [pc, #28]	@ (800414c <vTaskSwitchContext+0xb8>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000710 	.word	0x20000710
 8004140:	200006fc 	.word	0x200006fc
 8004144:	200006f0 	.word	0x200006f0
 8004148:	200005ec 	.word	0x200005ec
 800414c:	200005e8 	.word	0x200005e8

08004150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004158:	f000 f852 	bl	8004200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <prvIdleTask+0x28>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d9f9      	bls.n	8004158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <prvIdleTask+0x2c>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004174:	e7f0      	b.n	8004158 <prvIdleTask+0x8>
 8004176:	bf00      	nop
 8004178:	200005ec 	.word	0x200005ec
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	e00c      	b.n	80041a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <prvInitialiseTaskLists+0x60>)
 8004198:	4413      	add	r3, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fb1e 	bl	80037dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3301      	adds	r3, #1
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b06      	cmp	r3, #6
 80041aa:	d9ef      	bls.n	800418c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041ac:	480d      	ldr	r0, [pc, #52]	@ (80041e4 <prvInitialiseTaskLists+0x64>)
 80041ae:	f7ff fb15 	bl	80037dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041b2:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <prvInitialiseTaskLists+0x68>)
 80041b4:	f7ff fb12 	bl	80037dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041b8:	480c      	ldr	r0, [pc, #48]	@ (80041ec <prvInitialiseTaskLists+0x6c>)
 80041ba:	f7ff fb0f 	bl	80037dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041be:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <prvInitialiseTaskLists+0x70>)
 80041c0:	f7ff fb0c 	bl	80037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041c4:	480b      	ldr	r0, [pc, #44]	@ (80041f4 <prvInitialiseTaskLists+0x74>)
 80041c6:	f7ff fb09 	bl	80037dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <prvInitialiseTaskLists+0x78>)
 80041cc:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <prvInitialiseTaskLists+0x64>)
 80041ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <prvInitialiseTaskLists+0x7c>)
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <prvInitialiseTaskLists+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200005ec 	.word	0x200005ec
 80041e4:	20000678 	.word	0x20000678
 80041e8:	2000068c 	.word	0x2000068c
 80041ec:	200006a8 	.word	0x200006a8
 80041f0:	200006bc 	.word	0x200006bc
 80041f4:	200006d4 	.word	0x200006d4
 80041f8:	200006a0 	.word	0x200006a0
 80041fc:	200006a4 	.word	0x200006a4

08004200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004206:	e019      	b.n	800423c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004208:	f000 f9f0 	bl	80045ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <prvCheckTasksWaitingTermination+0x50>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fb69 	bl	80038f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <prvCheckTasksWaitingTermination+0x54>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3b01      	subs	r3, #1
 8004224:	4a0b      	ldr	r2, [pc, #44]	@ (8004254 <prvCheckTasksWaitingTermination+0x54>)
 8004226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 8004230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004232:	f000 fa11 	bl	8004658 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f810 	bl	800425c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <prvCheckTasksWaitingTermination+0x58>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e1      	bne.n	8004208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200006bc 	.word	0x200006bc
 8004254:	200006e8 	.word	0x200006e8
 8004258:	200006d0 	.word	0x200006d0

0800425c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb70 	bl	8004958 <vPortFree>
				vPortFree( pxTCB );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fb6d 	bl	8004958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800427e:	e01b      	b.n	80042b8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004286:	2b01      	cmp	r3, #1
 8004288:	d103      	bne.n	8004292 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb64 	bl	8004958 <vPortFree>
	}
 8004290:	e012      	b.n	80042b8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004298:	2b02      	cmp	r3, #2
 800429a:	d00d      	beq.n	80042b8 <prvDeleteTCB+0x5c>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a0:	b672      	cpsid	i
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	b662      	cpsie	i
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <prvDeleteTCB+0x58>
	}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	@ (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d8:	e008      	b.n	80042ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	200006a0 	.word	0x200006a0
 80042fc:	20000708 	.word	0x20000708

08004300 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800430a:	4b29      	ldr	r3, [pc, #164]	@ (80043b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004310:	4b28      	ldr	r3, [pc, #160]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff faea 	bl	80038f0 <uxListRemove>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004322:	4b24      	ldr	r3, [pc, #144]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	2201      	movs	r2, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	4a20      	ldr	r2, [pc, #128]	@ (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004338:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d10a      	bne.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	481a      	ldr	r0, [pc, #104]	@ (80043bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004352:	f7ff fa70 	bl	8003836 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004356:	e026      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004360:	4b14      	ldr	r3, [pc, #80]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d209      	bcs.n	8004384 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0f      	ldr	r3, [pc, #60]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7ff fa7e 	bl	800387e <vListInsert>
}
 8004382:	e010      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b0f      	ldr	r3, [pc, #60]	@ (80043c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7ff fa74 	bl	800387e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004396:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d202      	bcs.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043a0:	4a09      	ldr	r2, [pc, #36]	@ (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200006ec 	.word	0x200006ec
 80043b4:	200005e8 	.word	0x200005e8
 80043b8:	200006f0 	.word	0x200006f0
 80043bc:	200006d4 	.word	0x200006d4
 80043c0:	200006a4 	.word	0x200006a4
 80043c4:	200006a0 	.word	0x200006a0
 80043c8:	20000708 	.word	0x20000708

080043cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b04      	subs	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <pxPortInitialiseStack+0x64>)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b14      	subs	r3, #20
 8004406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b04      	subs	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f06f 0202 	mvn.w	r2, #2
 800441a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3b20      	subs	r3, #32
 8004420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004422:	68fb      	ldr	r3, [r7, #12]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	08004435 	.word	0x08004435

08004434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <prvTaskExitError+0x60>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d00d      	beq.n	8004464 <prvTaskExitError+0x30>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	b672      	cpsid	i
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	b662      	cpsie	i
 800445c:	60fb      	str	r3, [r7, #12]
}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	e7fd      	b.n	8004460 <prvTaskExitError+0x2c>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	b672      	cpsid	i
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	b662      	cpsie	i
 8004478:	60bb      	str	r3, [r7, #8]
}
 800447a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800447c:	bf00      	nop
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0fc      	beq.n	800447e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c
	...

080044a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044a0:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <pxCurrentTCBConst2>)
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	6808      	ldr	r0, [r1, #0]
 80044a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	f380 8809 	msr	PSP, r0
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	4770      	bx	lr
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst2>:
 80044c0:	200005e8 	.word	0x200005e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044c8:	4808      	ldr	r0, [pc, #32]	@ (80044ec <prvPortStartFirstTask+0x24>)
 80044ca:	6800      	ldr	r0, [r0, #0]
 80044cc:	6800      	ldr	r0, [r0, #0]
 80044ce:	f380 8808 	msr	MSP, r0
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8814 	msr	CONTROL, r0
 80044da:	b662      	cpsie	i
 80044dc:	b661      	cpsie	f
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	df00      	svc	0
 80044e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ea:	bf00      	nop
 80044ec:	e000ed08 	.word	0xe000ed08

080044f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044f6:	4b37      	ldr	r3, [pc, #220]	@ (80045d4 <xPortStartScheduler+0xe4>)
 80044f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <xPortStartScheduler+0xe8>)
 800451c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800451e:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <xPortStartScheduler+0xec>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004524:	e009      	b.n	800453a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004526:	4b2d      	ldr	r3, [pc, #180]	@ (80045dc <xPortStartScheduler+0xec>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a2b      	ldr	r2, [pc, #172]	@ (80045dc <xPortStartScheduler+0xec>)
 800452e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b80      	cmp	r3, #128	@ 0x80
 8004544:	d0ef      	beq.n	8004526 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004546:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <xPortStartScheduler+0xec>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00d      	beq.n	800456e <xPortStartScheduler+0x7e>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	b672      	cpsid	i
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	b662      	cpsie	i
 8004566:	60bb      	str	r3, [r7, #8]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800456e:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <xPortStartScheduler+0xec>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <xPortStartScheduler+0xec>)
 8004576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004578:	4b18      	ldr	r3, [pc, #96]	@ (80045dc <xPortStartScheduler+0xec>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004580:	4a16      	ldr	r2, [pc, #88]	@ (80045dc <xPortStartScheduler+0xec>)
 8004582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <xPortStartScheduler+0xf0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <xPortStartScheduler+0xf0>)
 8004592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004598:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <xPortStartScheduler+0xf0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a10      	ldr	r2, [pc, #64]	@ (80045e0 <xPortStartScheduler+0xf0>)
 800459e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80045a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045a4:	f000 f8dc 	bl	8004760 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <xPortStartScheduler+0xf4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045ae:	f000 f8fb 	bl	80047a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b2:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <xPortStartScheduler+0xf8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	@ (80045e8 <xPortStartScheduler+0xf8>)
 80045b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045be:	f7ff ff83 	bl	80044c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045c2:	f7ff fd67 	bl	8004094 <vTaskSwitchContext>
	prvTaskExitError();
 80045c6:	f7ff ff35 	bl	8004434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	e000e400 	.word	0xe000e400
 80045d8:	20000714 	.word	0x20000714
 80045dc:	20000718 	.word	0x20000718
 80045e0:	e000ed20 	.word	0xe000ed20
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	e000ef34 	.word	0xe000ef34

080045ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	b672      	cpsid	i
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	b662      	cpsie	i
 8004606:	607b      	str	r3, [r7, #4]
}
 8004608:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800460a:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <vPortEnterCritical+0x64>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	4a0f      	ldr	r2, [pc, #60]	@ (8004650 <vPortEnterCritical+0x64>)
 8004612:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <vPortEnterCritical+0x64>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d112      	bne.n	8004642 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800461c:	4b0d      	ldr	r3, [pc, #52]	@ (8004654 <vPortEnterCritical+0x68>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <vPortEnterCritical+0x56>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	b672      	cpsid	i
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	b662      	cpsie	i
 800463a:	603b      	str	r3, [r7, #0]
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	e7fd      	b.n	800463e <vPortEnterCritical+0x52>
	}
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	2000000c 	.word	0x2000000c
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800465e:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <vPortExitCritical+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <vPortExitCritical+0x2a>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	b672      	cpsid	i
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	b662      	cpsie	i
 800467a:	607b      	str	r3, [r7, #4]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <vPortExitCritical+0x54>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3b01      	subs	r3, #1
 8004688:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <vPortExitCritical+0x54>)
 800468a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800468c:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <vPortExitCritical+0x54>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <vPortExitCritical+0x48>
 8004694:	2300      	movs	r3, #0
 8004696:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800469e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c

080046b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046b0:	f3ef 8009 	mrs	r0, PSP
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <pxCurrentTCBConst>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f01e 0f10 	tst.w	lr, #16
 80046c0:	bf08      	it	eq
 80046c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046d4:	b672      	cpsid	i
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	b662      	cpsie	i
 80046e4:	f7ff fcd6 	bl	8004094 <vTaskSwitchContext>
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f380 8811 	msr	BASEPRI, r0
 80046f0:	bc09      	pop	{r0, r3}
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f01e 0f10 	tst.w	lr, #16
 80046fe:	bf08      	it	eq
 8004700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004704:	f380 8809 	msr	PSP, r0
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <pxCurrentTCBConst>:
 8004710:	200005e8 	.word	0x200005e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	b672      	cpsid	i
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	b662      	cpsie	i
 8004732:	607b      	str	r3, [r7, #4]
}
 8004734:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004736:	f7ff fbf1 	bl	8003f1c <xTaskIncrementTick>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <SysTick_Handler+0x44>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	2300      	movs	r3, #0
 800474a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f383 8811 	msr	BASEPRI, r3
}
 8004752:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <vPortSetupTimerInterrupt+0x34>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <vPortSetupTimerInterrupt+0x38>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004770:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <vPortSetupTimerInterrupt+0x3c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0a      	ldr	r2, [pc, #40]	@ (80047a0 <vPortSetupTimerInterrupt+0x40>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <vPortSetupTimerInterrupt+0x44>)
 800477e:	3b01      	subs	r3, #1
 8004780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <vPortSetupTimerInterrupt+0x34>)
 8004784:	2207      	movs	r2, #7
 8004786:	601a      	str	r2, [r3, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	e000e010 	.word	0xe000e010
 8004798:	e000e018 	.word	0xe000e018
 800479c:	20000000 	.word	0x20000000
 80047a0:	10624dd3 	.word	0x10624dd3
 80047a4:	e000e014 	.word	0xe000e014

080047a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80047b8 <vPortEnableVFP+0x10>
 80047ac:	6801      	ldr	r1, [r0, #0]
 80047ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047b2:	6001      	str	r1, [r0, #0]
 80047b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047b6:	bf00      	nop
 80047b8:	e000ed88 	.word	0xe000ed88

080047bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047c8:	f7ff fafa 	bl	8003dc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004944 <pvPortMalloc+0x188>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047d4:	f000 f920 	bl	8004a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004948 <pvPortMalloc+0x18c>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8094 	bne.w	800490e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80047ec:	2208      	movs	r2, #8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d017      	beq.n	800482e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	3308      	adds	r3, #8
 8004806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <pvPortMalloc+0x72>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	b672      	cpsid	i
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	b662      	cpsie	i
 8004826:	617b      	str	r3, [r7, #20]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d06c      	beq.n	800490e <pvPortMalloc+0x152>
 8004834:	4b45      	ldr	r3, [pc, #276]	@ (800494c <pvPortMalloc+0x190>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d867      	bhi.n	800490e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800483e:	4b44      	ldr	r3, [pc, #272]	@ (8004950 <pvPortMalloc+0x194>)
 8004840:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004842:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <pvPortMalloc+0x194>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004848:	e004      	b.n	8004854 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <pvPortMalloc+0xaa>
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f1      	bne.n	800484a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004866:	4b37      	ldr	r3, [pc, #220]	@ (8004944 <pvPortMalloc+0x188>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	429a      	cmp	r2, r3
 800486e:	d04e      	beq.n	800490e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2208      	movs	r2, #8
 8004876:	4413      	add	r3, r2
 8004878:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	2308      	movs	r3, #8
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	429a      	cmp	r2, r3
 8004890:	d922      	bls.n	80048d8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <pvPortMalloc+0x104>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	b672      	cpsid	i
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	b662      	cpsie	i
 80048b8:	613b      	str	r3, [r7, #16]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d2:	69b8      	ldr	r0, [r7, #24]
 80048d4:	f000 f902 	bl	8004adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <pvPortMalloc+0x190>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <pvPortMalloc+0x190>)
 80048e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048e6:	4b19      	ldr	r3, [pc, #100]	@ (800494c <pvPortMalloc+0x190>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004954 <pvPortMalloc+0x198>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d203      	bcs.n	80048fa <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f2:	4b16      	ldr	r3, [pc, #88]	@ (800494c <pvPortMalloc+0x190>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <pvPortMalloc+0x198>)
 80048f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <pvPortMalloc+0x18c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	431a      	orrs	r2, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800490e:	f7ff fa65 	bl	8003ddc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <pvPortMalloc+0x17c>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	b672      	cpsid	i
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	b662      	cpsie	i
 8004930:	60fb      	str	r3, [r7, #12]
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <pvPortMalloc+0x178>
	return pvReturn;
 8004938:	69fb      	ldr	r3, [r7, #28]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	@ 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20004324 	.word	0x20004324
 8004948:	20004330 	.word	0x20004330
 800494c:	20004328 	.word	0x20004328
 8004950:	2000431c 	.word	0x2000431c
 8004954:	2000432c 	.word	0x2000432c

08004958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04e      	beq.n	8004a08 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800496a:	2308      	movs	r3, #8
 800496c:	425b      	negs	r3, r3
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <vPortFree+0xb8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10d      	bne.n	80049a2 <vPortFree+0x4a>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	b672      	cpsid	i
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	b662      	cpsie	i
 800499a:	60fb      	str	r3, [r7, #12]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <vPortFree+0x6e>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	b672      	cpsid	i
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	b662      	cpsie	i
 80049be:	60bb      	str	r3, [r7, #8]
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	e7fd      	b.n	80049c2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <vPortFree+0xb8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d115      	bne.n	8004a08 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <vPortFree+0xb8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049ec:	f7ff f9e8 	bl	8003dc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <vPortFree+0xbc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4413      	add	r3, r2
 80049fa:	4a06      	ldr	r2, [pc, #24]	@ (8004a14 <vPortFree+0xbc>)
 80049fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049fe:	6938      	ldr	r0, [r7, #16]
 8004a00:	f000 f86c 	bl	8004adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a04:	f7ff f9ea 	bl	8003ddc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20004330 	.word	0x20004330
 8004a14:	20004328 	.word	0x20004328

08004a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a1e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <prvHeapInit+0xac>)
 8004a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3307      	adds	r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <prvHeapInit+0xac>)
 8004a48:	4413      	add	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <prvHeapInit+0xb0>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac8 <prvHeapInit+0xb0>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a64:	2208      	movs	r2, #8
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0307 	bic.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <prvHeapInit+0xb4>)
 8004a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <prvHeapInit+0xb4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a82:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <prvHeapInit+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	1ad2      	subs	r2, r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <prvHeapInit+0xb4>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad0 <prvHeapInit+0xb8>)
 8004aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <prvHeapInit+0xbc>)
 8004aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ab0:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <prvHeapInit+0xc0>)
 8004ab2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	2000071c 	.word	0x2000071c
 8004ac8:	2000431c 	.word	0x2000431c
 8004acc:	20004324 	.word	0x20004324
 8004ad0:	2000432c 	.word	0x2000432c
 8004ad4:	20004328 	.word	0x20004328
 8004ad8:	20004330 	.word	0x20004330

08004adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ae4:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <prvInsertBlockIntoFreeList+0xac>)
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e002      	b.n	8004af0 <prvInsertBlockIntoFreeList+0x14>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d8f7      	bhi.n	8004aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4413      	add	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d108      	bne.n	8004b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	441a      	add	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d118      	bne.n	8004b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <prvInsertBlockIntoFreeList+0xb0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d00d      	beq.n	8004b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e008      	b.n	8004b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <prvInsertBlockIntoFreeList+0xb0>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e003      	b.n	8004b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d002      	beq.n	8004b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	2000431c 	.word	0x2000431c
 8004b8c:	20004324 	.word	0x20004324

08004b90 <siprintf>:
 8004b90:	b40e      	push	{r1, r2, r3}
 8004b92:	b510      	push	{r4, lr}
 8004b94:	b09d      	sub	sp, #116	@ 0x74
 8004b96:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004b98:	9002      	str	r0, [sp, #8]
 8004b9a:	9006      	str	r0, [sp, #24]
 8004b9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ba0:	480a      	ldr	r0, [pc, #40]	@ (8004bcc <siprintf+0x3c>)
 8004ba2:	9107      	str	r1, [sp, #28]
 8004ba4:	9104      	str	r1, [sp, #16]
 8004ba6:	490a      	ldr	r1, [pc, #40]	@ (8004bd0 <siprintf+0x40>)
 8004ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bac:	9105      	str	r1, [sp, #20]
 8004bae:	2400      	movs	r4, #0
 8004bb0:	a902      	add	r1, sp, #8
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004bb8:	f000 f9a2 	bl	8004f00 <_svfiprintf_r>
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	701c      	strb	r4, [r3, #0]
 8004bc0:	b01d      	add	sp, #116	@ 0x74
 8004bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc6:	b003      	add	sp, #12
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000010 	.word	0x20000010
 8004bd0:	ffff0208 	.word	0xffff0208

08004bd4 <memset>:
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d100      	bne.n	8004bde <memset+0xa>
 8004bdc:	4770      	bx	lr
 8004bde:	f803 1b01 	strb.w	r1, [r3], #1
 8004be2:	e7f9      	b.n	8004bd8 <memset+0x4>

08004be4 <__errno>:
 8004be4:	4b01      	ldr	r3, [pc, #4]	@ (8004bec <__errno+0x8>)
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000010 	.word	0x20000010

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 fc64 	bl	80054d0 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	0800559c 	.word	0x0800559c
 8004c2c:	0800559c 	.word	0x0800559c
 8004c30:	0800559c 	.word	0x0800559c
 8004c34:	080055a0 	.word	0x080055a0

08004c38 <__retarget_lock_acquire_recursive>:
 8004c38:	4770      	bx	lr

08004c3a <__retarget_lock_release_recursive>:
 8004c3a:	4770      	bx	lr

08004c3c <memcpy>:
 8004c3c:	440a      	add	r2, r1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c44:	d100      	bne.n	8004c48 <memcpy+0xc>
 8004c46:	4770      	bx	lr
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c52:	4291      	cmp	r1, r2
 8004c54:	d1f9      	bne.n	8004c4a <memcpy+0xe>
 8004c56:	bd10      	pop	{r4, pc}

08004c58 <_free_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	d041      	beq.n	8004ce4 <_free_r+0x8c>
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f0c      	subs	r4, r1, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfb8      	it	lt
 8004c6a:	18e4      	addlt	r4, r4, r3
 8004c6c:	f000 f8e0 	bl	8004e30 <__malloc_lock>
 8004c70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <_free_r+0x90>)
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	b933      	cbnz	r3, 8004c84 <_free_r+0x2c>
 8004c76:	6063      	str	r3, [r4, #4]
 8004c78:	6014      	str	r4, [r2, #0]
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c80:	f000 b8dc 	b.w	8004e3c <__malloc_unlock>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d908      	bls.n	8004c9a <_free_r+0x42>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	1821      	adds	r1, r4, r0
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	bf01      	itttt	eq
 8004c90:	6819      	ldreq	r1, [r3, #0]
 8004c92:	685b      	ldreq	r3, [r3, #4]
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	e7ed      	b.n	8004c76 <_free_r+0x1e>
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b10b      	cbz	r3, 8004ca4 <_free_r+0x4c>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d9fa      	bls.n	8004c9a <_free_r+0x42>
 8004ca4:	6811      	ldr	r1, [r2, #0]
 8004ca6:	1850      	adds	r0, r2, r1
 8004ca8:	42a0      	cmp	r0, r4
 8004caa:	d10b      	bne.n	8004cc4 <_free_r+0x6c>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	4401      	add	r1, r0
 8004cb0:	1850      	adds	r0, r2, r1
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	6011      	str	r1, [r2, #0]
 8004cb6:	d1e0      	bne.n	8004c7a <_free_r+0x22>
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	6053      	str	r3, [r2, #4]
 8004cbe:	4408      	add	r0, r1
 8004cc0:	6010      	str	r0, [r2, #0]
 8004cc2:	e7da      	b.n	8004c7a <_free_r+0x22>
 8004cc4:	d902      	bls.n	8004ccc <_free_r+0x74>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	e7d6      	b.n	8004c7a <_free_r+0x22>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	1821      	adds	r1, r4, r0
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	bf04      	itt	eq
 8004cd4:	6819      	ldreq	r1, [r3, #0]
 8004cd6:	685b      	ldreq	r3, [r3, #4]
 8004cd8:	6063      	str	r3, [r4, #4]
 8004cda:	bf04      	itt	eq
 8004cdc:	1809      	addeq	r1, r1, r0
 8004cde:	6021      	streq	r1, [r4, #0]
 8004ce0:	6054      	str	r4, [r2, #4]
 8004ce2:	e7ca      	b.n	8004c7a <_free_r+0x22>
 8004ce4:	bd38      	pop	{r3, r4, r5, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20004478 	.word	0x20004478

08004cec <sbrk_aligned>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4e0f      	ldr	r6, [pc, #60]	@ (8004d2c <sbrk_aligned+0x40>)
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	6831      	ldr	r1, [r6, #0]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	b911      	cbnz	r1, 8004cfe <sbrk_aligned+0x12>
 8004cf8:	f000 fba4 	bl	8005444 <_sbrk_r>
 8004cfc:	6030      	str	r0, [r6, #0]
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 fb9f 	bl	8005444 <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d103      	bne.n	8004d12 <sbrk_aligned+0x26>
 8004d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d0e:	4620      	mov	r0, r4
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
 8004d12:	1cc4      	adds	r4, r0, #3
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d0f8      	beq.n	8004d0e <sbrk_aligned+0x22>
 8004d1c:	1a21      	subs	r1, r4, r0
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fb90 	bl	8005444 <_sbrk_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d1f2      	bne.n	8004d0e <sbrk_aligned+0x22>
 8004d28:	e7ef      	b.n	8004d0a <sbrk_aligned+0x1e>
 8004d2a:	bf00      	nop
 8004d2c:	20004474 	.word	0x20004474

08004d30 <_malloc_r>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	1ccd      	adds	r5, r1, #3
 8004d36:	f025 0503 	bic.w	r5, r5, #3
 8004d3a:	3508      	adds	r5, #8
 8004d3c:	2d0c      	cmp	r5, #12
 8004d3e:	bf38      	it	cc
 8004d40:	250c      	movcc	r5, #12
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	4606      	mov	r6, r0
 8004d46:	db01      	blt.n	8004d4c <_malloc_r+0x1c>
 8004d48:	42a9      	cmp	r1, r5
 8004d4a:	d904      	bls.n	8004d56 <_malloc_r+0x26>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	6033      	str	r3, [r6, #0]
 8004d50:	2000      	movs	r0, #0
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e2c <_malloc_r+0xfc>
 8004d5a:	f000 f869 	bl	8004e30 <__malloc_lock>
 8004d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d62:	461c      	mov	r4, r3
 8004d64:	bb44      	cbnz	r4, 8004db8 <_malloc_r+0x88>
 8004d66:	4629      	mov	r1, r5
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f7ff ffbf 	bl	8004cec <sbrk_aligned>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	4604      	mov	r4, r0
 8004d72:	d158      	bne.n	8004e26 <_malloc_r+0xf6>
 8004d74:	f8d8 4000 	ldr.w	r4, [r8]
 8004d78:	4627      	mov	r7, r4
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d143      	bne.n	8004e06 <_malloc_r+0xd6>
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d04b      	beq.n	8004e1a <_malloc_r+0xea>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	eb04 0903 	add.w	r9, r4, r3
 8004d8c:	f000 fb5a 	bl	8005444 <_sbrk_r>
 8004d90:	4581      	cmp	r9, r0
 8004d92:	d142      	bne.n	8004e1a <_malloc_r+0xea>
 8004d94:	6821      	ldr	r1, [r4, #0]
 8004d96:	1a6d      	subs	r5, r5, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffa6 	bl	8004cec <sbrk_aligned>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d03a      	beq.n	8004e1a <_malloc_r+0xea>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	442b      	add	r3, r5
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	bb62      	cbnz	r2, 8004e0c <_malloc_r+0xdc>
 8004db2:	f8c8 7000 	str.w	r7, [r8]
 8004db6:	e00f      	b.n	8004dd8 <_malloc_r+0xa8>
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	1b52      	subs	r2, r2, r5
 8004dbc:	d420      	bmi.n	8004e00 <_malloc_r+0xd0>
 8004dbe:	2a0b      	cmp	r2, #11
 8004dc0:	d917      	bls.n	8004df2 <_malloc_r+0xc2>
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	6025      	str	r5, [r4, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	6059      	strne	r1, [r3, #4]
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	bf08      	it	eq
 8004dd0:	f8c8 1000 	streq.w	r1, [r8]
 8004dd4:	5162      	str	r2, [r4, r5]
 8004dd6:	604b      	str	r3, [r1, #4]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f82f 	bl	8004e3c <__malloc_unlock>
 8004dde:	f104 000b 	add.w	r0, r4, #11
 8004de2:	1d23      	adds	r3, r4, #4
 8004de4:	f020 0007 	bic.w	r0, r0, #7
 8004de8:	1ac2      	subs	r2, r0, r3
 8004dea:	bf1c      	itt	ne
 8004dec:	1a1b      	subne	r3, r3, r0
 8004dee:	50a3      	strne	r3, [r4, r2]
 8004df0:	e7af      	b.n	8004d52 <_malloc_r+0x22>
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	bf0c      	ite	eq
 8004df8:	f8c8 2000 	streq.w	r2, [r8]
 8004dfc:	605a      	strne	r2, [r3, #4]
 8004dfe:	e7eb      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e00:	4623      	mov	r3, r4
 8004e02:	6864      	ldr	r4, [r4, #4]
 8004e04:	e7ae      	b.n	8004d64 <_malloc_r+0x34>
 8004e06:	463c      	mov	r4, r7
 8004e08:	687f      	ldr	r7, [r7, #4]
 8004e0a:	e7b6      	b.n	8004d7a <_malloc_r+0x4a>
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d1fb      	bne.n	8004e0c <_malloc_r+0xdc>
 8004e14:	2300      	movs	r3, #0
 8004e16:	6053      	str	r3, [r2, #4]
 8004e18:	e7de      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f80c 	bl	8004e3c <__malloc_unlock>
 8004e24:	e794      	b.n	8004d50 <_malloc_r+0x20>
 8004e26:	6005      	str	r5, [r0, #0]
 8004e28:	e7d6      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e2a:	bf00      	nop
 8004e2c:	20004478 	.word	0x20004478

08004e30 <__malloc_lock>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__malloc_lock+0x8>)
 8004e32:	f7ff bf01 	b.w	8004c38 <__retarget_lock_acquire_recursive>
 8004e36:	bf00      	nop
 8004e38:	20004470 	.word	0x20004470

08004e3c <__malloc_unlock>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__malloc_unlock+0x8>)
 8004e3e:	f7ff befc 	b.w	8004c3a <__retarget_lock_release_recursive>
 8004e42:	bf00      	nop
 8004e44:	20004470 	.word	0x20004470

08004e48 <__ssputs_r>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	688e      	ldr	r6, [r1, #8]
 8004e4e:	461f      	mov	r7, r3
 8004e50:	42be      	cmp	r6, r7
 8004e52:	680b      	ldr	r3, [r1, #0]
 8004e54:	4682      	mov	sl, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	4690      	mov	r8, r2
 8004e5a:	d82d      	bhi.n	8004eb8 <__ssputs_r+0x70>
 8004e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e64:	d026      	beq.n	8004eb4 <__ssputs_r+0x6c>
 8004e66:	6965      	ldr	r5, [r4, #20]
 8004e68:	6909      	ldr	r1, [r1, #16]
 8004e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e6e:	eba3 0901 	sub.w	r9, r3, r1
 8004e72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e76:	1c7b      	adds	r3, r7, #1
 8004e78:	444b      	add	r3, r9
 8004e7a:	106d      	asrs	r5, r5, #1
 8004e7c:	429d      	cmp	r5, r3
 8004e7e:	bf38      	it	cc
 8004e80:	461d      	movcc	r5, r3
 8004e82:	0553      	lsls	r3, r2, #21
 8004e84:	d527      	bpl.n	8004ed6 <__ssputs_r+0x8e>
 8004e86:	4629      	mov	r1, r5
 8004e88:	f7ff ff52 	bl	8004d30 <_malloc_r>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	b360      	cbz	r0, 8004eea <__ssputs_r+0xa2>
 8004e90:	6921      	ldr	r1, [r4, #16]
 8004e92:	464a      	mov	r2, r9
 8004e94:	f7ff fed2 	bl	8004c3c <memcpy>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	6126      	str	r6, [r4, #16]
 8004ea6:	6165      	str	r5, [r4, #20]
 8004ea8:	444e      	add	r6, r9
 8004eaa:	eba5 0509 	sub.w	r5, r5, r9
 8004eae:	6026      	str	r6, [r4, #0]
 8004eb0:	60a5      	str	r5, [r4, #8]
 8004eb2:	463e      	mov	r6, r7
 8004eb4:	42be      	cmp	r6, r7
 8004eb6:	d900      	bls.n	8004eba <__ssputs_r+0x72>
 8004eb8:	463e      	mov	r6, r7
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	f000 faa6 	bl	8005410 <memmove>
 8004ec4:	68a3      	ldr	r3, [r4, #8]
 8004ec6:	1b9b      	subs	r3, r3, r6
 8004ec8:	60a3      	str	r3, [r4, #8]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4433      	add	r3, r6
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	f000 fac4 	bl	8005464 <_realloc_r>
 8004edc:	4606      	mov	r6, r0
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d1e0      	bne.n	8004ea4 <__ssputs_r+0x5c>
 8004ee2:	6921      	ldr	r1, [r4, #16]
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	f7ff feb7 	bl	8004c58 <_free_r>
 8004eea:	230c      	movs	r3, #12
 8004eec:	f8ca 3000 	str.w	r3, [sl]
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e7e9      	b.n	8004ed2 <__ssputs_r+0x8a>
	...

08004f00 <_svfiprintf_r>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	4698      	mov	r8, r3
 8004f06:	898b      	ldrh	r3, [r1, #12]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	b09d      	sub	sp, #116	@ 0x74
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	d510      	bpl.n	8004f36 <_svfiprintf_r+0x36>
 8004f14:	690b      	ldr	r3, [r1, #16]
 8004f16:	b973      	cbnz	r3, 8004f36 <_svfiprintf_r+0x36>
 8004f18:	2140      	movs	r1, #64	@ 0x40
 8004f1a:	f7ff ff09 	bl	8004d30 <_malloc_r>
 8004f1e:	6028      	str	r0, [r5, #0]
 8004f20:	6128      	str	r0, [r5, #16]
 8004f22:	b930      	cbnz	r0, 8004f32 <_svfiprintf_r+0x32>
 8004f24:	230c      	movs	r3, #12
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	b01d      	add	sp, #116	@ 0x74
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	2340      	movs	r3, #64	@ 0x40
 8004f34:	616b      	str	r3, [r5, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f44:	2330      	movs	r3, #48	@ 0x30
 8004f46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050e4 <_svfiprintf_r+0x1e4>
 8004f4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f4e:	f04f 0901 	mov.w	r9, #1
 8004f52:	4623      	mov	r3, r4
 8004f54:	469a      	mov	sl, r3
 8004f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5a:	b10a      	cbz	r2, 8004f60 <_svfiprintf_r+0x60>
 8004f5c:	2a25      	cmp	r2, #37	@ 0x25
 8004f5e:	d1f9      	bne.n	8004f54 <_svfiprintf_r+0x54>
 8004f60:	ebba 0b04 	subs.w	fp, sl, r4
 8004f64:	d00b      	beq.n	8004f7e <_svfiprintf_r+0x7e>
 8004f66:	465b      	mov	r3, fp
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff ff6b 	bl	8004e48 <__ssputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80a7 	beq.w	80050c6 <_svfiprintf_r+0x1c6>
 8004f78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f7a:	445a      	add	r2, fp
 8004f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 809f 	beq.w	80050c6 <_svfiprintf_r+0x1c6>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f92:	f10a 0a01 	add.w	sl, sl, #1
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	9307      	str	r3, [sp, #28]
 8004f9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	484e      	ldr	r0, [pc, #312]	@ (80050e4 <_svfiprintf_r+0x1e4>)
 8004faa:	f7fb f949 	bl	8000240 <memchr>
 8004fae:	9a04      	ldr	r2, [sp, #16]
 8004fb0:	b9d8      	cbnz	r0, 8004fea <_svfiprintf_r+0xea>
 8004fb2:	06d0      	lsls	r0, r2, #27
 8004fb4:	bf44      	itt	mi
 8004fb6:	2320      	movmi	r3, #32
 8004fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fbc:	0711      	lsls	r1, r2, #28
 8004fbe:	bf44      	itt	mi
 8004fc0:	232b      	movmi	r3, #43	@ 0x2b
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fcc:	d015      	beq.n	8004ffa <_svfiprintf_r+0xfa>
 8004fce:	9a07      	ldr	r2, [sp, #28]
 8004fd0:	4654      	mov	r4, sl
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f04f 0c0a 	mov.w	ip, #10
 8004fd8:	4621      	mov	r1, r4
 8004fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fde:	3b30      	subs	r3, #48	@ 0x30
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	d94b      	bls.n	800507c <_svfiprintf_r+0x17c>
 8004fe4:	b1b0      	cbz	r0, 8005014 <_svfiprintf_r+0x114>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e014      	b.n	8005014 <_svfiprintf_r+0x114>
 8004fea:	eba0 0308 	sub.w	r3, r0, r8
 8004fee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	46a2      	mov	sl, r4
 8004ff8:	e7d2      	b.n	8004fa0 <_svfiprintf_r+0xa0>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfbb      	ittet	lt
 8005006:	425b      	neglt	r3, r3
 8005008:	f042 0202 	orrlt.w	r2, r2, #2
 800500c:	9307      	strge	r3, [sp, #28]
 800500e:	9307      	strlt	r3, [sp, #28]
 8005010:	bfb8      	it	lt
 8005012:	9204      	strlt	r2, [sp, #16]
 8005014:	7823      	ldrb	r3, [r4, #0]
 8005016:	2b2e      	cmp	r3, #46	@ 0x2e
 8005018:	d10a      	bne.n	8005030 <_svfiprintf_r+0x130>
 800501a:	7863      	ldrb	r3, [r4, #1]
 800501c:	2b2a      	cmp	r3, #42	@ 0x2a
 800501e:	d132      	bne.n	8005086 <_svfiprintf_r+0x186>
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	9203      	str	r2, [sp, #12]
 8005028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800502c:	3402      	adds	r4, #2
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050f4 <_svfiprintf_r+0x1f4>
 8005034:	7821      	ldrb	r1, [r4, #0]
 8005036:	2203      	movs	r2, #3
 8005038:	4650      	mov	r0, sl
 800503a:	f7fb f901 	bl	8000240 <memchr>
 800503e:	b138      	cbz	r0, 8005050 <_svfiprintf_r+0x150>
 8005040:	9b04      	ldr	r3, [sp, #16]
 8005042:	eba0 000a 	sub.w	r0, r0, sl
 8005046:	2240      	movs	r2, #64	@ 0x40
 8005048:	4082      	lsls	r2, r0
 800504a:	4313      	orrs	r3, r2
 800504c:	3401      	adds	r4, #1
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005054:	4824      	ldr	r0, [pc, #144]	@ (80050e8 <_svfiprintf_r+0x1e8>)
 8005056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800505a:	2206      	movs	r2, #6
 800505c:	f7fb f8f0 	bl	8000240 <memchr>
 8005060:	2800      	cmp	r0, #0
 8005062:	d036      	beq.n	80050d2 <_svfiprintf_r+0x1d2>
 8005064:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <_svfiprintf_r+0x1ec>)
 8005066:	bb1b      	cbnz	r3, 80050b0 <_svfiprintf_r+0x1b0>
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	3307      	adds	r3, #7
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	3308      	adds	r3, #8
 8005072:	9303      	str	r3, [sp, #12]
 8005074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005076:	4433      	add	r3, r6
 8005078:	9309      	str	r3, [sp, #36]	@ 0x24
 800507a:	e76a      	b.n	8004f52 <_svfiprintf_r+0x52>
 800507c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005080:	460c      	mov	r4, r1
 8005082:	2001      	movs	r0, #1
 8005084:	e7a8      	b.n	8004fd8 <_svfiprintf_r+0xd8>
 8005086:	2300      	movs	r3, #0
 8005088:	3401      	adds	r4, #1
 800508a:	9305      	str	r3, [sp, #20]
 800508c:	4619      	mov	r1, r3
 800508e:	f04f 0c0a 	mov.w	ip, #10
 8005092:	4620      	mov	r0, r4
 8005094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005098:	3a30      	subs	r2, #48	@ 0x30
 800509a:	2a09      	cmp	r2, #9
 800509c:	d903      	bls.n	80050a6 <_svfiprintf_r+0x1a6>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0c6      	beq.n	8005030 <_svfiprintf_r+0x130>
 80050a2:	9105      	str	r1, [sp, #20]
 80050a4:	e7c4      	b.n	8005030 <_svfiprintf_r+0x130>
 80050a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050aa:	4604      	mov	r4, r0
 80050ac:	2301      	movs	r3, #1
 80050ae:	e7f0      	b.n	8005092 <_svfiprintf_r+0x192>
 80050b0:	ab03      	add	r3, sp, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <_svfiprintf_r+0x1f0>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	4638      	mov	r0, r7
 80050bc:	f3af 8000 	nop.w
 80050c0:	1c42      	adds	r2, r0, #1
 80050c2:	4606      	mov	r6, r0
 80050c4:	d1d6      	bne.n	8005074 <_svfiprintf_r+0x174>
 80050c6:	89ab      	ldrh	r3, [r5, #12]
 80050c8:	065b      	lsls	r3, r3, #25
 80050ca:	f53f af2d 	bmi.w	8004f28 <_svfiprintf_r+0x28>
 80050ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050d0:	e72c      	b.n	8004f2c <_svfiprintf_r+0x2c>
 80050d2:	ab03      	add	r3, sp, #12
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	462a      	mov	r2, r5
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <_svfiprintf_r+0x1f0>)
 80050da:	a904      	add	r1, sp, #16
 80050dc:	4638      	mov	r0, r7
 80050de:	f000 f879 	bl	80051d4 <_printf_i>
 80050e2:	e7ed      	b.n	80050c0 <_svfiprintf_r+0x1c0>
 80050e4:	08005560 	.word	0x08005560
 80050e8:	0800556a 	.word	0x0800556a
 80050ec:	00000000 	.word	0x00000000
 80050f0:	08004e49 	.word	0x08004e49
 80050f4:	08005566 	.word	0x08005566

080050f8 <_printf_common>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	4616      	mov	r6, r2
 80050fe:	4698      	mov	r8, r3
 8005100:	688a      	ldr	r2, [r1, #8]
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005108:	4293      	cmp	r3, r2
 800510a:	bfb8      	it	lt
 800510c:	4613      	movlt	r3, r2
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005114:	4607      	mov	r7, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b10a      	cbz	r2, 800511e <_printf_common+0x26>
 800511a:	3301      	adds	r3, #1
 800511c:	6033      	str	r3, [r6, #0]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	0699      	lsls	r1, r3, #26
 8005122:	bf42      	ittt	mi
 8005124:	6833      	ldrmi	r3, [r6, #0]
 8005126:	3302      	addmi	r3, #2
 8005128:	6033      	strmi	r3, [r6, #0]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	f015 0506 	ands.w	r5, r5, #6
 8005130:	d106      	bne.n	8005140 <_printf_common+0x48>
 8005132:	f104 0a19 	add.w	sl, r4, #25
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	6832      	ldr	r2, [r6, #0]
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	42ab      	cmp	r3, r5
 800513e:	dc26      	bgt.n	800518e <_printf_common+0x96>
 8005140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	3b00      	subs	r3, #0
 8005148:	bf18      	it	ne
 800514a:	2301      	movne	r3, #1
 800514c:	0692      	lsls	r2, r2, #26
 800514e:	d42b      	bmi.n	80051a8 <_printf_common+0xb0>
 8005150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005154:	4641      	mov	r1, r8
 8005156:	4638      	mov	r0, r7
 8005158:	47c8      	blx	r9
 800515a:	3001      	adds	r0, #1
 800515c:	d01e      	beq.n	800519c <_printf_common+0xa4>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	f003 0306 	and.w	r3, r3, #6
 8005166:	2b04      	cmp	r3, #4
 8005168:	bf02      	ittt	eq
 800516a:	68e5      	ldreq	r5, [r4, #12]
 800516c:	6833      	ldreq	r3, [r6, #0]
 800516e:	1aed      	subeq	r5, r5, r3
 8005170:	68a3      	ldr	r3, [r4, #8]
 8005172:	bf0c      	ite	eq
 8005174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005178:	2500      	movne	r5, #0
 800517a:	4293      	cmp	r3, r2
 800517c:	bfc4      	itt	gt
 800517e:	1a9b      	subgt	r3, r3, r2
 8005180:	18ed      	addgt	r5, r5, r3
 8005182:	2600      	movs	r6, #0
 8005184:	341a      	adds	r4, #26
 8005186:	42b5      	cmp	r5, r6
 8005188:	d11a      	bne.n	80051c0 <_printf_common+0xc8>
 800518a:	2000      	movs	r0, #0
 800518c:	e008      	b.n	80051a0 <_printf_common+0xa8>
 800518e:	2301      	movs	r3, #1
 8005190:	4652      	mov	r2, sl
 8005192:	4641      	mov	r1, r8
 8005194:	4638      	mov	r0, r7
 8005196:	47c8      	blx	r9
 8005198:	3001      	adds	r0, #1
 800519a:	d103      	bne.n	80051a4 <_printf_common+0xac>
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a4:	3501      	adds	r5, #1
 80051a6:	e7c6      	b.n	8005136 <_printf_common+0x3e>
 80051a8:	18e1      	adds	r1, r4, r3
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	2030      	movs	r0, #48	@ 0x30
 80051ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b2:	4422      	add	r2, r4
 80051b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051bc:	3302      	adds	r3, #2
 80051be:	e7c7      	b.n	8005150 <_printf_common+0x58>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4622      	mov	r2, r4
 80051c4:	4641      	mov	r1, r8
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c8      	blx	r9
 80051ca:	3001      	adds	r0, #1
 80051cc:	d0e6      	beq.n	800519c <_printf_common+0xa4>
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7d9      	b.n	8005186 <_printf_common+0x8e>
	...

080051d4 <_printf_i>:
 80051d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d8:	7e0f      	ldrb	r7, [r1, #24]
 80051da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051dc:	2f78      	cmp	r7, #120	@ 0x78
 80051de:	4691      	mov	r9, r2
 80051e0:	4680      	mov	r8, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	469a      	mov	sl, r3
 80051e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ea:	d807      	bhi.n	80051fc <_printf_i+0x28>
 80051ec:	2f62      	cmp	r7, #98	@ 0x62
 80051ee:	d80a      	bhi.n	8005206 <_printf_i+0x32>
 80051f0:	2f00      	cmp	r7, #0
 80051f2:	f000 80d1 	beq.w	8005398 <_printf_i+0x1c4>
 80051f6:	2f58      	cmp	r7, #88	@ 0x58
 80051f8:	f000 80b8 	beq.w	800536c <_printf_i+0x198>
 80051fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005204:	e03a      	b.n	800527c <_printf_i+0xa8>
 8005206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520a:	2b15      	cmp	r3, #21
 800520c:	d8f6      	bhi.n	80051fc <_printf_i+0x28>
 800520e:	a101      	add	r1, pc, #4	@ (adr r1, 8005214 <_printf_i+0x40>)
 8005210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005214:	0800526d 	.word	0x0800526d
 8005218:	08005281 	.word	0x08005281
 800521c:	080051fd 	.word	0x080051fd
 8005220:	080051fd 	.word	0x080051fd
 8005224:	080051fd 	.word	0x080051fd
 8005228:	080051fd 	.word	0x080051fd
 800522c:	08005281 	.word	0x08005281
 8005230:	080051fd 	.word	0x080051fd
 8005234:	080051fd 	.word	0x080051fd
 8005238:	080051fd 	.word	0x080051fd
 800523c:	080051fd 	.word	0x080051fd
 8005240:	0800537f 	.word	0x0800537f
 8005244:	080052ab 	.word	0x080052ab
 8005248:	08005339 	.word	0x08005339
 800524c:	080051fd 	.word	0x080051fd
 8005250:	080051fd 	.word	0x080051fd
 8005254:	080053a1 	.word	0x080053a1
 8005258:	080051fd 	.word	0x080051fd
 800525c:	080052ab 	.word	0x080052ab
 8005260:	080051fd 	.word	0x080051fd
 8005264:	080051fd 	.word	0x080051fd
 8005268:	08005341 	.word	0x08005341
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6032      	str	r2, [r6, #0]
 8005274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800527c:	2301      	movs	r3, #1
 800527e:	e09c      	b.n	80053ba <_printf_i+0x1e6>
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	6031      	str	r1, [r6, #0]
 8005288:	0606      	lsls	r6, r0, #24
 800528a:	d501      	bpl.n	8005290 <_printf_i+0xbc>
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	e003      	b.n	8005298 <_printf_i+0xc4>
 8005290:	0645      	lsls	r5, r0, #25
 8005292:	d5fb      	bpl.n	800528c <_printf_i+0xb8>
 8005294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005298:	2d00      	cmp	r5, #0
 800529a:	da03      	bge.n	80052a4 <_printf_i+0xd0>
 800529c:	232d      	movs	r3, #45	@ 0x2d
 800529e:	426d      	negs	r5, r5
 80052a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a4:	4858      	ldr	r0, [pc, #352]	@ (8005408 <_printf_i+0x234>)
 80052a6:	230a      	movs	r3, #10
 80052a8:	e011      	b.n	80052ce <_printf_i+0xfa>
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	0608      	lsls	r0, r1, #24
 80052b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b4:	d402      	bmi.n	80052bc <_printf_i+0xe8>
 80052b6:	0649      	lsls	r1, r1, #25
 80052b8:	bf48      	it	mi
 80052ba:	b2ad      	uxthmi	r5, r5
 80052bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052be:	4852      	ldr	r0, [pc, #328]	@ (8005408 <_printf_i+0x234>)
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	bf14      	ite	ne
 80052c4:	230a      	movne	r3, #10
 80052c6:	2308      	moveq	r3, #8
 80052c8:	2100      	movs	r1, #0
 80052ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052ce:	6866      	ldr	r6, [r4, #4]
 80052d0:	60a6      	str	r6, [r4, #8]
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	db05      	blt.n	80052e2 <_printf_i+0x10e>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	432e      	orrs	r6, r5
 80052da:	f021 0104 	bic.w	r1, r1, #4
 80052de:	6021      	str	r1, [r4, #0]
 80052e0:	d04b      	beq.n	800537a <_printf_i+0x1a6>
 80052e2:	4616      	mov	r6, r2
 80052e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052e8:	fb03 5711 	mls	r7, r3, r1, r5
 80052ec:	5dc7      	ldrb	r7, [r0, r7]
 80052ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f2:	462f      	mov	r7, r5
 80052f4:	42bb      	cmp	r3, r7
 80052f6:	460d      	mov	r5, r1
 80052f8:	d9f4      	bls.n	80052e4 <_printf_i+0x110>
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d10b      	bne.n	8005316 <_printf_i+0x142>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	07df      	lsls	r7, r3, #31
 8005302:	d508      	bpl.n	8005316 <_printf_i+0x142>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	6861      	ldr	r1, [r4, #4]
 8005308:	4299      	cmp	r1, r3
 800530a:	bfde      	ittt	le
 800530c:	2330      	movle	r3, #48	@ 0x30
 800530e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005312:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005316:	1b92      	subs	r2, r2, r6
 8005318:	6122      	str	r2, [r4, #16]
 800531a:	f8cd a000 	str.w	sl, [sp]
 800531e:	464b      	mov	r3, r9
 8005320:	aa03      	add	r2, sp, #12
 8005322:	4621      	mov	r1, r4
 8005324:	4640      	mov	r0, r8
 8005326:	f7ff fee7 	bl	80050f8 <_printf_common>
 800532a:	3001      	adds	r0, #1
 800532c:	d14a      	bne.n	80053c4 <_printf_i+0x1f0>
 800532e:	f04f 30ff 	mov.w	r0, #4294967295
 8005332:	b004      	add	sp, #16
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f043 0320 	orr.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	4832      	ldr	r0, [pc, #200]	@ (800540c <_printf_i+0x238>)
 8005342:	2778      	movs	r7, #120	@ 0x78
 8005344:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	6831      	ldr	r1, [r6, #0]
 800534c:	061f      	lsls	r7, r3, #24
 800534e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005352:	d402      	bmi.n	800535a <_printf_i+0x186>
 8005354:	065f      	lsls	r7, r3, #25
 8005356:	bf48      	it	mi
 8005358:	b2ad      	uxthmi	r5, r5
 800535a:	6031      	str	r1, [r6, #0]
 800535c:	07d9      	lsls	r1, r3, #31
 800535e:	bf44      	itt	mi
 8005360:	f043 0320 	orrmi.w	r3, r3, #32
 8005364:	6023      	strmi	r3, [r4, #0]
 8005366:	b11d      	cbz	r5, 8005370 <_printf_i+0x19c>
 8005368:	2310      	movs	r3, #16
 800536a:	e7ad      	b.n	80052c8 <_printf_i+0xf4>
 800536c:	4826      	ldr	r0, [pc, #152]	@ (8005408 <_printf_i+0x234>)
 800536e:	e7e9      	b.n	8005344 <_printf_i+0x170>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	e7f6      	b.n	8005368 <_printf_i+0x194>
 800537a:	4616      	mov	r6, r2
 800537c:	e7bd      	b.n	80052fa <_printf_i+0x126>
 800537e:	6833      	ldr	r3, [r6, #0]
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	6961      	ldr	r1, [r4, #20]
 8005384:	1d18      	adds	r0, r3, #4
 8005386:	6030      	str	r0, [r6, #0]
 8005388:	062e      	lsls	r6, r5, #24
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	d501      	bpl.n	8005392 <_printf_i+0x1be>
 800538e:	6019      	str	r1, [r3, #0]
 8005390:	e002      	b.n	8005398 <_printf_i+0x1c4>
 8005392:	0668      	lsls	r0, r5, #25
 8005394:	d5fb      	bpl.n	800538e <_printf_i+0x1ba>
 8005396:	8019      	strh	r1, [r3, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	4616      	mov	r6, r2
 800539e:	e7bc      	b.n	800531a <_printf_i+0x146>
 80053a0:	6833      	ldr	r3, [r6, #0]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	6032      	str	r2, [r6, #0]
 80053a6:	681e      	ldr	r6, [r3, #0]
 80053a8:	6862      	ldr	r2, [r4, #4]
 80053aa:	2100      	movs	r1, #0
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7fa ff47 	bl	8000240 <memchr>
 80053b2:	b108      	cbz	r0, 80053b8 <_printf_i+0x1e4>
 80053b4:	1b80      	subs	r0, r0, r6
 80053b6:	6060      	str	r0, [r4, #4]
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	2300      	movs	r3, #0
 80053be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c2:	e7aa      	b.n	800531a <_printf_i+0x146>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	4632      	mov	r2, r6
 80053c8:	4649      	mov	r1, r9
 80053ca:	4640      	mov	r0, r8
 80053cc:	47d0      	blx	sl
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0ad      	beq.n	800532e <_printf_i+0x15a>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	079b      	lsls	r3, r3, #30
 80053d6:	d413      	bmi.n	8005400 <_printf_i+0x22c>
 80053d8:	68e0      	ldr	r0, [r4, #12]
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	4298      	cmp	r0, r3
 80053de:	bfb8      	it	lt
 80053e0:	4618      	movlt	r0, r3
 80053e2:	e7a6      	b.n	8005332 <_printf_i+0x15e>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4632      	mov	r2, r6
 80053e8:	4649      	mov	r1, r9
 80053ea:	4640      	mov	r0, r8
 80053ec:	47d0      	blx	sl
 80053ee:	3001      	adds	r0, #1
 80053f0:	d09d      	beq.n	800532e <_printf_i+0x15a>
 80053f2:	3501      	adds	r5, #1
 80053f4:	68e3      	ldr	r3, [r4, #12]
 80053f6:	9903      	ldr	r1, [sp, #12]
 80053f8:	1a5b      	subs	r3, r3, r1
 80053fa:	42ab      	cmp	r3, r5
 80053fc:	dcf2      	bgt.n	80053e4 <_printf_i+0x210>
 80053fe:	e7eb      	b.n	80053d8 <_printf_i+0x204>
 8005400:	2500      	movs	r5, #0
 8005402:	f104 0619 	add.w	r6, r4, #25
 8005406:	e7f5      	b.n	80053f4 <_printf_i+0x220>
 8005408:	08005571 	.word	0x08005571
 800540c:	08005582 	.word	0x08005582

08005410 <memmove>:
 8005410:	4288      	cmp	r0, r1
 8005412:	b510      	push	{r4, lr}
 8005414:	eb01 0402 	add.w	r4, r1, r2
 8005418:	d902      	bls.n	8005420 <memmove+0x10>
 800541a:	4284      	cmp	r4, r0
 800541c:	4623      	mov	r3, r4
 800541e:	d807      	bhi.n	8005430 <memmove+0x20>
 8005420:	1e43      	subs	r3, r0, #1
 8005422:	42a1      	cmp	r1, r4
 8005424:	d008      	beq.n	8005438 <memmove+0x28>
 8005426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800542a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800542e:	e7f8      	b.n	8005422 <memmove+0x12>
 8005430:	4402      	add	r2, r0
 8005432:	4601      	mov	r1, r0
 8005434:	428a      	cmp	r2, r1
 8005436:	d100      	bne.n	800543a <memmove+0x2a>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800543e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005442:	e7f7      	b.n	8005434 <memmove+0x24>

08005444 <_sbrk_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d06      	ldr	r5, [pc, #24]	@ (8005460 <_sbrk_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fc7c 	bl	8000d4c <_sbrk>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_sbrk_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_sbrk_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	2000446c 	.word	0x2000446c

08005464 <_realloc_r>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	4607      	mov	r7, r0
 800546a:	4614      	mov	r4, r2
 800546c:	460d      	mov	r5, r1
 800546e:	b921      	cbnz	r1, 800547a <_realloc_r+0x16>
 8005470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4611      	mov	r1, r2
 8005476:	f7ff bc5b 	b.w	8004d30 <_malloc_r>
 800547a:	b92a      	cbnz	r2, 8005488 <_realloc_r+0x24>
 800547c:	f7ff fbec 	bl	8004c58 <_free_r>
 8005480:	4625      	mov	r5, r4
 8005482:	4628      	mov	r0, r5
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	f000 f81a 	bl	80054c0 <_malloc_usable_size_r>
 800548c:	4284      	cmp	r4, r0
 800548e:	4606      	mov	r6, r0
 8005490:	d802      	bhi.n	8005498 <_realloc_r+0x34>
 8005492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005496:	d8f4      	bhi.n	8005482 <_realloc_r+0x1e>
 8005498:	4621      	mov	r1, r4
 800549a:	4638      	mov	r0, r7
 800549c:	f7ff fc48 	bl	8004d30 <_malloc_r>
 80054a0:	4680      	mov	r8, r0
 80054a2:	b908      	cbnz	r0, 80054a8 <_realloc_r+0x44>
 80054a4:	4645      	mov	r5, r8
 80054a6:	e7ec      	b.n	8005482 <_realloc_r+0x1e>
 80054a8:	42b4      	cmp	r4, r6
 80054aa:	4622      	mov	r2, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	bf28      	it	cs
 80054b0:	4632      	movcs	r2, r6
 80054b2:	f7ff fbc3 	bl	8004c3c <memcpy>
 80054b6:	4629      	mov	r1, r5
 80054b8:	4638      	mov	r0, r7
 80054ba:	f7ff fbcd 	bl	8004c58 <_free_r>
 80054be:	e7f1      	b.n	80054a4 <_realloc_r+0x40>

080054c0 <_malloc_usable_size_r>:
 80054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c4:	1f18      	subs	r0, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfbc      	itt	lt
 80054ca:	580b      	ldrlt	r3, [r1, r0]
 80054cc:	18c0      	addlt	r0, r0, r3
 80054ce:	4770      	bx	lr

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
